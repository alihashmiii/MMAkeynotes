(************** Content-type: application/mathematica **************

                    Mathematica-Compatible Notebook

This notebook can be used with any Mathematica-compatible
application, such as Mathematica, MathReader or Publicon. The data
for the notebook starts with the line containing stars above.

To get the notebook into a Mathematica-compatible application, do
one of the following:

* Save the data starting with the line of stars above into a file
  with a name ending in .nb, then open the file inside the
  application;

* Copy the data starting with the line of stars above to the
  clipboard, then use the Paste menu command inside the application.

Data for notebooks contains only printable 7-bit ASCII and can be
sent directly in email or through ftp in text mode.  Newlines can be
CR, LF or CRLF (Unix, Macintosh or MS-DOS style).

NOTE: If you modify the data for this notebook not in a Mathematica-
compatible application, you must delete the line below containing
the word CacheID, otherwise Mathematica-compatible applications may
try to use invalid cache data.

For more information on notebooks and Mathematica-compatible 
applications, contact Wolfram Research:
  web: http://www.wolfram.com
  email: info@wolfram.com
  phone: +1-217-398-0700 (U.S.)

Notebook reader applications are available free of charge from 
Wolfram Research.
*******************************************************************)

(*CacheID: 232*)


(*NotebookFileLineBreakTest
NotebookFileLineBreakTest*)
(*NotebookOptionsPosition[    792255,      26635]*)
(*NotebookOutlinePosition[    854954,      28372]*)
(*  CellTagsIndexPosition[    849483,      28218]*)
(*WindowFrame->Normal*)



Notebook[{
Cell[TextData[{
  StyleBox["Supplementary Mathematica Help Browser\n",
    FontSize->24],
  "by Ted Ersek  ",
  ButtonBox[" ted.ersek@navy.mil",
    ButtonData:>{
      URL[ "mailto:ted.ersek@navy.mil"], None},
    ButtonStyle->"Hyperlink"]
}], "Title",
  FontSize->12,
  Background->RGBColor[1, 0.975998, 0.949996]],

Cell[CellGroupData[{

Cell["What you will find here and won't find here", "MiscSection",
  CellFrame->False],

Cell["\<\
What I try to provide through this resource is additional material to help \
people get over the Mathematica learning curve. More specifically I try to \
demonstrate features that are hard to master from the Wolfram Research \
documentation. I also try to explain nuances that lots of users would \
otherwise never know about.\
\>", "Text"],

Cell[TextData[{
  "This resource isn't intended for people who never used Mathematica and \
want to start learning how to use it. I suggest that users in that position \
get a copy of The ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " Book and read sections 1.0 through 1.10,  sections 2.1 through 2.4 (260 \
pages of light reading). After that one should read any sections in Part III \
(Advanced ",
  StyleBox["Mathematics in Mathematica",
    FontSlant->"Italic"],
  ") in the same book that are of interest. At that point one should have a \
working knowledge of ",
  StyleBox["Mathematica.",
    FontSlant->"Italic"],
  "  One can then use The ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " Book, and of course this resource as reference material.\n\nBecause I \
don't intend to teach ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " from the ground up, a lot of principles fundamental to ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " aren't explained here. I figured there is no need to explain features \
that are explained very well in The ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " Book.\n\nYou also won't find discussion of certain features that even I \
haven't used (ie. working with Files and Streams)."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["New or revised areas", "MiscSection",
  CellFrame->False],

Cell[CellGroupData[{

Cell["New or Revised in May 2000", "Subsection",
  ShowGroupOpenCloseIcon->True],

Cell[TextData[{
  ButtonBox["FoldList",
    ButtonData:>"FoldList",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Insert",
    ButtonData:>"Insert",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Part",
    ButtonData:>"Part",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Together",
    ButtonData:>"Together",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["ToString",
    ButtonData:>"ToString",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Simplify & FullSimplify",
    ButtonData:>"Simplify_FullSimplify",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Split",
    ButtonData:>"Split",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Sort",
    ButtonData:>"Sort",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Pure functions with no arguments",
    ButtonData:>"No_Argument_Functions",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Controlling Memory Usage",
    ButtonData:>"Controlling Memory Usage",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Programming For Speed",
    ButtonData:>"Speedy_Programming",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Tech Support Secrets",
    ButtonData:>"Tech Support",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Working with a List or Table of data",
    ButtonData:>"Lists_Tables",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["An Algebraic Transformation",
    ButtonData:>"Algebra_Transformation",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Making a Tensor into a Matrix",
    ButtonData:>"Tensor_to_Matrix",
    ButtonStyle->"Hyperlink"]
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["New or Revised in Oct 2002 ", "Subsection",
  ShowGroupOpenCloseIcon->True],

Cell[TextData[{
  ButtonBox["Apply",
    ButtonData:>"Apply",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["ButtonProgramming",
    ButtonData:>"ButtonProgramming",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["ButtonStyles",
    ButtonData:>"ButtonStyles",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["CoefficientsToPolynomial",
    ButtonData:>"CoefficientsToPolynomial",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Condition",
    ButtonData:>"Condition",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Complement",
    ButtonData:>"Complement",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Count",
    ButtonData:>"Count",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["DeleteCases",
    ButtonData:>"DeleteCases",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Distribute, an application",
    ButtonData:>"Distribute - Application",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Dot",
    ButtonData:>"Dot",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["EvaluateAt",
    ButtonData:>"Evaluate At",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["EvaluatePattern",
    ButtonData:>"Evaluate Pattern",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["ExactNumberQ, InexactNumberQ, NumberQ, NumericQ",
    ButtonData:>"ExactNumberQ",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["FreeQ",
    ButtonData:>"FreeQ",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Function",
    ButtonData:>"Function",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Inner",
    ButtonData:>"Inner",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Launching an email message",
    ButtonData:>"Email",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Level",
    ButtonData:>"Level",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["MemberQ",
    ButtonData:>"MemberQ",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Message",
    ButtonData:>"Message",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Options, OptionQ",
    ButtonData:>"Options",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Outer",
    ButtonData:>"Outer",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Position",
    ButtonData:>"Position",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Replace",
    ButtonData:>"Replace",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Scan",
    ButtonData:>"Scan",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["(s_Symbol) may not be specific enough",
    ButtonData:>"s_Symbol",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["TagBox",
    ButtonData:>"TagBox",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Tr",
    ButtonData:>"Tr",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Trig option",
    ButtonData:>"Trig option",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Union without sorting",
    ButtonData:>"DeleteRepititions",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Update",
    ButtonData:>"Update",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Where definitions are stored",
    ButtonData:>"Definition-Storage",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["$OutputForms",
    ButtonData:>"$OutputForms",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["$PreRead, $Pre, $Post, $PrePrint",
    ButtonData:>"$Pre;$Post",
    ButtonStyle->"Hyperlink"]
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["New or Revised in May 2004", "Subsection"],

Cell[TextData[{
  ButtonBox["Alternatives",
    ButtonData:>"Alternatives",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Clear, ClearAll, Remove",
    ButtonData:>"Clear",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Condition",
    ButtonData:>"Condition",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Blank(_), BlankSequence(_), BlankNullSequence(___)",
    ButtonData:>"Blank",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Button Programming",
    ButtonData:>"ButtonProgramming",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Evaluate",
    ButtonData:>"Evaluate",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["The Evaluation Process",
    ButtonData:>"Evaluation-Process",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Flatten",
    ButtonData:>"Flatten",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["HoldAll, HoldFirst, HoldRest",
    ButtonData:>"HoldAll",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["HoldAllComplete",
    ButtonData:>"HoldAllComplete",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["ListConvolve",
    ButtonData:>"ListConvolve",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["ListCorrelate",
    ButtonData:>"ListCorrelate",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["NHoldAll, NHoldRest, NHoldFirst",
    ButtonData:>"NHoldAll",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Optional",
    ButtonData:>"Optional",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Ordering",
    ButtonData:>"Ordering",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Pattern",
    ButtonData:>"Pattern",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Pattern Matching",
    ButtonData:>"Pattern-Matching",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["PatternTest",
    ButtonData:>"PatternTest",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Random",
    ButtonData:>"Random",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Repeated (..), RepeatedNull (...)",
    ButtonData:>"Repeated RepeatedNull",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Replace",
    ButtonData:>"Replace",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["ReplaceAll, ReplaceRepeated",
    ButtonData:>"ReplaceAll;ReplaceRepeated",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Tech Support Secrets",
    ButtonData:>"Tech Support",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Unevaluated",
    ButtonData:>"Unevaluated",
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Verbatim",
    ButtonData:>"Verbatim",
    ButtonStyle->"Hyperlink"]
}], "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Alternatives", "Section",
  CellFrame->{{0, 0}, {0, 4}}],

Cell["\<\
Alternatives as in (p1 | p2 | p3) are used when you want to refer to one of \
multiple patterns.  So in the next cell ( _Sin | _Cos | _Tan ) represents an \
expression with the with the head Sin, Cos, or Tan. \
\>", "Text",
  CellTags->"Alternatives"],

Cell[CellGroupData[{

Cell[BoxData[
    \({\[ExponentialE]\^2, 2, Sin[1] + x, Cos[1] - 1/2, 3.4, 
        Tan[x + 1]} /. \((_Sin | _Cos | _Tan)\) \[Rule] 
        Trigonometric\)], "Input"],

Cell[BoxData[
    \({\[ExponentialE]\^2, 2, 
      Trigonometric + x, \(-\(1\/2\)\) + Trigonometric, 3.4`, 
      Trigonometric}\)], "Output"]
}, Open  ]],

Cell["\<\
in the next cell (f) is defined when given one argument with the head Real or \
Integer.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(Clear[f, s]\), "\[IndentingNewLine]", 
    \(f[x_Real | x_Integer] := x + 1\), "\[IndentingNewLine]", 
    \({f[2], f[2.4], f[2, 4], f[s]}\)}], "Input"],

Cell[BoxData[
    \({3, 3.4`, f[2, 4], f[s]}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "In the next cell (f) is defined when given one or more real arguments or \
one or more integer arguments.  However, this definition isn't used when (f) \
is given a sequence of arguments where some are real and others are integer.  \
Allowing a mix of different patterns requires is demonstrated in the section \
on ",
  ButtonBox["Repeated, RepeatedNull",
    ButtonData:>"Repeated RepeatedNull",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(Clear[f, s]\), "\[IndentingNewLine]", 
    \(f[x__Real | x__Integer] := x + 1\), "\[IndentingNewLine]", 
    \({f[2], f[2.4], f[2, 4], f[2.4, 2.1], f[2, 2.4], f[s]}\)}], "Input"],

Cell[BoxData[
    \({3, 3.4`, 7, 5.5`, f[2, 2.4`], f[s]}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Instead of using  (x_Real  x_Integer) we can use  ",
  Cell[BoxData[
      \(TraditionalForm\`x : \((_Real | _Integer)\)\)]],
  ".  \nAnd instead of using (x__Real | x_Integer) we can use  ",
  Cell[BoxData[
      \(TraditionalForm\`x(__Real | __Integer)\)]],
  ".  \n\nIn addition any other combination of pattern matching constructs \
can be used with Alternatives.  Nuances of ",
  ButtonBox["pattern matching",
    ButtonData:>"Pattern-Matching",
    ButtonStyle->"Hyperlink"],
  " are discussed in another section.\n\nA common place to use Alternatives \
is in the second argument of ",
  ButtonBox["MakeBoxes",
    ButtonData:>"MakeBoxes",
    ButtonStyle->"Hyperlink"],
  " when you want to use a MakeBoxes rule for StandardForm, and \
TraditionalForm, but not for  InputForm, TableForm, etc.  In that case use  \
form:(StandardForm|TraditionalForm)  as the second argument in the MakeBoxes \
definition as in the next cell.  You can see below that this MakeBoxes rule \
is used for StandardForm, TraditionalForm, but not InputForm."
}], "Text"],

Cell[BoxData[
    \(MakeBoxes[foo[expr_], form : \((StandardForm | TraditionalForm)\)] := 
      RowBox[{"\<{\>", MakeBoxes[expr, form], "\<}\>"}]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Apply", "Section"],

Cell["\<\
First I define (lst) which will be used to demonstrate Apply.\
\>", "Text",
  CellTags->"Apply"],

Cell[CellGroupData[{

Cell[BoxData[
    \(lst = 
      Table[Random[Integer, {0, 9}], \ \ \ {3}, {2}, {2}, {2}]\)], "Input"],

Cell[BoxData[
    \({{{{3, 8}, {0, 4}}, {{3, 6}, {5, 8}}}, {{{3, 8}, {7, 2}}, {{8, 3}, {8, 
            2}}}, {{{6, 3}, {3, 6}}, {{2, 6}, {6, 2}}}}\)], "Output"]
}, Open  ]],

Cell["(h@@lst) simply changes the head of list to h. ", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[h, g1, g2, g3, g4];\)\), "\[IndentingNewLine]", 
    \(h @@ lst\)}], "Input"],

Cell[BoxData[
    \(h[{{{3, 8}, {0, 4}}, {{3, 6}, {5, 8}}}, {{{3, 8}, {7, 2}}, {{8, 3}, {8, 
            2}}}, {{{6, 3}, {3, 6}}, {{2, 6}, {6, 2}}}]\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Starting with ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " 4.0 we could use  (h@@@lst)  to apply a head to all sub-expressions at a \
specific level."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(h @@@ lst\)], "Input"],

Cell[BoxData[
    \({h[{{3, 8}, {0, 4}}, {{3, 6}, {5, 8}}], 
      h[{{3, 8}, {7, 2}}, {{8, 3}, {8, 2}}], 
      h[{{6, 3}, {3, 6}}, {{2, 6}, {6, 2}}]}\)], "Output"]
}, Open  ]],

Cell["\<\
(h@@lst)  is normally equivalent to Apply[h, expr] and  (h@@@lst)  is \
normally equivalent to Apply[h, lst, 1] as demonstrated in the next cell.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \({h @@ lst === Apply[h, lst], \ \ h @@@ lst === 
        Apply[h, lst, 1]}\)], "Input"],

Cell[BoxData[
    \({True, True}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "If you use Apply in packages you write and you need to make the package \
highly reliable you should be completely explicit by using things like\n\
Apply[h, expr, Heads\[Rule]False]  or  Apply[h, expr, 1, Heads->False]  since \
the user of your package may have changed the default option using  \
SetOptions[Apply, Heads\[Rule]True].",
  StyleBox["\n",
    FontWeight->"Bold"],
  "\nThe next example changes the heads at levels 1 and 2 to h."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Apply[h, lst, 2]\)], "Input"],

Cell[BoxData[
    \({h[h[{3, 8}, {0, 4}], h[{3, 6}, {5, 8}]], 
      h[h[{3, 8}, {7, 2}], h[{8, 3}, {8, 2}]], 
      h[h[{6, 3}, {3, 6}], h[{2, 6}, {6, 2}]]}\)], "Output"]
}, Open  ]],

Cell["\<\
The next example changes the heads at all levels from 0 down to level 2.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Apply[h, lst, {0, 2}]\)], "Input"],

Cell[BoxData[
    \(h[h[h[{3, 8}, {0, 4}], h[{3, 6}, {5, 8}]], 
      h[h[{3, 8}, {7, 2}], h[{8, 3}, {8, 2}]], 
      h[h[{6, 3}, {3, 6}], h[{2, 6}, {6, 2}]]]\)], "Output"]
}, Open  ]],

Cell["\<\
Fortunately we can Apply a function to an atomic expression without getting \
an error message.  In that case we simply get the atom back.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \({h @@ 2, h @@@ 3}\)], "Input"],

Cell[BoxData[
    \({2, 3}\)], "Output"]
}, Open  ]],

Cell["\<\
The heads we are changing don't have to be lists and they don't have to be \
the same.  Here I make a more general expression to demonstrate this.\
\>", "Text"],

Cell[BoxData[
    \(\(expr = 
        g1[{2, 3}, {3, 4}] g2[{4, 5}, {5, 6}] + 
          g3[{6, 7}, {7, 8}] g4[{8, 9}, {9, 10}];\)\)], "Input"],

Cell["This changes the head Plus to h.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(h @@ expr\)], "Input"],

Cell[BoxData[
    \(h[g1[{2, 3}, {3, 4}]\ g2[{4, 5}, {5, 6}], 
      g3[{6, 7}, {7, 8}]\ g4[{8, 9}, {9, 10}]]\)], "Output"]
}, Open  ]],

Cell["This changes the head Times to h.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(h @@@ expr\)], "Input"],

Cell[BoxData[
    \(h[g1[{2, 3}, {3, 4}], g2[{4, 5}, {5, 6}]] + 
      h[g3[{6, 7}, {7, 8}], g4[{8, 9}, {9, 10}]]\)], "Output"]
}, Open  ]],

Cell["This changes the heads g1, g2, g3, and g4 to (h).", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Apply[h, expr, {2}]\)], "Input"],

Cell[BoxData[
    \(h[{2, 3}, {3, 4}]\ h[{4, 5}, {5, 6}] + 
      h[{6, 7}, {7, 8}]\ h[{8, 9}, {9, 10}]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Heads Option", "Subsection"],

Cell["\<\
Apply has a Heads option with the default setting (Heads\[Rule]False).  I \
needed help from David Park to come up with some examples here.  In the next \
input Apply is used with the default setting (Heads\[Rule]False), and the \
only sub-expression whose head is changed are \
Part[expr,1]\[LongRightArrow]g1[2] and Part[expr,2]\[LongRightArrow]g2[3].  \
Not including heads these are the only sub-expressions at level 1.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[f, g1, g2, h, y];\)\), "\[IndentingNewLine]", 
    \(\(expr = \(f[y]\)[g1[2], g2[3]];\)\), "\[IndentingNewLine]", 
    \(Apply[h, expr, 1]\)}], "Input"],

Cell[BoxData[
    \(\(f[y]\)[h[2], h[3]]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Part[expr, 0]\)], "Input"],

Cell[BoxData[
    \(f[y]\)], "Output"]
}, Open  ]],

Cell["\<\
Now the previous example is repeated using (Heads\[Rule]True) and (h) is \
applied to the sub-expression Part[expr,0]\[LongRightArrow]f[y]. The \
expression f[y] is the head of (expr) and Apply only affects the heads when \
the setting (Heads\[Rule]True) is used.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Apply[h, expr, 1, Heads \[Rule] True]\)], "Input"],

Cell[BoxData[
    \(\(h[y]\)[h[2], h[3]]\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[TextData[{
  "Also read  \"Further Examples\" at the end of the  ",
  ButtonBox["Apply",
    ButtonStyle->"RefGuideLink"],
  "  documentation in the Help Browser."
}], "Subsection",
  FontSize->12]
}, Closed]],

Cell[CellGroupData[{

Cell["Array", "Section"],

Cell[TextData[{
  "In the first line below we get a list of Cos[x/4] sampled at \nx={1, 2, 3, \
... 12}.  You can get the same result using Cos[Range[1/4,3,1/4]], and timing \
tests show it's faster to do this using Range.  If you are concerned about \
speed, you should use Range whenever possible.  The #& notation is explained \
under ",
  ButtonBox["Function",
    ButtonData:>"Function",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Array[Cos[#/4] &, \ \ 12]\)], "Input"],

Cell[BoxData[
    \({Cos[1\/4], Cos[1\/2], Cos[3\/4], Cos[1], Cos[5\/4], Cos[3\/2], 
      Cos[7\/4], Cos[2], Cos[9\/4], Cos[5\/2], Cos[11\/4], 
      Cos[3]}\)], "Output"]
}, Open  ]],

Cell["\<\
The next line gives 12 samples of Cos[x/4] starting at (x=4).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Array[Cos[#/4] &, \ \ 12, 4]\)], "Input"],

Cell[BoxData[
    \({Cos[1], Cos[5\/4], Cos[3\/2], Cos[7\/4], Cos[2], Cos[9\/4], Cos[5\/2], 
      Cos[11\/4], Cos[3], Cos[13\/4], Cos[7\/2], Cos[15\/4]}\)], "Output"]
}, Open  ]],

Cell["\<\
Array can take a fourth argument which should be applied to the result \
instead of list.  The next line finds the minimum of the samples given in the \
previous line.  Notice the function to be applied must be the fourth \
argument, so you must provide an starting value as a third argument.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Array[Cos[#/4] &, 12, 4, Min]\)], "Input"],

Cell[BoxData[
    \(Cos[13\/4]\)], "Output"]
}, Open  ]],

Cell["\<\
The starting place for Array doesn't have to be an integer.  In the next line \
Array starts at the symbol (t) and samples Cos[_] at 11 points.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[f, t];\)\), "\[IndentingNewLine]", 
    \(Array[Cos, 11, t]\)}], "Input"],

Cell[BoxData[
    \({Cos[t], Cos[1 + t], Cos[2 + t], Cos[3 + t], Cos[4 + t], Cos[5 + t], 
      Cos[6 + t], Cos[7 + t], Cos[8 + t], Cos[9 + t], 
      Cos[10 + t]}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "In the next line Array is used to make a matrix.  ",
  ButtonBox["Range",
    ButtonData:>"Range",
    ButtonStyle->"Hyperlink"],
  " can do many things Array can do very efficiently.  However, Array is the \
method of choice for making matrices such as the following."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Array[f, {5, 3}] // MatrixForm\)], "Input"],

Cell[BoxData[
    TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {\(f[1, 1]\), \(f[1, 2]\), \(f[1, 3]\)},
            {\(f[2, 1]\), \(f[2, 2]\), \(f[2, 3]\)},
            {\(f[3, 1]\), \(f[3, 2]\), \(f[3, 3]\)},
            {\(f[4, 1]\), \(f[4, 2]\), \(f[4, 3]\)},
            {\(f[5, 1]\), \(f[5, 2]\), \(f[5, 3]\)}
            }], "\[NoBreak]", ")"}],
      Function[ BoxForm`e$, 
        MatrixForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell["\<\
In the line above  both arguments of (f) start at one (the default).  
Using the next line both arguments of (f) start at 10.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Array[f, {5, 3}, 10] // MatrixForm\)], "Input"],

Cell[BoxData[
    TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {\(f[10, 10]\), \(f[10, 11]\), \(f[10, 12]\)},
            {\(f[11, 10]\), \(f[11, 11]\), \(f[11, 12]\)},
            {\(f[12, 10]\), \(f[12, 11]\), \(f[12, 12]\)},
            {\(f[13, 10]\), \(f[13, 11]\), \(f[13, 12]\)},
            {\(f[14, 10]\), \(f[14, 11]\), \(f[14, 12]\)}
            }], "\[NoBreak]", ")"}],
      Function[ BoxForm`e$, 
        MatrixForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell["\<\
In the next line the array starts with 4 in the first argument and 10 in the \
second argument and counts from there\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Array[f, {5, 3}, {4, 10}] // MatrixForm\)], "Input"],

Cell[BoxData[
    TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {\(f[4, 10]\), \(f[4, 11]\), \(f[4, 12]\)},
            {\(f[5, 10]\), \(f[5, 11]\), \(f[5, 12]\)},
            {\(f[6, 10]\), \(f[6, 11]\), \(f[6, 12]\)},
            {\(f[7, 10]\), \(f[7, 11]\), \(f[7, 12]\)},
            {\(f[8, 10]\), \(f[8, 11]\), \(f[8, 12]\)}
            }], "\[NoBreak]", ")"}],
      Function[ BoxForm`e$, 
        MatrixForm[ BoxForm`e$]]]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Blank (_), BlankSequence (__), BlankNullSequence (___)", "Section"],

Cell["\<\
Blank (_), BlankSequence (__) and BlankNullSequence (___) are the most \
primative of Mathematica's pattern matching features.\
\>", "Text",
  CellTags->"Blank"],

Cell[CellGroupData[{

Cell["Basic Blank (_) usage", "Subsection"],

Cell["\<\
In the first example Blank (_) is used for individual arguments.  In this \
case (f) is only defined when it's given two arguments.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[f];\)\), "\[IndentingNewLine]", 
    \(f[x_, y_] := {x + 1, y + 1}\), "\[IndentingNewLine]", 
    \({f[t, 3], f[t, 3, 5], f[]}\)}], "Input"],

Cell[BoxData[
    \({{1 + t, 4}, f[t, 3, 5], f[]}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Basic BlankSequence (__) usage", "Subsection"],

Cell["\<\
In the next example BlankSequence (__) is used and (x___) represents a \
sequence of one or more arguments.  So in this case (f) is defined when it's \
given one or more argument, but undefined when given no arguments.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[f];\)\), "\[IndentingNewLine]", 
    \(f[x__] := {0, x, 0}\), "\[IndentingNewLine]", 
    \({f[t], f[t, 3, 5], f[]}\)}], "Input"],

Cell[BoxData[
    \({{0, t, 0}, {0, t, 3, 5, 0}, f[]}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Basic BlankNullSequence (___) usage ", "Subsection"],

Cell["\<\
In the next example BlankNullSequence(___) is used and (x___) refers to a \
sequence of any number of arguments, or an empty set of arguments.  In this \
case f[] returns {0,0} while (f) was undefined in the previous example.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[f];\)\), "\[IndentingNewLine]", 
    \(f[x___] := {0, x, 0}\), "\[IndentingNewLine]", 
    \({f[t], f[t, 3, 5], f[]}\)}], "Input"],

Cell[BoxData[
    \({{0, t, 0}, {0, t, 3, 5, 0}, {0, 0}}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Use of Blanks without naming a variable", "Subsection"],

Cell["\<\
If a function doesn't use some of the arguments, it's more efficient to not \
name them. 
In the following example I define a function that returns True when given any \
single argument.  Often times we will give a function other definitions to \
use in other cases, and make it use a catch all definition such as this in \
all other cases.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[f];\)\), "\[IndentingNewLine]", 
    \(f[_] := True\), "\[IndentingNewLine]", 
    \({f[t], f[t, 3, 5], f[]}\)}], "Input"],

Cell[BoxData[
    \({True, f[t, 3, 5], f[]}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell (f) returns True when given one or more argument.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[f];\)\), "\[IndentingNewLine]", 
    \(f[__] := True\), "\[IndentingNewLine]", 
    \({f[t], f[t, 3, 5], f[]}\)}], "Input"],

Cell[BoxData[
    \({True, True, f[]}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell (f) returns True when given any number of arguments or no \
arguments at all.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[f];\)\), "\[IndentingNewLine]", 
    \(f[___] := True\), "\[IndentingNewLine]", 
    \({f[t], f[t, 3, 5], f[]}\)}], "Input"],

Cell[BoxData[
    \({True, True, True}\)], "Output"]
}, Open  ]],

Cell["\<\
A more common use of an unamed BlankNullSequence is in the next cell.  In \
this case (f) is defined when it gets two or more arguments.  The first \
argument goes with (x_), the second argument goes with (y_), and all other \
arguments go with (___).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[f];\)\), "\[IndentingNewLine]", 
    \(f[x_, y_, ___] := {x + 1, y + 1}\), "\[IndentingNewLine]", 
    \({f[t], f[t, 3], f[u, 4, v, b, n, m]}\)}], "Input"],

Cell[BoxData[
    \({f[t], {1 + t, 4}, {1 + u, 5}}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Use of named Blanks with a specified head", "Subsection"],

Cell["\<\
In the next example (f) is only defined when given two arguments that are \
symbols.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[f, s, t];\)\), "\[IndentingNewLine]", 
    \(f[x_Symbol, y_Symbol] := {x + 1, y + 1}\), "\[IndentingNewLine]", 
    \({f[s, t], f[s, 3], f[s, s + t]}\)}], "Input"],

Cell[BoxData[
    \({{1 + s, 1 + t}, f[s, 3], f[s, s + t]}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next example (x__Real) represents a sequence of one or more arguments \
that are symbols.  If any argument of (f) is not a symbol, (f) is not \
defined.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[f, s, t];\)\), "\[IndentingNewLine]", 
    \(f[x__Symbol] := Plus[x, 1]\), "\[IndentingNewLine]", 
    \({f[s], f[s, t], f[], f[s, t, x + y]}\)}], "Input"],

Cell[BoxData[
    \({1 + s, 1 + s + t, f[], f[s, t, x + y]}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next example BlankNullSequence(___) is used and (x___Symbol) refers to \
a sequence of any number of arguments with the head symbol, or an empty set \
of arguments. \
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[f, s, t];\)\), "\[IndentingNewLine]", 
    \(f[x___Symbol] := Plus[x, 1]\), "\[IndentingNewLine]", 
    \({f[s], f[s, t], f[], f[s, t, x + y]}\)}], "Input"],

Cell[BoxData[
    \({1 + s, 1 + s + t, 1, f[s, t, x + y]}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Use of unamed Blanks with a specified head", "Subsection"],

Cell["\<\
In the next few examples there is no advantage in naming the arguments, and \
the definition evaluated faster than one where the argument is named.  In the \
next cell (f) returns True when given a single argument with the Head Real.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[f];\)\), "\[IndentingNewLine]", 
    \(f[_Real] := True\), "\[IndentingNewLine]", 
    \({f[2.3], f[2.3, 4.5], f[2.3, 3.4, 4.5], f[], f[4]}\)}], "Input"],

Cell[BoxData[
    \({True, f[2.3`, 4.5`], f[2.3`, 3.4`, 4.5`], f[], f[4]}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell (f) returns True when given one or more argument and all the \
arguments have the Head Real.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[f];\)\), "\[IndentingNewLine]", 
    \(f[__Real] := True\), "\[IndentingNewLine]", 
    \({f[2.3], f[2.3, 4.5], f[2.3, 3.4, 4.5], f[], f[4]}\)}], "Input"],

Cell[BoxData[
    \({True, True, True, f[], f[4]}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell (f) returns True when given any number of arguments or no \
arguments at all, but only when all arguments given have the Head Real.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[f];\)\), "\[IndentingNewLine]", 
    \(f[___Real] := True\), "\[IndentingNewLine]", 
    \({f[2.3], f[2.3, 4.5], f[2.3, 3.4, 4.5], f[], f[4]}\)}], "Input"],

Cell[BoxData[
    \({True, True, True, True, f[4]}\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Block", "Section"],

Cell["\<\
Block[{x, y}, ....] is normally used to make the kernel to temporarily forget \
about any values that symbols (x,y) may have.  Contrary to what Module does \
the variables (x,y) inside Block are the same variables (x,y) outside the \
Block.  The only thing Block does is temporarily change or clear the values \
of these variables. Some applications are given in the grouped cells below. 

The next cell clears any previous definitions that might interfere with the \
examples below.\
\>", "Text"],

Cell[BoxData[
    \(Clear["\<Global`*\>"]\)], "Input"],

Cell[CellGroupData[{

Cell["Temporarily clear the meaning of built in functions", "Subsection"],

Cell["\<\
If you need to write a program that you know may post messages you can \
suppress the display of messages during intermediate steps of your program.  \
As a specific example the expression in the next cell causes the kernel to \
evaluate Message[Prime::intpp, 2.25] inside the Block.  The head Message has \
no meaning while inside the Block, so the message is never printed.  Try \
evaluating Prime[2.25] without using  Block and a message will be printed \
(unless you turned off the message earlier). \
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Block[{Message}, Prime[2.25]]\)], "Input"],

Cell[BoxData[
    \(Prime[2.25`]\)], "Output"]
}, Open  ]],

Cell["\<\
For another example of making the kernel forget what a built-in function does \
consider the expression below which is wrapped in HoldForm.\
\>", "Text",
  CellTags->"Partial evaluation1"],

Cell[BoxData[
    \(\(expr = 
        HoldForm[{{Cos[\[Pi]], \@8, 
              Cos[\[Pi]], \((x\ y\ z)\)\^2}, \[IndentingNewLine]{\@12, 
              Sin[ArcCos[x]], 2, 0}}];\)\)], "Input"],

Cell["\<\
First we use ReleaseHold to see what the expression evaluates to without \
HoldForm.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(ReleaseHold[expr]\)], "Input"],

Cell[BoxData[
    \({{\(-1\), 2\ \@2, \(-1\), x\^2\ y\^2\ z\^2}, {2\ \@3, \@\(1 - x\^2\), 
        2, 0}}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Suppose you want to evaluate this expression, but you don't want to \
evaluate ",
  Cell[BoxData[
      \(TraditionalForm\`\(\@8\)\[LongRightArrow]2 \@ 2\)]],
  " or ",
  Cell[BoxData[
      \(TraditionalForm\`\(\@12\)\[LongRightArrow]2 \@ 3\)]],
  ". This can be done by using Block to make the kernel temporarily forget \
what Power does!  Recall ",
  Cell[BoxData[
      \(TraditionalForm\`\@n\)]],
  "has the FullForm Power[n, 1/2].  Once inside Block we change the head of \
(expr) from HoldForm to List, and let it evaluate.  After evaluation is \
finished we change the head back to HoldForm so that ",
  Cell[BoxData[
      \(TraditionalForm\`\@8\)]],
  "and ",
  Cell[BoxData[
      \(TraditionalForm\`\@12\)]],
  " don't evaluate after we get out of the Block.  The curious thing about \
this trick is that we didn't have to Unprotect Power.  Another method of \
allowing only certain parts of an expression to evaluate is given in the \
discussion of ",
  ButtonBox["Fold",
    ButtonData:>"Partial evaluation 2",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Block[{Power}, HoldForm @@ \(List @@ expr\)]\)], "Input"],

Cell[BoxData[
    TagBox[\({{\(-1\), \@8, \(-1\), \((x\ y\ z)\)\^2}, {\@12, \@\(1 - x\^2\), 
          2, 0}}\),
      HoldForm]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Temporarily change the value of $DisplayFunction", "Subsection"],

Cell["\<\
The following line indicates the Default value Plot uses for the \
DisplayFunction option. \
\>", "Text",
  CellTags->"$DisplayFunction"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Options[Plot, DisplayFunction]\)], "Input"],

Cell[BoxData[
    \({DisplayFunction \[RuleDelayed] $DisplayFunction}\)], "Output"]
}, Open  ]],

Cell["\<\
Besides making the kernel forget that a symbol has values you can use Block \
to temporarily use a new value for symbols. We can use Block to temporarily \
change the value of $DisplayFunction as in the cell below.  This creates the \
satisfying result of presenting only a single graphic, without typing  \
(DisplayFunction->Identity) four times!\
\>", "Text"],

Cell[BoxData[{
    \(\(Block[{$DisplayFunction = Identity}, \n\ \ \ \ \ p1 = 
          Plot[Sin[t], {t, 0, \[Pi]/2}]; \n\ \ \ \ \ p2 = 
          Plot[Sin[2\ t], {t, 0, \[Pi]/2}]; \n\ \ \ \ \ p3 = 
          Plot[Sin[3\ t], {t, 0, \[Pi]/2}]; \n\ \ \ \ \ p4 = 
          Plot[Sin[4\ t], {t, 0, \[Pi]/2}];\n];\)\), "\n", 
    \(\(Show[
        GraphicsArray[{{p1, p2}, {p3, p4}}], \n\ \ \ ImageSize -> {400, 
            260}\n];\)\)}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Temporarily decrease $RecursionLimit  and/or  $IterationLimit\
\>", "Subsection"],

Cell["\<\
When you are writing preliminary drafts of a program you might want to use a \
lower value of $RecursionLimit and/or Iteration limit.  Using the code below \
you can make this change only take effect inside the Block.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[f];\)\), "\n", 
    \(\(f[n_] := 2\ f[n - 1];\)\n\ \), "\n", 
    \(Block[{$RecursionLimit = 25, \ $IterationLimit = 100}, \n\ \ f[
        3]\n]\)}], "Input"],

Cell[BoxData[
    \(8388608\ Hold[f[\(-19\) - 1]]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \({$RecursionLimit, $IterationLimit}\)], "Input"],

Cell[BoxData[
    \({256, 4096}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Temporarily clear the numeric value of a symbol", "Subsection"],

Cell["\<\
In the first cell below (demo) is an expression in (x).  In the second cell \
(x) has a numeric value is assigned and demo will turn out to be a constant \
if evaluated.  Since demo is a constant (provided x has a numeric value) the \
derivative of demo is zero.   Worse than that we see below that D[demo,x] \
doesn't even evaluate as we would like.\
\>", "Text"],

Cell[BoxData[{
    \(\(Clear[x];\)\), "\n", 
    \(\(demo = x\ Exp[x];\)\)}], "Input"],

Cell[BoxData[
    \(\(x = 3;\)\)], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(D[demo, x]\)], "Input"],

Cell[BoxData[
    \(\[PartialD]\_3\((3\ \[ExponentialE]\^3)\)\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell we can evaluate the derivative of (demo) as if (x) had no \
numeric value.  This was possible because Block[{x}, ....] ensured that (x) \
had no values.  Apply[HoldForm,....] had to be used to prevent evaluating the \
result with numeric values for (x).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Dx = Block[{x}, Apply[HoldForm, {D[demo, x]}]]\)], "Input"],

Cell[BoxData[
    TagBox[\(\[ExponentialE]\^x + \[ExponentialE]\^x\ x\),
      HoldForm]], "Output"]
}, Open  ]],

Cell["\<\
In the next cell ReleaseHold is used to allow complete evaluation of the \
above derivative. \
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(ReleaseHold[Dx]\)], "Input"],

Cell[BoxData[
    \(4\ \[ExponentialE]\^3\)], "Output"]
}, Open  ]],

Cell["\<\
Finally in the next cell Block[{x=a}, ....] causes (x) to temporarily \
evaluate to (a), and then evaluate the derivative of demo.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[a];\)\), "\n", 
    \(Block[{x = a}, D[demo, x]]\)}], "Input"],

Cell[BoxData[
    \(\[ExponentialE]\^a + a\ \[ExponentialE]\^a\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Modify a built-in function", "Subsection"],

Cell[TextData[{
  "Block can be used to modify the way built-in kernel functions evaluate in \
ways that are not otherwise possible.  For example suppose you wanted to \
change 'D' so that ",
  StyleBox["D[expr,x]",
    FontFamily->"Courier",
    FontWeight->"Bold"],
  " would Expand expr before using the built-in definition of 'D'.\n\nThe \
definition for 'D' in the next cell is only used when the symbol ",
  StyleBox["$DoThis",
    FontFamily->"Courier",
    FontWeight->"Bold"],
  " is True.  When this definition is used Block temporarily clears all \
values from the symbol ",
  StyleBox["$DoThis",
    FontFamily->"Courier",
    FontWeight->"Bold"],
  ", and then evaluates ",
  StyleBox["D[Expand[expr],x]",
    FontFamily->"Courier",
    FontWeight->"Bold"],
  ".  If it were not for the use of ",
  StyleBox["Block{$DoThis},...]",
    FontFamily->"Courier",
    FontWeight->"Bold"],
  " we would have infinite recursion since the new definition would call \
itself. However, once inside the Block ",
  StyleBox["$DoThis",
    FontFamily->"Courier",
    FontWeight->"Bold"],
  " is not True, so the built-in definition of 'D' is used instead."
}], "Text"],

Cell[BoxData[{
    \(\(Unprotect[D];\)\), "\[IndentingNewLine]", 
    \(\(\($DoThis = True;\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(D[expr_, x_] /; $DoThis := \[IndentingNewLine]Block[{$DoThis}, \ 
        D[Expand[expr], x]\ \ ]\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(D[\((x + 5)\)\^3, x]\)], "Input"],

Cell[BoxData[
    \(\[PartialD]\_3 512\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Button Programming", "Section"],

Cell[TextData[{
  "A ",
  ButtonBox["hyperlink",
    ButtonData:>"Hyperlinks",
    ButtonStyle->"Hyperlink"],
  " is a special type of a button.  We can also make buttons with predefined \
",
  ButtonBox["ButtonStyles",
    ButtonData:>"ButtonStyles",
    ButtonStyle->"Hyperlink"],
  ", and most other buttons perform some sort of manipulation of a notebook. \
Such buttons that manipulate a notebook can usually be made by following the \
form in the next cell.  All you need to do is change \"Button Name\" and \"A \
Pure Function\" to suit you needs."
}], "Text",
  CellTags->"ButtonProgramming"],

Cell[BoxData[
    \(Cell[\[IndentingNewLine]BoxData[
          ButtonBox[
            RowBox[{"\<Button Name\>"}], \[IndentingNewLine]ButtonFunction \
\[Rule] \(("\<A Pure Function\>")\), \[IndentingNewLine]ButtonEvaluator \
\[Rule] Automatic, 
            Active \[Rule] 
              True\[IndentingNewLine]]], \[IndentingNewLine]"\<Input\>"] // 
      CellPrint\)], "Input"],

Cell["\<\
The next cell shows the form needed to make a palette of three buttons.\
\>", "Text"],

Cell[BoxData[
    \(Cell[
        BoxData[GridBox[{\[IndentingNewLine]{ButtonBox[
                  RowBox[{"\<Name 1\>"}], 
                  ButtonFunction \[Rule] \(("\<Pure Function 1\>")\), \
\[IndentingNewLine]ButtonEvaluator \[Rule] Automatic, 
                  Active \[Rule] True]}, \[IndentingNewLine]{ButtonBox[
                  RowBox[{"\<Name 2\>"}], 
                  ButtonFunction \[Rule] \(("\<Pure Function 2\>")\), \
\[IndentingNewLine]ButtonEvaluator \[Rule] Automatic, 
                  Active \[Rule] True]}, \[IndentingNewLine]{ButtonBox[
                  RowBox[{"\<Name 3\>"}], 
                  ButtonFunction \[Rule] \(("\<Pure Function 3\>")\), \
\[IndentingNewLine]ButtonEvaluator \[Rule] Automatic, 
                  Active \[Rule] True]}\[IndentingNewLine]}, 
            RowSpacings \[Rule] 0]]\[IndentingNewLine], "\<Input\>"] // 
      CellPrint\)], "Input"],

Cell[CellGroupData[{

Cell["\<\
Working example of a notebook manipulating button (made from scratch)\
\>", "Subsection"],

Cell["\<\
Suppose you want to make a button that will delete all the messages in the \
InputNotebook[].  The non-trivial part is writing and debuging the lines of \
code that are used for the ButtonFunction. This can be solved by having two \
notebooks open at once.  As an example open an empty notebook and evaluate in \
the new notebook ( nb=SelectedNotebook[] ).  Next in the new notebook \
evaluate an erronerous input expression such as  (3=t).  Then come back to \
this notebook and evaluate the next cell.  The next cell will deletes all \
messages in the notebook assigned to (nb).  This is most of the code for our \
ButtonFunction.  The only other thing we need is for our ButtonFunction to \
make the assignment ( nb = InputNotebook[] ) before evaluating the code in \
the next cell.\
\>", "Text"],

Cell[BoxData[{
    \(\(NotebookFind[nb, "\<Message\>", All, 
        CellStyle];\)\), "\[IndentingNewLine]", 
    \(\(NotebookDelete[nb];\)\)}], "Input"],

Cell[TextData[{
  "The next cell makes the desired button.  However, the button that is \
created should be converted to a palette by selecting the CellBracket for the \
button and making the menu selection (File \[RightTriangle] Generate Palette \
From Selection).  Notice  the ButtonFunction setting must be a function.  If \
you aren't familar with pure functions read my section on ",
  ButtonBox["Function",
    ButtonData:>"Function",
    ButtonStyle->"Hyperlink"],
  ".  Notice if you use '&' in the ButtonFunction then you have to wrap the \
button function in parentheses.  As I said earlier we need to use \
(ButtonEvaluator\[Rule]Automatic) and (Active\[Rule]True)."
}], "Text",
  CellTags->"Pure_Function_Example"],

Cell[BoxData[
    \(Cell[\[IndentingNewLine]BoxData[
          ButtonBox[
            RowBox[{"\<Delete Messages\>"}], \
\[IndentingNewLine]ButtonFunction \[Rule] \((\[IndentingNewLine]Module[{nb = 
                        InputNotebook[]}, \[IndentingNewLine]NotebookFind[
                      nb, "\<Message\>", All, 
                      CellStyle]; \[IndentingNewLine]NotebookDelete[
                      nb]]\[IndentingNewLine] &\ )\), \
\[IndentingNewLine]ButtonEvaluator \[Rule] Automatic, 
            Active \[Rule] 
              True\[IndentingNewLine]]], \[IndentingNewLine]"\<Input\>"] // 
      CellPrint\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Other Button Tutorials", "Subsection"],

Cell["\<\
Links to all the tutorials about button programming that I know off are \
provided below.\
\>", "Text"],

Cell[TextData[{
  "See a tutorial by Paul Hinton at \n",
  ButtonBox["http://library.wolfram.com/infocenter/TechNotes/185",
    ButtonData:>{
      URL[ "http://library.wolfram.com/infocenter/TechNotes/185"], None},
    ButtonStyle->"Hyperlink"]
}], "Text"],

Cell[TextData[{
  "See several technical support pages on button programming at \n",
  ButtonBox["http://support.wolfram.com/mathematica/interface/buttons/",
    ButtonData:>{
      URL[ "http://support.wolfram.com/mathematica/interface/buttons/"], 
      None},
    ButtonStyle->"Hyperlink"]
}], "Text"],

Cell[TextData[{
  "You might also find some helpful examples in this notebook under ",
  ButtonBox["Button Styles",
    ButtonData:>"ButtonStyles",
    ButtonStyle->"Hyperlink"],
  " or under ",
  ButtonBox["Hyperlinks",
    ButtonData:>"Hyperlinks",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text"],

Cell[TextData[{
  "See ",
  StyleBox["How To Create Buttons",
    FontWeight->"Bold"],
  ", by Paul Hinton at\n",
  ButtonBox["http://library.wolfram.com/conferences/devconf99/#frontend",
    ButtonData:>{
      URL[ "http://library.wolfram.com/conferences/devconf99/#frontend"], 
      None},
    ButtonStyle->"Hyperlink"]
}], "Text"],

Cell[TextData[{
  "See ",
  StyleBox["Programming the Front End",
    FontWeight->"Bold"],
  ", by John Novak at\n",
  ButtonBox["http://library.wolfram.com/conferences/devconf99/#frontend",
    ButtonData:>{
      URL[ "http://library.wolfram.com/conferences/devconf99/#frontend"], 
      None},
    ButtonStyle->"Hyperlink"]
}], "Text"],

Cell[TextData[{
  "See ",
  StyleBox["Turning an Application into an Interface",
    FontWeight->"Bold"],
  ", Dale Horton at  \n",
  ButtonBox["http://library.wolfram.com/conferences/devconf2001/#development",
    
    ButtonData:>{
      URL[ "http://library.wolfram.com/conferences/devconf2001/#development"],
       None},
    ButtonStyle->"Hyperlink"]
}], "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["ButtonStyle", "Section"],

Cell[TextData[{
  "From the menu selection (Input \[RightTriangle] CreateButton) you can make \
buttons with ButtonStyles Paste, Evaluate, EvaluateCell, CopyEvaluate and \
CopyEvaluateCell. Each of these ButtonStyles are intended to be used when \
something is selected in an Input or Output cell and they all do something \
with the selected expression and the input cell.  Making one of these buttons \
is simple. Suppose for example you want a button that will Simplify the \
selected expression. To do that you would do the following:\n\n(1)  Type \
Simplify[\[SelectionPlaceholder]] as I did in the next cell. \n       Note \
the \[SelectionPlaceholder] symbol can be entered as ",
  Cell[BoxData[
      FormBox[
        StyleBox[\(\(\ \)\(\\[SelectionPlaceHolder]\)\(\ \)\),
          ShowSpecialCharacters->False], TraditionalForm]]],
  " or using the alias  \[AliasDelimiter]",
  Cell[BoxData[
      \(TraditionalForm\`spl\)]],
  "\[AliasDelimiter]  or using the 'Complete Characters' palette.\n(2)  \
Select \"Simplify[\[SelectionPlaceholder]]\" in the input cell.\n(3)  Make \
the menu selection (Input \[RightTriangle] Create Button \[RightTriangle] \
Evaluate) \n(4)  Select the cell bracket for the input cell containing \
\"Simplify[\[SelectionPlaceholder]]\".\n(5)  Make the menu selection (File \
\[RightTriangle] Generate Palette from Selection).\n\nYou will then have a \
palette containing the button just describe and it will work like those in \
the Algebraic Manipulation palette."
}], "Text",
  CellTags->"ButtonStyles"],

Cell[BoxData[
    \(Simplify[\[SelectionPlaceholder]]\)], "Input"],

Cell["\<\
As far as I am aware you need to deal with lower level boxes if you want to \
make a palette of several buttons like the one I discuss above.  You can make \
such a palette by evaluating the next cell and doing the following:
(1)  Select the cell bracket for the cell created when the next cell is \
evaluated.
(2)  Make the menu selection (File \[RightTriangle] Generate Palette from \
Selection) and the palette will be displayed in it's own notebook.\
\>", "Text"],

Cell[BoxData[
    \(Cell[
        BoxData[GridBox[{\[IndentingNewLine]{ButtonBox[
                  RowBox[{"\<Factor\>", "\<[\>", \
"\<\[SelectionPlaceholder]\>", "\<]\>"}], 
                  ButtonStyle \[Rule] "\<Evaluate\>"]}, \
\[IndentingNewLine]{ButtonBox[
                  RowBox[{"\<Expand\>", "\<[\>", \
"\<\[SelectionPlaceholder]\>", "\<]\>"}], 
                  ButtonStyle \[Rule] "\<Evaluate\>"]}, \
\[IndentingNewLine]{ButtonBox[
                  RowBox[{"\<Together\>", "\<[\>", "\<\[SelectionPlaceholder]\
\>", "\<]\>"}], ButtonStyle \[Rule] "\<Evaluate\>"]}\[IndentingNewLine]}, 
            RowSpacings \[Rule] 0]]\[IndentingNewLine], "\<Input\>"] // 
      CellPrint\)], "Input"],

Cell["\<\
All buttons above above had ButtonStyle \"Evaluate\".  This and all other \
built-in ButtonStyles are explained below.\
\>", "Text"],

Cell[CellGroupData[{

Cell["Built-in  ButtonStyles", "Subsection"],

Cell[TextData[{
  "E",
  StyleBox["valuating the next cell makes a sample palette containing a \
button with each of the built-in Button-Styles. Once the resulting palette is \
displayed, you can move your mouse pointer over one of the buttons and the \
ButtonStyle for that button will be shown in the bottom of the window. You \
can verify that each of the buttons works as I describe below. ",
    FontSize->12,
    FontVariations->{"CompatibilityType"->0}]
}], "Text"],

Cell[BoxData[{
    \(\(nb = NotebookCreate[Visible \[Rule] False];\)\n\ \), "\n", 
    \(NotebookWrite[
      nb, {Cell[
          BoxData[GridBox[{{ButtonBox[\\(\[SelectionPlaceholder] + 1\\), 
                    ButtonStyle \[Rule] "\<Paste\>", 
                    ButtonNote \[Rule] "\<Paste\>"]}, {ButtonBox[\
\\(\[SelectionPlaceholder] + 1\\), ButtonStyle \[Rule] "\<Evaluate\>", 
                    ButtonNote \[Rule] "\<Evaluate\>"]}, {ButtonBox[\
\\(\[SelectionPlaceholder] + 1\\), ButtonStyle \[Rule] "\<EvaluateCell\>", 
                    ButtonNote \[Rule] "\<EvaluateCell\>"]}, {ButtonBox[\
\\(\[SelectionPlaceholder] + 1\\), ButtonStyle \[Rule] "\<CopyEvaluate\>", 
                    ButtonNote \[Rule] "\<CopyEvaluate\>"]}, {ButtonBox[\
\\(\[SelectionPlaceholder] + 1\\), 
                    ButtonStyle \[Rule] "\<CopyEvaluateCell\>", 
                    ButtonNote \[Rule] "\<CopyEvaluateCell\>"]}}, 
              RowSpacings \[Rule] 0, ColumnWidths \[Rule] 10]], 
          NotebookDefault, Evaluatable \[Rule] True]}]; \n\ \), "\n", 
    \(\(SetOptions[nb, WindowSize \[Rule] {Fit, Fit}, 
        WindowFrame \[Rule] "\<Palette\>", 
        WindowElements \[Rule] "\<StatusArea\>", 
        WindowFrameElements \[Rule] "\<CloseBox\>", 
        WindowClickSelect \[Rule] False, ShowCellBracket \[Rule] False, 
        Active \[Rule] True, Visible \[Rule] True];\)\)}], "Input"],

Cell[BoxData[
    \(\(Clear[x];\)\)], "Input"],

Cell[CellGroupData[{

Cell["Paste  ButtonStyle", "Subsubsection"],

Cell["\<\
The top button in the sample palette has the \"Paste\" ButtonStyle.  If you \
select 15 in the next cell and depress the top button, the 15 is changed to \
(15+1) and nothing is selected after making the change.  The results are \
similar if a part of an output cell is selected.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\@15 + x\)], "Input"],

Cell[BoxData[
    \(3 + \@15\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Evaluate  ButtonStyle", "Subsubsection"],

Cell["\<\
The second button in the sample palette has the \"Evaluate\" ButtonStyle.  If \
you select 15 in the next cell and press the second button, the 15 is changed \
to 16 (which is 15+1) and the number 16 is selected after making the change. \
The results are similar if a part of an output cell is selected.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\@15 + x\)], "Input"],

Cell[BoxData[
    \(3 + \@15\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["EvaluateCell  ButtonStyle", "Subsubsection"],

Cell["\<\
The third button in the sample palette has the \"EvaluateCell\" ButtonStyle.  \
If you select the 15 in the next cell and press the third button, the 15 is \
changed to (15+1), the input cell evaluates, and the contents of the \
resulting output cell are selected once evaluation is finished. The results \
are similar if a part of an output cell is selected.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\@15 + x\)], "Input"],

Cell[BoxData[
    \(3 + \@15\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["CopyEvaluate  ButtonStyle", "Subsubsection"],

Cell["\<\
The fourth button in the sample palette has the \"CopyEvaluate\" ButtonStyle. \
 If you select 15 in the next cell and press the fourth button, then a new \
input cell containing 16 (the result of 15+1) is inserted after the original \
input cell.  The expression in the new input cell is selected once evaluation \
is finished. The results are similar if a part of an output cell is selected.\
\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\@15 + x\)], "Input"],

Cell[BoxData[
    \(3 + \@15\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["CopyEvaluateCell  ButtonStyle", "Subsubsection"],

Cell["\<\
The bottom button in the sample palette has the \"CopyEvaluateCell\" \
ButtonStyle.  If you select 15 in the next cell and press the bottom button, \
a new input cell containing (15+1) will be inserted below the original input, \
and the new input cell will evaluate. After evaluation is finished the \
resulting output expression will be selected. The results are similar if a \
part of an output cell is selected.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\@15 + x\)], "Input"],

Cell[BoxData[
    \(3 + \@15\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Make your own ButtonStyle", "Subsection"],

Cell["\<\
If you tried the sample button with setting  ButtonStyle\[Rule]EvaluateCell  \
you would have noticed that after the button is used the contents of the new \
output cell are selected.  I would prefer that after the button finishes \
nothing is selected, and the insertion point is after the new output cell, \
and I made a new ButtonStyle to do this.  To try this new ButtonStyle the \
\"Prototype for style: EvaluateCell2\" cell below should be pasted into your \
style sheet under \"Palatte Styles\".  You can open the Style Sheet with menu \
selection (Format \[RightTriangle] Edit Style Sheet ).\
\>", "Text"],

Cell[TextData[{
  StyleBox["\[WarningSign]",
    FontSize->18],
  "  Warning ",
  StyleBox["\[WarningSign]",
    FontSize->18],
  "\nI am using ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " 4.1 under Windows 98, and the ButtonStyle wouldn't work when I added it \
to a private StyleSheet. However, the ButtonStyle would work when I pasted \
the prototype below in the style sheet (Default.nb).  You might have the same \
problem."
}], "Text"],

Cell["\<\
To see the details of the \"EvaluateCell2\" prototype in the next cell select \
the cell bracket and make the menu selection (Format \[RightTriangle] \
ShowExpression).\
\>", "Text"],

Cell[StyleData["EvaluateCell2"],
  StyleMenuListing->None,
  ButtonStyleMenuListing->Automatic,
  ButtonBoxOptions->{ButtonFunction:>(FrontEndExecute[ {
      FrontEnd`NotebookApply[ 
        FrontEnd`InputNotebook[ ], #, All], 
      FrontEnd`SelectionMove[ 
        FrontEnd`InputNotebook[ ], All, Cell, 1], 
      FrontEnd`SelectionEvaluateCreateCell[ 
        FrontEnd`InputNotebook[ ], After]}]&)}],

Cell["\<\
The \"EvaluateCell2\" prototype above is almost identical to the one for the \
\"EvaluateCell\" prototype  The only difference is in the ButtonFunction \
setting and the difference is colored red below.  The next cell shows the \
\"EvaluateCell\"  ButtonFunction setting.\
\>", "Text"],

Cell[BoxData[
    RowBox[{"ButtonFunction", "\[RuleDelayed]", 
      RowBox[{"(", 
        RowBox[{
          RowBox[{"FrontEndExecute", "[", 
            RowBox[{"{", 
              
              RowBox[{\(FrontEnd`NotebookApply[FrontEnd`InputNotebook[], #, 
                  All]\), 
                ",", \(FrontEnd`SelectionMove[FrontEnd`InputNotebook[], All, 
                  Cell, 1]\), ",", 
                RowBox[{"FrontEnd`SelectionEvaluateCreateCell", "[", 
                  RowBox[{\(FrontEnd`InputNotebook[]\), ",", 
                    StyleBox["All",
                      FontColor->RGBColor[1, 0, 0]]}], "]"}]}], "}"}], "]"}], 
          "&"}], ")"}]}]], "DisplayFormula",
  CellFrame->True],

Cell["\<\
The next cell shows the ButtonFunction setting I made for the \"EvaluateCell2\
\"  prototype.\
\>", "Text"],

Cell[BoxData[
    RowBox[{"ButtonFunction", "\[RuleDelayed]", 
      RowBox[{"(", 
        RowBox[{
          RowBox[{"FrontEndExecute", "[", 
            RowBox[{"{", 
              
              RowBox[{\(FrontEnd`NotebookApply[FrontEnd`InputNotebook[], #, 
                  All]\), 
                ",", \(FrontEnd`SelectionMove[FrontEnd`InputNotebook[], All, 
                  Cell, 1]\), ",", 
                RowBox[{"FrontEnd`SelectionEvaluateCreateCell", "[", 
                  RowBox[{\(FrontEnd`InputNotebook[]\), ",", 
                    StyleBox["After",
                      FontColor->RGBColor[1, 0, 0]]}], "]"}]}], "}"}], "]"}], 
          "&"}], ")"}]}]], "DisplayFormula",
  CellFrame->True],

Cell[TextData[{
  StyleBox["If you want to learn more about FrontEndExecute, and the  \
FrontEnd`*  functions see chapter 56 of The Beginner's Guide To ",
    FontSize->12,
    FontVariations->{"CompatibilityType"->0}],
  StyleBox["Mathematica",
    FontSize->12,
    FontSlant->"Italic",
    FontVariations->{"CompatibilityType"->0}],
  StyleBox[", by Jerry Glynn and Theodore Gray.  \n\nYou will also notice \
that all of the built-in ButtonStyles do strange things to the selected \
notebook if nothing is selected.  If you are ambitious you could go into the \
shared style sheets and change the ButtonFunction for the built-in \
ButtonStyles to ensure they do nothing if a part of an input expression is \
not selected. \n\nThat covers most of this subject but you might want to also \
read   \n",
    FontSize->12,
    FontVariations->{"CompatibilityType"->0}],
  ButtonBox["http://support.wolfram.com/mathematica/interface/buttons/\
buttonstyle.html  ",
    ButtonData:>{
      URL[ 
      "http://support.wolfram.com/mathematica/interface/buttons/buttonstyle.\
html"], None},
    ButtonStyle->"Hyperlink"]
}], "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Cases", "Section"],

Cell["Consider the list of (x,y,z) coordinates below.", "Text"],

Cell[BoxData[{
    \(\(Clear[data, x];\)\), "\n", 
    \(\(data = {\n\t\t{12, 2, 4}, {3, 4, 6}, {2, 8, 5}, {7, 13, 12}, {3, 22, 
            5}, {11, 2, 7}, {10, 0, 14}, {6, 2, 23}, {8, 9, 4}, {6, 3, 
            7}};\)\)}], "Input"],

Cell["\<\
The line below picks out all elements of data where the second of three in a \
list is greater than 7.\
\>", "Text",
  CellTags->"Cases"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Cases[data, {x_, y_, z_} /; y > 7]\)], "Input"],

Cell[BoxData[
    \({{2, 8, 5}, {7, 13, 12}, {3, 22, 5}, {8, 9, 4}}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Now the next line will pick the points where y>7 and return the list {x, \
y, ",
  Cell[BoxData[
      \(TraditionalForm\`\@\(x\^2 + y\^2\)\)]],
  "}. "
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Cases[
      data, {x_, y_, z_} /; y > 7 \[Rule] {x, 
          y, \@\(x\^2 + y\^2\)}]\)], "Input"],

Cell[BoxData[
    \({{2, 8, 2\ \@17}, {7, 13, \@218}, {3, 22, \@493}, {8, 
        9, \@145}}\)], "Output"]
}, Open  ]],

Cell["\<\
The method above works as long as (x) doesn't have a global value.  In the \
cell below (x) has a global value and one doesn't get the expected result.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(x = \[Pi]/4;\)\), "\n", 
    \(Cases[
      data, {x_, y_, z_} /; y > 7 \[Rule] {x, 
          y, \@\(x\^2 + y\^2\)}]\)}], "Input"],

Cell[BoxData[
    \({{\[Pi]\/4, 8, \@\(64 + \[Pi]\^2\/16\)}, {\[Pi]\/4, 
        13, \@\(169 + \[Pi]\^2\/16\)}, {\[Pi]\/4, 
        22, \@\(484 + \[Pi]\^2\/16\)}, {\[Pi]\/4, 
        9, \@\(81 + \[Pi]\^2\/16\)}}\)], "Output"]
}, Open  ]],

Cell["\<\
The problem above can be avoided by using the line below. The difference is \
the use of (expr \[RuleDelayed] x) instead of (expr \[Rule] x).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Cases[
      data, {x_, y_, z_} /; y > 7 \[RuleDelayed] {x, 
          y, \@\(x\^2 + y\^2\)}]\)], "Input"],

Cell[BoxData[
    \({{2, 8, 2\ \@17}, {7, 13, \@218}, {3, 22, \@493}, {8, 
        9, \@145}}\)], "Output"]
}, Open  ]],

Cell["Notice (x) still has a global variable.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(x\)], "Input"],

Cell[BoxData[
    \(\[Pi]\/4\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "In the previous examples involving Cases[data,{x_,y_,z_}....] all \
occurrences that met the pattern were returned.  Cases can take a fourth \
argument which indicates the maximum number of elements it should return.  In \
the next line the fourth argument is 1 so Cases only returns ",
  Cell[BoxData[
      \({x, y, \@\(x\^2 + y\^2\)}\)]],
  " for the first element where (y>7).  Notice that a third argument was \
necessary since we wanted to use the fourth argument.  In this example the \
third argument provided is the default level specification (1)."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Cases[
      data, {x_, y_, z_} /; y > 7 \[RuleDelayed] {x, y, \@\(x\^2 + y\^2\)}, 
      1, 1]\)], "Input"],

Cell[BoxData[
    \({{2, 8, 2\ \@17}}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "In the previous examples Cases had only two arguments.  Cases can take a \
",
  ButtonBox["level specification",
    ButtonData:>"Level Specification",
    ButtonStyle->"Hyperlink"],
  " as a third argument.  The default level specification is 1 or {1} (both \
are equivalent).  In the next line the default level specification is used, \
and Cases doesn't look inside each term of the sum."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[a, w, y, u, z];\)\), "\[IndentingNewLine]", 
    \(Cases[
      a + E\^\(-x\^2\) + Exp[y\^2] + w\^\(5\^x\) + u\^2 + 1\/z\^2 + 1\/4, 
      x_\^y_]\)}], "Input",
  CellTags->"Cases"],

Cell[BoxData[
    \({\[ExponentialE]\^\(-\(\[Pi]\^2\/16\)\), \[ExponentialE]\^\(y\^2\), 
      u\^2, w\^\(5\^\(\[Pi]/4\)\), 1\/z\^2}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "The next example is from the online Help Browser that comes with ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  ".  Here the level specification is {1,\[Infinity]} and Cases looks at \
every level (except level 0).  As a result the list returned by Cases \
includes ",
  Cell[BoxData[
      \(\(\(\ \)\(x\^2, \(\(y\^2\)\(\ \)\(or\)\(\ \ \)\(5\^x\)\(\ \
\)\)\)\)\)]],
  "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Cases[
      a + E\^\(-x\^2\) + Exp[y\^2] + w\^\(5\^x\) + u\^2 + 1\/z\^2 + 1\/4, 
      x_\^y_, {1, \[Infinity]}]\)], "Input",
  CellTags->"Cases"],

Cell[BoxData[
    \({\[Pi]\^2, \[ExponentialE]\^\(-\(\[Pi]\^2\/16\)\), 
      y\^2, \[ExponentialE]\^\(y\^2\), u\^2, 5\^\(\[Pi]/4\), 
      w\^\(5\^\(\[Pi]/4\)\), 1\/z\^2}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "I don't provide further examples, but any pattern matching constructs can \
be used in Cases. Nuances of ",
  ButtonBox["pattern matching",
    ButtonData:>"Pattern-Matching",
    ButtonStyle->"Hyperlink"],
  " are discussed in another section. "
}], "Text"],

Cell[CellGroupData[{

Cell["Heads Option", "Subsection"],

Cell["\<\
Cases has a Heads option with the default setting (Heads\[Rule]False). This \
default setting almost always gives the desired effect.  In the next cell \
Derivative[_] is only used as a head and gives an example where the setting \
(Heads\[Rule]True) is needed to find the use of Derivative. \
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[f, x];\)\), "\[IndentingNewLine]", 
    \(Cases[f[x] + 2 \( f'\)[x] - 3 \( f''\)[x] + 4 \( g'\)[x], 
      Derivative[_], {0, \(-1\)}, Heads \[Rule] True]\)}], "Input"],

Cell[BoxData[
    \({Derivative[1], Derivative[1], Derivative[2]}\)], "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Clear, ClearAll, Remove", "Section"],

Cell[TextData[{
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " has several places where it stores defintions, and I discuss this subject \
in ",
  ButtonBox["another section",
    ButtonData:>"Definition-Storage",
    ButtonStyle->"Hyperlink"],
  ".  Clear, ClearAll, and Remove are used to erase previous definitions."
}], "Text",
  CellTags->"Clear"],

Cell["The following clears symbols (f, h, g).", "Text"],

Cell[BoxData[
    \(Clear[f, h, g]\)], "Input"],

Cell["\<\
The following claers all symbols matching character strings \"MakeGraph*\" \
and \"MakeCurve*\"\
\>", "Text"],

Cell[BoxData[
    \(Clear["\<MakeGraph*\>", "\<MakeCurve*\>"]\)], "Input"],

Cell["The following clears all symbols in the Global context.", "Text"],

Cell[BoxData[
    \(Clear["\<Global`*\>"]\)], "Input"],

Cell["\<\
In each example above we could have used ClearAll or Remove and got similar \
results.\
\>", "Text"],

Cell[CellGroupData[{

Cell["Clear[f]", "Subsection"],

Cell[TextData[{
  "Clear[f] clears all definitions associated with (f) except for:\n   (1)  \
Attributes of (f)\n   (2)  DefaultValues for (f)\n   (3)  Options[f]\n   (4)  \
Messages associated with (f)\n  \nAlso:\n   (1)  The Symbol (f) remains on \
the list of symbols in the appropriate context after evaluating Clear[f].\n   \
(2)  Assingments to In, and Out which are normally accessed using %,  %8, etc \
are not affected by evaluating Clear[f].\n   (3)  Assignments such as  ",
  Cell[BoxData[
      \(TraditionalForm\`\((g = f + 1)\)\)]],
  ",  and  ",
  Cell[BoxData[
      \(TraditionalForm\`\((h[f] = value)\)\)]],
  " are not affected by evaluating  Clear[f].\n   \nI have done experiments \
to check everything I can think of and all other definitions associated with \
(f) are erased by Clear[f].  In particular ",
  Cell[BoxData[
      \(TraditionalForm\`Clear[f]\)]],
  " erases ",
  Cell[BoxData[
      \(TraditionalForm\`DownValues[f]\)]],
  ", ",
  Cell[BoxData[
      \(TraditionalForm\`UpValues[f]\)]],
  ", ",
  Cell[BoxData[
      \(TraditionalForm\`OwnValues[f]\)]],
  ", ",
  Cell[BoxData[
      \(TraditionalForm\`SubValues[f]\)]],
  ", ",
  Cell[BoxData[
      \(TraditionalForm\`NValues[f]\)]],
  ", and ",
  Cell[BoxData[
      \(TraditionalForm\`FormatValues[f]\)]],
  "."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["ClearAll[f]", "Subsection"],

Cell[TextData[{
  "ClearAll[f] clears all definitions associated with (f):\nHowever, after \
evaluating  ClearAll[f]  \n   (1)  The Symbol (f) remains on the list of \
symbols in the appropriate context after evaluating ClearAll[f].\n   (2)  \
Assingments to In, and Out which are normally accessed using %,  %8, etc are \
not affected by evaluating ClearAll[f].\n   (3)  Assignments such as  ",
  Cell[BoxData[
      \(TraditionalForm\`\((g = f + 1)\)\)]],
  ",  and  ",
  Cell[BoxData[
      \(TraditionalForm\`\((h[f] = value)\)\)]],
  " are not affected by evaluating  ClearAll[f].\n   \nSpecifically  \
ClearAll[f]  erases  ",
  Cell[BoxData[
      \(TraditionalForm\`Attributes[f]\)]],
  ", ",
  Cell[BoxData[
      \(TraditionalForm\`DownValues[f]\)]],
  ", ",
  Cell[BoxData[
      \(TraditionalForm\`UpValues[f]\)]],
  ", ",
  Cell[BoxData[
      \(TraditionalForm\`OwnValues[f]\)]],
  ", ",
  Cell[BoxData[
      \(TraditionalForm\`SubValues[f]\)]],
  ", ",
  Cell[BoxData[
      \(TraditionalForm\`NValues[f]\)]],
  ", ",
  Cell[BoxData[
      \(TraditionalForm\`FormatValues[f]\)]],
  ", ",
  Cell[BoxData[
      \(TraditionalForm\`DefaultValues[f]\)]],
  ", ",
  Cell[BoxData[
      \(TraditionalForm\`Options[f]\)]],
  " and \nMessages associated with (f)."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Remove[f]", "Subsection"],

Cell[TextData[{
  "For all practical purposes Remove[f]  deletes any previous use of the \
symbol (f) from the ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " session.\nSpecifically Remove[f] does the following: \n    (1)  Clears \
all definitions associated with (f).\n    (2)  The symbol (f) is removed from \
the list of symbols in the appropriate context.\n    (2)  For all practical \
purposes assingments such as  ",
  Cell[BoxData[
      \(TraditionalForm\`\((h[f] = value)\)\)]],
  ",   ",
  Cell[BoxData[
      \(TraditionalForm\`\((g = f + 1)\)\)]],
  "  are erased.  \n    \n    This includes assingments to the In, and Out \
history which are normally accessed using %,  %8, etc.\n    Such assignments \
aren't actually erased.  Instead the symbol (f) in such assingments is \
changed to  Removed[\"f\"]."
}], "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Coefficient, CoefficientList", "Section"],

Cell[TextData[{
  "In the next cell Coefficient returns the coefficient of a particular term \
of a polynomial.  In this case ",
  Cell[BoxData[
      \(TraditionalForm\`\((\(-210\) \(c\^2\) \(x\^2\) y\ z\^2)\)\)]],
  " is a term of ",
  Cell[BoxData[
      \(TraditionalForm\`\((c\ x - 2  y + z)\)\^7\)]],
  "after it's expanded."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[a, b, c, d, x, y, z];\)\), "\[IndentingNewLine]", 
    \(\(poly = \((c\ x - 2\ y + z)\)\^7;\)\), "\n", 
    \(Coefficient[poly, x\^2\ y\ z\^4]\)}], "Input"],

Cell[BoxData[
    \(\(-210\)\ c\^2\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "We can get the same information from CoefficientList which returns a list \
of coefficients.  In the cell below Part[coeff, 3,2,5] returns the \
coefficient of x^(3-1)y^(2-1)z^(5-1).  In general if we say   ",
  StyleBox["lst=CoefficientList[poly,{x1,x2,x3,...}]", "InlineInput"],
  "  then  Part[lst,  n1, n2, ,n3, ...] will be the coefficient of x1^(n1-1) \
x2^(n2-1) x3^(n3-1). "
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(coeff = CoefficientList[poly, {x, y, z}];\)\), "\n", 
    \(Part[coeff, 3, 2, 5]\)}], "Input"],

Cell[BoxData[
    \(\(-210\)\ c\^2\)], "Output"]
}, Open  ]],

Cell["\<\
The next line gives the coefficient of x^5.  As expected there is more than \
one term of poly with x^5 as a factor. \
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Coefficient[poly, x\^5]\)], "Input"],

Cell[BoxData[
    \(84\ c\^5\ y\^2 - 84\ c\^5\ y\ z + 21\ c\^5\ z\^2\)], "Output"]
}, Open  ]],

Cell["\<\
We can get the same result as the previous example if we use the next line.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Coefficient[poly, x, 5]\)], "Input"],

Cell[BoxData[
    \(84\ c\^5\ y\^2 - 84\ c\^5\ y\ z + 21\ c\^5\ z\^2\)], "Output"]
}, Open  ]],

Cell["\<\
One can't get the result above directly from CoefficientList.  Instead pieces \
of the above result are included in the result of \
CoefficientList[poly,{x,y,z}].  The line below can be used to get pieces of \
the result above.  Specifically  coeff[[6]] contains all coefficients of x^5 \
(including those that are zero).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(coeff[\([6]\)]\)], "Input"],

Cell[BoxData[
    \({{0, 0, 21\ c\^5, 0, 0, 0, 0, 0}, {0, \(-84\)\ c\^5, 0, 0, 0, 0, 0, 
        0}, {84\ c\^5, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 
        0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 
        0}, {0, 0, 0, 0, 0, 0, 0, 0}}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Part[coeff, 6, 1, 3] is ",
  Cell[BoxData[
      \(TraditionalForm\`\((\(-84\)\ c\^5)\)\)]],
  " the coefficient of ",
  Cell[BoxData[
      \(TraditionalForm\`\((x\^\(6 - 1\)*y\^\(2 - 1\)*
            z\^\(2 - 1\))\) = \((x\^6*y*z)\)\)]],
  " in poly. Part[coeff,6,3,1] is ",
  Cell[BoxData[
      \(TraditionalForm\`\((84  c\^5)\)\)]],
  " the coeficient of ",
  Cell[BoxData[
      \(TraditionalForm\`\((x\^\(6 - 1\)*y\^\(3 - 1\)*
            z\^\(1 - 1\))\) = \((x\^5*y\^2)\)\)]],
  " in poly.  All other coefficients under Coeff[[6]] are zero which agrees \
with the result of ",
  Cell[BoxData[
      \(TraditionalForm\`Coefficient[poly, x\^5]\)]],
  "."
}], "Text"],

Cell[TextData[{
  "The function defined in the next cell is a slight modification of a \
solution Roberto Colistete sent to the MathGroup. This function takes the \
coefficients from CoefficientList and returns the polynomial with those \
coefficients.  See the discussions of ",
  ButtonBox["MapIndexed",
    ButtonData:>"MapIndexed",
    ButtonStyle->"Hyperlink"],
  ", and ",
  ButtonBox["Function",
    ButtonData:>"Function",
    ButtonStyle->"Hyperlink"],
  " for further explanation of some features used here."
}], "Text",
  CellTags->{"MapIndexedExample", "CoefficientsToPolynomial"}],

Cell[BoxData[
    RowBox[{
      RowBox[{
        RowBox[{
          StyleBox[
            RowBox[{"Coefficients", 
              StyleBox["ToPolynomial",
                FormatType->StandardForm]}]], 
          StyleBox["[",
            FormatType->StandardForm], 
          StyleBox[\(coeffs_, \ vars_List\),
            FormatType->StandardForm], 
          StyleBox["]",
            FormatType->StandardForm]}], 
        StyleBox[" ",
          FormatType->StandardForm], 
        "/;", \((Length[Dimensions[coeffs]] === Length[vars])\)}], 
      StyleBox[":=",
        FormatType->StandardForm], 
      StyleBox[" ",
        FormatType->StandardForm], 
      StyleBox[\(\(Plus @@ 
          Flatten[\ 
            MapIndexed[#1\ Times @@ \((vars^\((#2\  - \ 1)\))\) &, \ 
              coeffs, \ {Length[vars]}]\ ]\)\(\ \)\),
        FormatType->StandardForm]}]], "Input"],

Cell["\<\
The next cell shows another implementation of the same function by Michael \
Trott of Wolfram Research.\
\>", "Text"],

Cell[BoxData[
    StyleBox[\(CoefficientsToPolynomial[coeffs_List, \ 
            vars_List] /; \((Length[Dimensions[coeffs]] === 
              Length[vars])\)\  := \ 
        Plus\  @@ \ Flatten[
            MapIndexed[\((#1\ Inner[Power, \ vars, \ #2\  - \ 1, \ 
                      Times])\) &, \ coeffs, \ {Length[vars]}]]\),
      FormatType->StandardForm]], "Input"],

Cell["\<\
A most elegant implementation of the same function is given in the next cell. \
This is a slight modification of a solution Alan Hayes sent to the MathGroup.\
\
\>", "Text"],

Cell[BoxData[
    \(CoefficientsToPolynomial[coeffs_, 
          vars_List] /; \((Length[Dimensions[coeffs]] === 
            Length[vars])\) := \[IndentingNewLine]Dot @@ 
        Reverse[Append[vars^\((Range[Dimensions[coeffs]] - 1)\), 
            coeffs]]\)], "Input"],

Cell["\<\
Either of the above definitions can be used on the examples below.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(lst = 
        CoefficientList[\((3  x - 2  y + z + Exp[a])\)^3, {x, y, 
            z}];\)\), "\n", 
    \(poly = Factor@CoefficientsToPolynomial[lst, {a, b, c}]\)}], "Input"],

Cell[BoxData[
    \(\((3\ a - 2\ b + c + \[ExponentialE]\^a)\)\^3\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(lst2 = 
        CoefficientList[
          a\ x\^3 + c\ x\ y + b\ x\^4\ y + d\ y\^2 + Exp[t], {x, 
            y}];\)\), "\n", 
    \(CoefficientsToPolynomial[lst2, {a, b}]\)}], "Input"],

Cell[BoxData[
    \(a\^4 + a\^4\ b\^2 + a\ b\ c + b\^2\ d + \[ExponentialE]\^t\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Also this ",
  ButtonBox["hyperlink",
    ButtonData:>{
      URL[ 
      "http://support.wolfram.com/mathematica/kernel/Symbols/System/\
Coefficient.html"], None},
    ButtonStyle->"Hyperlink"],
  " will take you to a Wolfram Research web site with more information."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Complement", "Section"],

Cell["\<\
In the cell below we get all elements that are in (lst1) but not in (lst2) or \
(lst3).  Of course this would work with lists of arbitrary expressions, not \
only numbers.\
\>", "Text",
  FontSize->12,
  CellTags->"Complement"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(lst1 = {3, 2, 7, 5, 2, 2, 3, 4, 5, 6, 1};\)\), "\n", 
    \(\(lst2 = {2, 3};\)\), "\n", 
    \(\(lst3 = {4, 6, 27, 23};\)\), "\[IndentingNewLine]", 
    \(Complement[lst1, lst2, lst3]\)}], "Input",
  FontSize->12],

Cell[BoxData[
    \({1, 5, 7}\)], "Output"]
}, Open  ]],

Cell["\<\
In the cell above Complement gives a sorted list of all elements of (lst1), \
that are not in (lst2).  If you want to do this without having the result \
sorted, DeleteCases should be used as in the next line.\
\>", "Text",
  FontSize->12],

Cell[CellGroupData[{

Cell[BoxData[
    \(DeleteCases[lst1, Alternatives @@ Union[lst2, lst3]]\)], "Input",
  FontSize->12],

Cell[BoxData[
    \({7, 5, 5, 1}\)], "Output"]
}, Open  ]],

Cell["\<\
In the previous example (Alternatives@@Union[lst2, lst3]) evaluates to (2 | 3 \
| 4 | 27 | 23).\
\>", "Text"],

Cell["\<\
Complement has the option SameTest with the default setting \
(SameTest\[Rule]Automatic).  It seems when the setting \
(SameTest\[Rule]Automatic) is used numeric values are compared using criteria \
equivalent to the built-in SameQ function. Notice in the next example 45 is \
not in the output because it is in (lst1) and (lst2). However, 164 is in the \
output and this is apparently because SameQ[164,164.0] returns False.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(lst1 = {12, 45, 67, 144, 164};\)\), "\[IndentingNewLine]", 
    \(\(lst2 = {13, 65, 88, 45, 90, 164.0};\)\), "\[IndentingNewLine]", 
    \(Complement[lst1, lst2, SameTest \[Rule] SameQ]\)}], "Input"],

Cell[BoxData[
    \({12, 67, 144, 164}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next example the SameTest option is used to change the criteria for \
when to items should be considered \"the same\".  Here we get a list of \
numbers in (lst1) such that an element of (lst1) is discarded if an element \
of (lst2) differs from it by less than 0.2.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Complement[lst1, lst2, 
      SameTest \[Rule] \((Abs[#1 - #2] < 0.2 &)\)]\)], "Input"],

Cell[BoxData[
    \({12, 67, 144}\)], "Output"]
}, Open  ]],

Cell["\<\
Complement can work with expressions that have a head other than List. I \
demonstrate this point with Complement in the next cell.\t\t  \
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[h];\)\), "\[IndentingNewLine]", 
    \(\(lst1 = h[3, 2, 7, 5, 2, 2, 3, 4, 5, 6, 1];\)\), "\n", 
    \(\(lst2 = h[2, 3];\)\), "\n", 
    \(\(lst3 = h[4, 6, 27, 23];\)\), "\[IndentingNewLine]", 
    \(Complement[lst1, lst2, lst3]\)}], "Input",
  FontSize->12],

Cell[BoxData[
    \(h[1, 5, 7]\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Compile", "Section"],

Cell[TextData[{
  "You might want to download a related package posted on ",
  StyleBox["MathSource",
    FontSlant->"Italic"],
  ".  The package is posted at \n",
  ButtonBox["http://library.wolfram.com/database/MathSource/555/",
    ButtonData:>{
      URL[ "http://library.wolfram.com/database/MathSource/555/"], None},
    ButtonStyle->"Hyperlink"]
}], "Text"],

Cell[CellGroupData[{

Cell["\<\
Examples of compiled functions that take an arbitrary length vector and an \
arbitrary dimension matrix\
\>", "Subsection"],

Cell["\<\
Using Compile[{{x1,t1,n1},...},expr] indicates (x1) is a rank (n1) tensor \
where each element has the type (t1).  A vector is a rank 1 tensor,and a \
matrix is a rank 2 tensor.  A function (magnitude) is defined below which \
finds the magnitude of an arbitrary length vector.\
\>", "Text"],

Cell[BoxData[
    \(\(magnitude = \n
        Compile[{{vector, _Real, 
              1}}, \@\(\(Plus @@ \(vector\^2\)\)\(\ \)\)];\)\)], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(magnitude[{2.3, 4.5, 1.6, 6.7, 8.9}]\)], "Input"],

Cell[BoxData[
    \(12.336936410632909`\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Using Compile[{{x, _Real, 2}}, ...] indicates (x) is a matrix of real \
numbers.  The matrix can have any dimensions.  As an example a \
CompiledFunction (func) is defined below.  The function (func) takes two \
matrices of real numbers named (a) and (p) and computes ",
  Cell[BoxData[
      \(\((p\ a\ p\^\(-1\))\)\)]],
  "."
}], "Text"],

Cell[BoxData[
    \(\(func = \n\t
        Compile[{{a, _Real, 2}, {p, _Real, 2}}, \n\t\t\ \((p . a . 
              Inverse[p])\)];\)\)], "Input"],

Cell["A demonstration of (func) is given below.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    RowBox[{
      RowBox[{"x", "=", 
        RowBox[{"(", GridBox[{
              {"1.2", "4.3", "0.1"},
              {"0.2", "1.4", "0.2"},
              {"0.1", "0.3", "0.4"}
              }], ")"}]}], ";", "\n", 
      RowBox[{"y", "=", 
        RowBox[{"(", GridBox[{
              {"1.2", "0.2", "0.0"},
              {"0.3", "1.5", "2.3"},
              {"0.2", "2.2", "0.7"}
              }], ")"}]}], ";", "\n", \(result = func[x, y]\), ";", 
      "\n", \(MatrixForm[result]\)}]], "Input"],

Cell[BoxData[
    TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {"0.9485930281394374`", \(-0.8287274254514907`\), 
              "2.951532969340612`"},
            {"0.44076018479630413`", \(-0.011045779084418178`\), 
              "1.8220075598488026`"},
            {"0.35774884502309967`", \(-0.3059638807223854`\), 
              "2.062452750944981`"}
            }], "\[NoBreak]", ")"}],
      Function[ BoxForm`e$, 
        MatrixForm[ BoxForm`e$]]]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["How to make a compiled functions that run fast.", "Subsection"],

Cell[TextData[{
  "In version 3.0 Compile returns an expression with the form \
CompiledFunction[args, nregs, instr, func].  In version 4.0 Compile returns \
CompiledFunction[args, argregs, nregs, instr, func].  Either way the second \
from the last argument is (instr), a list of compiled function instructions.  \
Hence if (func) is a function defined using Compile func[[-2]] will return \
the list of instructions.  The compiled function instructions include low \
level operations such as 'store a real number in a particular register'.  You \
don't need to know what each instruction does, but you want make sure the \
instructions don't include something with the form Function[args, expr].  Any \
instructions with this form will probably cause the function to run much \
slower than it should because standard ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " evaluation instead of compiled evaluation will be used.\n\nThere are \
several reasons why the compiled function instructions would include the form \
Function[args,expr], and all reasons I know of are demonstrated below."
}], "Text",
  CellTags->"Compiled_Evaluation"],

Cell[CellGroupData[{

Cell["An important undocumented feature in Version 4", "Subsubsection",
  CellDingbat->None,
  FontSize->14,
  FontWeight->"Bold"],

Cell["\<\
Version 4.0 has an undocumented feature that will post useful messages when a \
function is defined using Compile and a portion of the function can't be \
computed with compiled evaluation.  Evaluating the next cell will enable the \
undocumented feature.\
\>", "Text"],

Cell[BoxData[
    \(\(Developer`SetSystemOptions["\<CompileReportExternal\>" -> 
          True];\)\)], "Input"],

Cell[TextData[{
  "Once the feature above is enabled (using ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " Version 4) a message is displayed after the next cell is evaluated."
}], "Text"],

Cell[BoxData[
    \(\(f1 = 
        Compile[{{x, _Real}, {n, _Integer}}, 
          x^n/\ Factorial[n]];\)\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
(1)  Only a subset of kernel functions can be used in compiled evaluation.\
\>", "Subsubsection",
  FontWeight->"Plain",
  FontVariations->{"CompatibilityType"->0}],

Cell["\<\
One possible reason for having Function[args,expr] in the instructions is \
that (expr) may use one or more kernel functions that can't be represented as \
a low level op-code instruction (a list of integers).  As a rule of thumb \
functions that have a simple translation into C can be converted to op-code.  \
This is only a rule of thumb because Factorial has a simple translation into \
C, but can't be represented in op-code.  In fact that is why the compiled \
function instructions for (f1) below includes Function[{x,n},n!].\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(f1 = 
        Compile[{x, {n, _Integer}}, x^n/\(n!\)];\)\), "\[IndentingNewLine]", 
    \(f1[\([\(-2\)]\)]\)}], "Input"],

Cell[BoxData[
    \({{1, 4}, {91, 8, 3, 0, 0, 2, 0, 0, 3, 0, 1}, {21, 
        Function[{x, n}, \(n!\)], 3, 0, 0, 2, 0, 0, 2, 0, 1}, {14, 0, 1, 
        2}, {36, 2, 3}, {29, 1, 3, 1}, {2}}\)], "Output"]
}, Open  ]],

Cell["\<\
The function (f2) in the next cell does the same thing as (f1) in the \
previous cell, and will evaluate using compiled evaluation because the \
compiled function instructions don't include the form Function[args,instr].\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(f2 = 
        Compile[{x, {n, _Integer}}, 
          x^n/Times @@ Range[n]];\)\), "\[IndentingNewLine]", 
    \(f2[\([\(-2\)]\)]\)}], "Input"],

Cell[BoxData[
    \({{1, 4}, {91, 8, 3, 0, 0, 2, 0, 0, 3, 0, 1}, {9, 0, 1}, {60, 1, 1, 2, 
        1}, {4, 0, 3}, {9, 3, 2}, {81, 2, 1, 3}, {61, 2, 
        1}, {44, \(-2\)}, {4, 1, 1}, {59, 1, 3}, {4, 0, 4}, {81, 4, 3, 
        5}, {66, 1, 0, 4, 0, 5}, {28, 1, 5, 6}, {9, 6, 1}, {44, \(-4\)}, {14, 
        0, 1, 2}, {36, 2, 3}, {29, 1, 3, 1}, {2}}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "An alphabetical list of kernel features that can be converted to op-code \
can be found by searching for Compile at: ",
  ButtonBox["http://www.wolfram.com/support/Kernel/Symbols/",
    ButtonData:>{
      URL[ "http://www.wolfram.com/support/Kernel/Symbols/"], None},
    ButtonStyle->"Hyperlink"],
  ".   The same symbols are sorted below by category below."
}], "Text"],

Cell[TextData[StyleBox["Math functions and constants",
  FontSize->14,
  FontWeight->"Bold"]], "Text"],

Cell["\<\
Plus, Times, Power, Sqrt, 
Divide, Minus, Subtract, Quotient, 
Sign, Abs, Arg, Re, Im, Conjugate, 
Floor, Ceiling, Round, Mod, Min, Max, Log, Exp, 
Sin, Cos, Tan, ArcSin, ArcCos, ArcTan, 
Csc, Sec, Cot, ArcCsc, ArcSec, ArcCot, 
Sinh, Cosh, Tanh, ArcSinh, ArcCosh, ArcTanh, 
Csch, Sech, Coth, ArcCsch, ArcSech, ArcCoth, 
N, Chop, Random, IntegerDigits, Product, Sum, EulerE
E, Pi, Degree, GoldenRatio, Catalan

     Compile in Version 4 and later supports the following:
     UnitStep, Khinchin, Glaisher, BitAnd, BitOr, BitXor, BitNot
     \
\>", "Text"],

Cell[TextData[StyleBox["Vector, matrix and tensor mathematics",
  FontSize->14,
  FontWeight->"Bold"]], "Text"],

Cell["\<\
List, Det, Inverse, Dot, DiagonalMatrix, IdentityMatrix, 
Transpose, Dimensions, TensorRank
 \
\>", "Text"],

Cell[TextData[StyleBox["Boolean related features",
  FontSize->14,
  FontWeight->"Bold"]], "Text"],

Cell["\<\
True, False, Not, And, Or, Xor, Equal, Unequal, 
Greater, GreaterEqual, Less, LessEqual, Equal, Unequal, SameQ, UnsameQ, 
EvenQ, OddQ, Positive, Negative, NonNegative, FreeQ, MemberQ, OrderedQ, 
VectorQ, MatrixQ
 \
\>", "Text"],

Cell[TextData[StyleBox["Building and manipulating expressions and lists",
  FontSize->14,
  FontWeight->"Bold"]], "Text"],

Cell["\<\
Set, List, CompoundExpression, Length, 
Array, Table, Range, Count, Select, Cases, DeleteCases, 
Position, ReplacePart, Join, Intersection, Complement, Union, 
Append, AppendTo, Prepend, PrependTo, 
Part, Take, Insert, Delete, Drop, Rest, First, Last, 
Flatten, Sort, Reverse, RotateLeft, RotateRight, Partition, Permutations 
 \
\>", "Text"],

Cell[TextData[StyleBox["Functional programming",
  FontSize->14,
  FontWeight->"Bold"]], "Text"],

Cell["\<\
Apply, Map, MapAll, MapAt, MapIndexed, MapThread, 
Scan, FixedPoint, FixedPointList, Nest, NestList, 
Fold, FoldList, Array, Outer, ComposeList, Function, Slot, SlotSequence 
 \
\>", "Text"],

Cell[TextData[StyleBox["Scoping and procedural programming",
  FontSize->14,
  FontWeight->"Bold"]], "Text"],

Cell["\<\
Module, With, Block, Do, While, For, 
Set, If, Switch, Which, Implies, 
Break, Continue, Catch, Throw, Goto, Label, Return, 
Increment, Decrement, PreIncrement, PreDecrement, 
AddTo, SubtractFrom, TimesBy, DivideBy, Null, $Failed
 \
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["(2)  Compiled evaluation can't use global variables.", "Subsubsection",
  FontWeight->"Plain",
  FontVariations->{"CompatibilityType"->0}],

Cell["\<\
In the next cell a compiled function uses a global variable (width).  Later \
we see that the function works, but timing tests will show that it's no \
faster than if the function was defined without using Compile.\
\>", "Text"],

Cell[BoxData[{
    \(\(width = 2.5;\)\), "\[IndentingNewLine]", 
    \(\(g2 = Compile[{x}, x + width];\)\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(g2[0.3]\)], "Input"],

Cell[BoxData[
    \(2.8`\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell defines the same function as the previous example and takes the \
global variable as an argument. This is the way global variables should be \
used in a compiled function.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(g2 = Compile[{x, y}, x + y];\)\), "\[IndentingNewLine]", 
    \(g2[0.3, width]\)}], "Input"],

Cell[BoxData[
    \(2.8`\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell shows what happens if we try to set the value of a global \
variable inside a compiled function.  Here again the function works, but \
timing tests show that the function is no faster than the same function \
defined without using Compile.\
\>", "Text"],

Cell[BoxData[
    \(\(h2 = Compile[{x}, \((temp = 2.5; x + temp)\)];\)\)], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(h2[0.3]\)], "Input"],

Cell[BoxData[
    \(2.8`\)], "Output"]
}, Open  ]],

Cell["\<\
In the last example the value of (temp) was set inside Compile.  When \
something like this is needed Block, Module, or With should be used to make \
(temp) a local variable.  Compiled functions are defined below that do the \
same thing as the last example using Block, Module, With and they all use \
compiled evaluation which runs much faster.  Besides the advantage in speed \
the approach below ensures that evaluating say (ha[1.5], hb[1.5], hc[1.5]) \
will not change the value (temp) might have outside the compiled function.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ha = 
        Compile[{x}, 
          Block[{temp = 2.5}, x + temp]];\)\), "\[IndentingNewLine]", 
    \(\(hb = 
        Compile[{x}, 
          Module[{temp = 2.5}, x + temp]];\)\), "\[IndentingNewLine]", 
    \(\(hc = 
        Compile[{x}, 
          With[{temp = 2.5}, x + temp]];\)\), "\[IndentingNewLine]", 
    \({ha[0.3], hb[0.3], hb[0.3]}\)}], "Input"],

Cell[BoxData[
    \({2.8`, 2.8`, 2.8`}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["(3)  Compiled evaluation can't work with patterns.", "Subsubsection",
  FontWeight->"Plain",
  FontVariations->{"CompatibilityType"->0}],

Cell["\<\
The function in the next cell takes a list of real numbers, and determines if \
(0.5) is in the list.  This function will use compiled evaluation.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(f4 = 
        Compile[{{lst, _Real, 1}}, 
          FreeQ[lst, 0.5]];\)\), "\[IndentingNewLine]", 
    \(f4[{0.2, 0.3, 0.3}]\)}], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell["\<\
The function in the next cell also takes a list of real numbers, and \
determines if the list is free of negative numbers.  This function works, but \
timing tests will show that it's no faster than the same function defined \
without using Compile.  The problem in this case is that the compiled \
function uses the pattern (_?Negative).  Compiled evaluation isn't used if \
the second argument in Compile includes patterns of any kind.  When faced \
with a problem like this we should use an algorithm that doesn't require \
patterns, or define a function without using Compile.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(f4 = Compile[{{lst, _Real, 1}}, FreeQ[lst, _?Negative]];\)\), "\n", 
    \(f4[{0.2, 0.3, 0.3}]\)}], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell shows one way the function from the last example can be written \
to avoid the use of patterns.  This version will use compiled evaluation.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(f4 = 
        Compile[{{lst, _Real, 1}}, \ 
          FreeQ[Sign[lst], \(-1\)]\ \ ];\)\), "\n", 
    \(f4[{0.2, 0.3, \(-0.4\), 0.5}]\)}], "Input"],

Cell[BoxData[
    \(False\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
(4)  Local variables in compiled evaluation must always have the same type.\
\>", "Subsubsection",
  FontWeight->"Plain",
  FontVariations->{"CompatibilityType"->0}],

Cell["\<\
The next cell defines a function which uses a local variable (temp) where \
temp starts with an integer value.  Later in the function (temp) is changed \
to a real number.  In this case the function works, but timing tests will \
show it's no faster than the same function defined without using Compile.  \
Local variables used in a compiled function should always have the same type \
(Real, Integer, Complex, True|False) to ensure compiled evaluation is used.\
\>", "Text"],

Cell[BoxData[
    \(\(f6 = 
        Compile[{x}, 
          Module[{temp = 5}, \((temp = temp + x; 
              Round[temp])\)]];\)\)], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(f6[2.2]\)], "Input"],

Cell[BoxData[
    \(7\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
(5)  A compiled function can't change the value of it's argument.\
\>", "Subsubsection",
  FontWeight->"Plain",
  FontVariations->{"CompatibilityType"->0}],

Cell["\<\
The next cell shows an attempt to define a function.  If you try to use this \
function you will see it doesn't work.  The problem here is that the function \
tries to change the value of it's argument, but a compiled function can't \
change the value of it's argument for the same reason we can't evaluate \
(3=5).\
\>", "Text"],

Cell[BoxData[
    \(\(f7 = 
        Compile[{x}, \[IndentingNewLine]Do[
            x = Cos[x], {4}]; \[IndentingNewLine]x];\)\)], "Input"],

Cell["\<\
Some times we want to use an algorithm that starts with some value and \
replaces it with another value.  If we want to do this in a compiled function \
we should initialize a local variable to the value of the functions argument, \
and then change the value of the local variable.  The function in the next \
cell does this and uses compiled evaluation.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(f7 = 
        Compile[{x}, \[IndentingNewLine]Module[{temp = 
                x}, \[IndentingNewLine]Do[
              temp = Cos[
                  temp], {4}]; \
\[IndentingNewLine]temp\[IndentingNewLine]]];\)\), "\[IndentingNewLine]", 
    \(f7[0.2]\)}], "Input"],

Cell[BoxData[
    \(0.660837551116615`\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
(6)  Compiled evaluation can't work with all possible list structures.\
\>", "Subsubsection",
  FontWeight->"Plain",
  FontVariations->{"CompatibilityType"->0}],

Cell["\<\
The only list structures compiled evaluation can work with are vectors, \
matrices, and other tensors with (rank<101).  The function defined in the \
next cell returns a list structure that doesn't meet these restrictions so \
compiled evaluation can't be used.  In a case like this there is no advantage \
to using Compile to define the function.\
\>", "Text"],

Cell[BoxData[
    \(\(f5 = Compile[{x}, {x, {2  x, 3  x}}];\)\)], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(f5[2.1]\)], "Input"],

Cell[BoxData[
    \({2.1`, {4.2`, 6.300000000000001`}}\)], "Output"]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Condition  (Pattn/;Test)", "Section"],

Cell[TextData[{
  "Condition is closely related to ",
  ButtonBox["PatternTest",
    ButtonData:>"PatternTest",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text",
  CellTags->"Condition"],

Cell[CellGroupData[{

Cell["Typical use of Condition", "Subsection"],

Cell["\<\
Condition is used to put a restriction on when a pattern is used and the \
syntax is forgiving.  Below I give three ways to use Condition to define a \
function that takes a positive number and return the square of the number.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[foo];\)\), "\[IndentingNewLine]", 
    \(foo[x_ /; Positive[x]] := x^2\), "\[IndentingNewLine]", 
    \(foo[3]\)}], "Input"],

Cell[BoxData[
    \(9\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[foo];\)\), "\[IndentingNewLine]", 
    \(foo[x_] /; Positive[x] := x^2\), "\[IndentingNewLine]", 
    \(foo[4]\)}], "Input"],

Cell[BoxData[
    \(16\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[foo];\)\), "\[IndentingNewLine]", 
    \(foo[x_] := x^2 /; Positive[x]\), "\[IndentingNewLine]", 
    \(foo[5]\)}], "Input"],

Cell[BoxData[
    \(25\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell I show ho the same function can be defined using \
PatternTest.  It doesn't make much difference which style is used.  If you \
want to optimize running time, some experimenting is recommended.\
\>", "Text"],

Cell[BoxData[
    \(foo[x_?Positive] := x^2\)], "Input"],

Cell["\<\
The next cell defines a function that takes a list of numbers and returns a \
list where each number is squared.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[g1, g2];\)\), "\n", 
    \(g1[lst : {x_, y_} /; \((x < y)\)] := lst^2\), "\n", 
    \(g1[{2, 4}]\)}], "Input"],

Cell[BoxData[
    \({4, 16}\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell shows an unsuccessful attempt to define the function that was \
defined in the previous input.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[g2, x];\)\), "\[IndentingNewLine]", 
    \(g2[lst : {x_, y_ /; \((x < y)\)}] := lst^2\), "\n", 
    \(g2[{2, 4}]\)}], "Input"],

Cell[BoxData[
    \(g2[{2, 4}]\)], "Output"]
}, Open  ]],

Cell["\<\
The definition above failed because the global value of (x) was used in \
(y_/;(x<y)) instead of the value associated with (x_).  The definition that \
worked used the condition ({x_,y_}/;(x<y)) in which case all pattern \
variables used were in the pattern we had a condition on.  Notice the \
\"broken\" definition from the previous input is used when (x) has a suitable \
value.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(x = 0;\)\), "\n", 
    \(g2[{2, 4}]\)}], "Input"],

Cell[BoxData[
    \({4, 16}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["A Subtle Point", "Subsection"],

Cell["\<\
David Park noted that using Condition in the definition of a function can \
give surprising results as demonstrated below.\
\>", "Text"],

Cell[BoxData[{
    \(\(ClearAll[g, a, UseDefinition];\)\), "\[IndentingNewLine]", 
    \(g[a] /; UseDefinition := 2\)}], "Input"],

Cell["\<\
In the next cell the definition of g[a] isn't used and this is what we \
expect.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(UseDefinition = False;\)\), "\[IndentingNewLine]", 
    \(expr = g[a]\)}], "Input"],

Cell[BoxData[
    \(g[a]\)], "Output"]
}, Open  ]],

Cell["\<\
Then in the next cell the definition of g[a] is used as we expect.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(UseDefinition = True;\)\), "\[IndentingNewLine]", 
    \(g[a]\)}], "Input"],

Cell[BoxData[
    \(2\)], "Output"]
}, Open  ]],

Cell["\<\
Earlier the expression g[a] was assigned to expr, and one might expect that \
the following would evaluate to 2 since g[a]=2, but that isn't the case.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(expr\)], "Input"],

Cell[BoxData[
    \(g[a]\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Allan Hayes indicated this seems to stem from internal optimization \
procedures and he reminds us that section ",
  ButtonBox["2.5.12",
    ButtonData:>{"2.5.12", "12.14"},
    ButtonStyle->"MainBookLink"],
  "  of The ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " Book says the following. Some of the trickiest cases occur when you have \
rules that depend on complicated /; conditions (see Section ",
  ButtonBox["2.3.5",
    ButtonStyle->"MainBookLink"],
  "). One particularly awkward case is when the condition involves a global \
variable. ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " may think that the evaluation is finished because the expression did not \
change. However, a side effect of some other operation could change the value \
of the global variable, and so should lead to a new result in the evaluation. \
The best way to avoid this kind of difficulty is not to use global variables \
in /; conditions. If all else fails, you can type Update[s] to tell ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " to update all expressions involving s.\n\nBelow Allan Hayes shows how we \
can define  expr  to ensure we get the expected result. \nHere  ",
  ButtonBox["Update",
    ButtonStyle->"RefGuideLink"],
  "  and  (lhs := rhs)  are used instead of  (lhs = rhs)."
}], "Text"],

Cell[BoxData[{
    \(\(Clear[expr];\)\), "\[IndentingNewLine]", 
    \(\(UseDefinition = False;\)\), "\[IndentingNewLine]", 
    \(expr := \((Update[g]; g[a])\)\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(expr\)], "Input"],

Cell[BoxData[
    \(g[a]\)], "Output"]
}, Open  ]],

Cell["\<\
In the last cell g[a] is returned when we had (UseDefinition = False).  In \
the next cell  we get  (expr\[LongRightArrow]g[a]\[LongRightArrow]2)  when \
(UseDefinition = True).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(UseDefinition = True;\)\), "\n", 
    \(expr\)}], "Input"],

Cell[BoxData[
    \(2\)], "Output"]
}, Open  ]],

Cell["\<\
Allan Hayes also gave the next solution which is slightly different from the \
one above, but gives the same result.\
\>", "Text"],

Cell[BoxData[{
    \(\(Clear[expr];\)\), "\[IndentingNewLine]", 
    \(\(UseDefinition = False;\)\), "\[IndentingNewLine]", 
    \(\(expr /; \((Update[g]; True)\) = g[a];\)\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(expr\)], "Input"],

Cell[BoxData[
    \(g[a]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(UseDefinition = True;\)\), "\n", 
    \(expr\)}], "Input"],

Cell[BoxData[
    \(2\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Count", "Section"],

Cell["\<\
First I define (lst) which will be used to demonstrate Count.\
\>", "Text",
  CellTags->"Count"],

Cell[CellGroupData[{

Cell[BoxData[
    \(lst = 
      Table[Random[Integer, {0, 9}], \ \ \ {3}, {2}, {2}, {2}]\)], "Input"],

Cell[BoxData[
    \({{{{7, 1}, {3, 7}}, {{9, 5}, {4, 3}}}, {{{6, 6}, {1, 6}}, {{3, 6}, {3, 
            3}}}, {{{9, 7}, {3, 9}}, {{1, 3}, {4, 6}}}}\)], "Output"]
}, Open  ]],

Cell["\<\
The following returns 3 because lst has three elements and each has the form \
(_List).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Count[lst, _List]\)], "Input"],

Cell[BoxData[
    \(3\)], "Output"]
}, Open  ]],

Cell["\<\
The three lists found with the example from the previous cell are returned by \
evaluating the next input.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(Part[lst, 1]\), "\[IndentingNewLine]", 
    \(Part[lst, 2]\), "\[IndentingNewLine]", 
    \(Part[lst, 3]\)}], "Input"],

Cell[BoxData[
    \({{{7, 1}, {3, 7}}, {{9, 5}, {4, 3}}}\)], "Output"],

Cell[BoxData[
    \({{{6, 6}, {1, 6}}, {{3, 6}, {3, 3}}}\)], "Output"],

Cell[BoxData[
    \({{{9, 7}, {3, 9}}, {{1, 3}, {4, 6}}}\)], "Output"]
}, Open  ]],

Cell["The next input counts six lists at level 2.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Count[lst, _List, {2}]\)], "Input"],

Cell[BoxData[
    \(6\)], "Output"]
}, Open  ]],

Cell["\<\
The six lists found with the example from the previous cell are returned by \
evaluating the next input.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(Part[lst, 1, 1]\), "\[IndentingNewLine]", 
    \(Part[lst, 1, 2]\), "\[IndentingNewLine]", 
    \(Part[lst, 2, 1]\), "\[IndentingNewLine]", 
    \(Part[lst, 2, 2]\), "\[IndentingNewLine]", 
    \(Part[lst, 3, 1]\), "\[IndentingNewLine]", 
    \(Part[lst, 3, 2]\)}], "Input"],

Cell[BoxData[
    \({{7, 1}, {3, 7}}\)], "Output"],

Cell[BoxData[
    \({{9, 5}, {4, 3}}\)], "Output"],

Cell[BoxData[
    \({{6, 6}, {1, 6}}\)], "Output"],

Cell[BoxData[
    \({{3, 6}, {3, 3}}\)], "Output"],

Cell[BoxData[
    \({{9, 7}, {3, 9}}\)], "Output"],

Cell[BoxData[
    \({{1, 3}, {4, 6}}\)], "Output"]
}, Open  ]],

Cell["The next input counts ten lists at levels zero through 2.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Count[lst, _List, {0, 2}]\)], "Input"],

Cell[BoxData[
    \(10\)], "Output"]
}, Open  ]],

Cell["\<\
The ten lists found with the example from the previous cell are returned by \
evaluating the next input.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(lst\), "\[IndentingNewLine]", 
    \(Part[lst, 1]\), "\n", 
    \(Part[lst, 2]\), "\n", 
    \(Part[lst, 3]\), "\n", 
    \(Part[lst, 1, 1]\), "\n", 
    \(Part[lst, 1, 2]\), "\n", 
    \(Part[lst, 2, 1]\), "\n", 
    \(Part[lst, 2, 2]\), "\n", 
    \(Part[lst, 3, 1]\), "\n", 
    \(Part[lst, 3, 2]\)}], "Input"],

Cell[BoxData[
    \({{{{7, 1}, {3, 7}}, {{9, 5}, {4, 3}}}, {{{6, 6}, {1, 6}}, {{3, 6}, {3, 
            3}}}, {{{9, 7}, {3, 9}}, {{1, 3}, {4, 6}}}}\)], "Output"],

Cell[BoxData[
    \({{{7, 1}, {3, 7}}, {{9, 5}, {4, 3}}}\)], "Output"],

Cell[BoxData[
    \({{{6, 6}, {1, 6}}, {{3, 6}, {3, 3}}}\)], "Output"],

Cell[BoxData[
    \({{{9, 7}, {3, 9}}, {{1, 3}, {4, 6}}}\)], "Output"],

Cell[BoxData[
    \({{7, 1}, {3, 7}}\)], "Output"],

Cell[BoxData[
    \({{9, 5}, {4, 3}}\)], "Output"],

Cell[BoxData[
    \({{6, 6}, {1, 6}}\)], "Output"],

Cell[BoxData[
    \({{3, 6}, {3, 3}}\)], "Output"],

Cell[BoxData[
    \({{9, 7}, {3, 9}}\)], "Output"],

Cell[BoxData[
    \({{1, 3}, {4, 6}}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "I don't provide further examples, but any combination of pattern matching \
constructs can be used with Count.  Nuances of ",
  ButtonBox["pattern matching",
    ButtonData:>"Pattern-Matching",
    ButtonStyle->"Hyperlink"],
  " are discussed in another section."
}], "Text"],

Cell[CellGroupData[{

Cell["Heads Option", "Subsubsection"],

Cell["\<\
Count has a Heads option with the default setting (Heads\[Rule]False).  First \
I define (expr) which will be used to demonstrate this option.  In the first \
example Count ignores the (h) in h[x,y] because of the default setting for \
Heads.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[h];\)\), "\[IndentingNewLine]", 
    \(\(expr = {h[x, y], {h, 0}, {h, 3}, {3, 
            4}};\)\), "\[IndentingNewLine]", 
    \(Count[expr, h, {2}]\)}], "Input"],

Cell[BoxData[
    \(2\)], "Output"]
}, Open  ]],

Cell["\<\
When the last example is repeated using (Heads\[Rule]True) the (h) in h[x,y] \
is accounted for.  \
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(expr = {h[x, y], {h, 0}, {h, 3}, {3, 
            4}};\)\), "\[IndentingNewLine]", 
    \(Count[expr, h, {2}, Heads \[Rule] True]\)}], "Input"],

Cell[BoxData[
    \(3\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["DeleteCases", "Section"],

Cell["\<\
First I define (lst) which will be used to demonstrate DeleteCases.\
\>", "Text",
  CellTags->"DeleteCases"],

Cell[BoxData[
    \(\(expr = {1, 1.2, {2, 1.3, {3, 1.4}, {4, {1.5}}}};\)\)], "Input"],

Cell["\<\
The first example deletes all real numbers at level 1 and the only one at \
that level was 1.2.  Recall 1, 2, 3, ... have the head Integer not Real.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(DeleteCases[expr, _Real]\)], "Input"],

Cell[BoxData[
    \({1, {2, 1.3`, {3, 1.4`}, {4, {1.5`}}}}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "The next example deletes all Real numbers at levels 1 through 3.  The \
integers deleted were 1.2, 1.3, 1.4.  More discussion on ",
  ButtonBox["level specification",
    ButtonData:>"Level Specification",
    ButtonStyle->"Hyperlink"],
  " is given in another section."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(DeleteCases[expr, _Real, {1, 3}]\)], "Input"],

Cell[BoxData[
    \({1, {2, {3}, {4, {1.5`}}}}\)], "Output"]
}, Open  ]],

Cell["\<\
The next example deletes Real numbers at level 3.  The only Real number at \
level 3 was 1.4.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(DeleteCases[expr, _Real, {3}]\)], "Input"],

Cell[BoxData[
    \({1, 1.2`, {2, 1.3`, {3}, {4, {1.5`}}}}\)], "Output"]
}, Open  ]],

Cell["The next example deletes all Real numbers at any level.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(DeleteCases[expr, _Real, {0, \(-1\)}]\)], "Input"],

Cell[BoxData[
    \({1, {2, {3}, {4, {}}}}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next example I give an alternate way to delete Real numbers at any \
level.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(expr /. _Real \[Rule] Sequence[]\)], "Input"],

Cell[BoxData[
    \({1, {2, {3}, {4, {}}}}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next example I give an alternate way to delete Real numbers at levels \
1 through 3.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Replace[expr, _Real \[Rule] Sequence[], {1, 3}]\)], "Input"],

Cell[BoxData[
    \({1, {2, {3}, {4, {1.5`}}}}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "I don't provide further examples, but any combination of pattern matching \
constructs can be used with Count.  Nuances of ",
  ButtonBox["pattern matching",
    ButtonData:>"Pattern-Matching",
    ButtonStyle->"Hyperlink"],
  " are discussed in another section."
}], "Text"],

Cell[CellGroupData[{

Cell["Heads Option", "Subsection"],

Cell["\<\
DeleteCases has a Heads option with the default setting (Heads\[Rule]False).  \
First I define (expr) which will be used to demonstrate this option. \
\>", "Text"],

Cell[BoxData[{
    \(\(ClearAll[h, x, y];\)\), "\[IndentingNewLine]", 
    \(\(expr = {h[x, y], {6, h, 7}};\)\)}], "Input"],

Cell["\<\
In the next cell DeleteCases ignores the (h) in h[x,y] because of the default \
setting for Heads.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(DeleteCases[expr, h, {0, \(-1\)}, Heads \[Rule] False]\)], "Input"],

Cell[BoxData[
    \({h[x, y], {6, 7}}\)], "Output"]
}, Open  ]],

Cell["\<\
When the previous example is repeated with the option (Heads\[Rule]True) the \
(h) in h[x,y] is deleted.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(DeleteCases[expr, h, {0, \(-1\)}, Heads \[Rule] True]\)], "Input"],

Cell[BoxData[
    \({x, y, {6, 7}}\)], "Output"]
}, Open  ]],

Cell["\<\
Below I give alternate methods of getting the same results as the last two \
examples.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Replace[expr, h \[RuleDelayed] Sequence[], {0, \(-1\)}]\)], "Input"],

Cell[BoxData[
    \({h[x, y], {6, 7}}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(expr /. h[args__] \[RuleDelayed] args\) /. 
      h \[Rule] Sequence[]\)], "Input"],

Cell[BoxData[
    \({x, y, {6, 7}}\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Default", "Section"],

Cell["\<\
Default can be used with one two or three arguments, and each form is \
discussed below.\
\>", "Text",
  CellTags->"Default details"],

Cell[CellGroupData[{

Cell["Default[f]", "Subsection"],

Cell[TextData[{
  "In the next cell (f) has the default value 0.  Depending on the pattern \
used f[e] can be treated as f[e,0] or  f[0,e].  If the second argument in the \
pattern is optional f[e] is treated as f[e,0].  If the first argument in the \
pattern is optional f[e] is treated as f[0,e].  All throughout this \
discussion on Default details the functions that are given default values \
will have no attributes. However, the values assigned to Default[f] have a \
different effect when (f) has the OneIdentity attribute.  This is covered in \
the discussion of ",
  ButtonBox["OneIdentity",
    ButtonData:>"OneIdentity-Default",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[f, g, e];\)\), "\[IndentingNewLine]", 
    \(\(Default[f] = 0;\)\), "\[IndentingNewLine]", 
    \(f[e] /. f[a_, b_. ] \[RuleDelayed] g[a, b]\)}], "Input"],

Cell[BoxData[
    \(g[e, 0]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(f[e] /. f[a_. , b_] \[RuleDelayed] g[a, b]\)], "Input"],

Cell[BoxData[
    \(g[0, e]\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Default[f,i]", "Subsection"],

Cell["\<\
In the cell below values are given for Default[f,2],  Default[f,3] and \
definitions for evaluating (f) are given.\
\>", "Text"],

Cell[BoxData[{
    \(\(ClearAll[f];\)\), "\[IndentingNewLine]", 
    \(\(Default[f, 2] = 4;\)\), "\[IndentingNewLine]", 
    \(\(Default[f, 3] = 1/8;\)\), "\[IndentingNewLine]", 
    \(f[a_Integer, b_. , c_] := {a, b, c}\), "\[IndentingNewLine]", 
    \(f[a_Rational, b_Rational, c_. ] := {a, b, c}\)}], "Input"],

Cell["\<\
The definitions for (f) above are used in the input cells below.  For the \
cells below the default values are not needed because the definitions for (f) \
could be used directly.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(f[10, 11, 12]\)], "Input"],

Cell[BoxData[
    \({10, 11, 12}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(f[1/2, 1/2, 1/2]\)], "Input"],

Cell[BoxData[
    \({1\/2, 1\/2, 1\/2}\)], "Output"]
}, Open  ]],

Cell["\<\
Now for the next input (f) has only two arguments, and the definition for \
integer arguments is used.  However, the definition can only be used if a \
default value is inserted for the optional argument.  The applicable \
definition indicates that the second argument is optional.  The default value \
for the second argument of (f) is 4 so the value 4 is used for the second \
argument.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(f[10, 11]\)], "Input"],

Cell[BoxData[
    \({10, 4, 11}\)], "Output"]
}, Open  ]],

Cell["\<\
Then another input is evaluated where (f) has three arguments,and the \
definition for rational arguments is used.Again the definition can only be \
used if a default value is inserted for the optional argument.The applicable \
definition indicates the third argument is optional.The default value for the \
third argument of (f) is 1/8 so the value 1/8 is used for the third argument.\
\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(f[1/2, 1/2]\)], "Input"],

Cell[BoxData[
    \({1\/2, 1\/2, 1\/8}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell an attempt to make a rule for (f) with the first argument \
optional is not permitted.  That's because (f) only has default values for \
the second and third arguments.\
\>", "Text"],

Cell[BoxData[
    \(f[a_. , b_Real, c_Real] := {a, b, c}\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Default[f,i,n]", "Subsection"],

Cell["\<\
We can also use Default[f,i,n] to specify the default value to use when \
argument (i) out of (n) arguments is optional.  New default values and \
definitions for (f) are given below to demonstrate this.  The input below \
uses definitions for (f) with integer arguments and rational arguments.  \
\>", "Text"],

Cell[BoxData[{
    \(\(ClearAll[f];\)\), "\n", 
    \(\(Default[f, 2, 3] = 8;\)\), "\n", 
    \(\(Default[f, 2, 4] = 1/16;\)\), "\n", 
    \(f[a_Integer, b_. , c_Integer] := {a, b, c}\), "\n", 
    \(f[a_Rational, b_. , c_Rational, d_Rational] := {a, b, c, d}\)}], "Input"],

Cell["\<\
In each case below the use of a default values were not needed because the \
definitions for (f) could be used directly.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(f[11, 12, 13]\)], "Input"],

Cell[BoxData[
    \({11, 12, 13}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(f[1/2, 1/2, 1/2, 1/2]\)], "Input"],

Cell[BoxData[
    \({1\/2, 1\/2, 1\/2, 1\/2}\)], "Output"]
}, Open  ]],

Cell["\<\
Now in the next input (f) has two integer arguments.  The definition can only \
be used when a default value is inserted for the optional (second) argument.  \
Once a default value is inserted for the optional argument we will have three \
arguments.  The default value for the second of three arguments in (f) is 8 \
so a value of 8 is inserted as the second argument.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(f[11, 12]\)], "Input"],

Cell[BoxData[
    \({11, 8, 12}\)], "Output"]
}, Open  ]],

Cell["\<\
Then for another input (f) has three rational arguments.  Again the \
definition for rational arguments can only be used if a default value is \
inserted for the optional (second) argument.  Once a value is inserted for \
the second argument we will have four arguments.  The default value for the \
second of four arguments for (f) is 1/16 so a value of 1/16 is inserted as \
the second argument.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(f[1/2, 1/2, 1/2]\)], "Input"],

Cell[BoxData[
    \({1\/2, 1\/16, 1\/2, 1\/2}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell we can't give a rule where the second of two arguments is \
optional.  That is not permitted because we don't have a value assigned to \
Default[f, 2]  or  Default[f, 2, 2].\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(f[a_, b_. ] := {a, b}\)], "Input"],

Cell[BoxData[
    \(Pattern::"nodef" \(\(:\)\(\ \)\) 
      "No default setting found for \!\(f\) in position \!\(2\) when length \
is \!\(2\)."\)], "Message"],

Cell[BoxData[
    \(Pattern::"nodef" \(\(:\)\(\ \)\) 
      "No default setting found for \!\(f\) in position \!\(2\) when length \
is \!\(2\)."\)], "Message"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Distribute", "Section"],

Cell[TextData[{
  "Use of Distribute is well explained in the documentation.  However, I \
provide a hyperlink to an elegant program that uses ",
  ButtonBox["Distribute",
    ButtonData:>"Distribute - Application",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Dot", "Section"],

Cell[TextData[{
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " computes the dot product of two vectors exactly as we do in Linear \
Algebra. In the next cell we get the Dot product of two 3-D vectors."
}], "Text",
  CellTags->"Dot"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll["\<Global`*\>"];\)\), "\n", 
    \({a, b, c} . {x, y, z}\)}], "Input"],

Cell[BoxData[
    \(a\ x + b\ y + c\ z\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell we try to compute the Dot product of things that aren't \
litsts, and we see it doesn't work.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Dot[h[a, b, c], h[x, y, z]]\)], "Input"],

Cell[BoxData[
    \(h[a, b, c] . h[x, y, z]\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "One of the advantages of ",
  ButtonBox["Inner",
    ButtonData:>"Inner",
    ButtonStyle->"Hyperlink"],
  " is that it can do what we tried to do in the previous cell as we see with \
the next cell.  "
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Inner[Times, h[a, b, c], h[x, y, z], Plus]\)], "Input"],

Cell[BoxData[
    \(a\ x + b\ y + c\ z\)], "Output"]
}, Open  ]],

Cell["\<\
Below we see that matrix multiplication is also implemented using Dot.\
\>", "Text"],

Cell[CellGroupData[{

Cell["The Dot product of a vector and a matrix", "Subsection"],

Cell["\<\
We can compute the Dot product of a vector and a matrix.  In the next cell we \
get the Dot product of (vector A) with each column of (matrix B).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(A = {a1, b1, c1};\)\), "\[IndentingNewLine]", 
    \(\(B = {{x1, x2}, {y1, y2}, {z1, z2}};\)\), "\[IndentingNewLine]", 
    \(A . B\), "\[IndentingNewLine]", 
    \(A . B === Map[A . # &, Transpose[B]]\)}], "Input"],

Cell[BoxData[
    \({a1\ x1 + b1\ y1 + c1\ z1, a1\ x2 + b1\ y2 + c1\ z2}\)], "Output"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell["\<\
However, in the next example we get the Dot product of each row of (matrix A) \
with (vector B).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(A = {{x1, x2, x3}, {y1, y2, y3}};\)\), "\[IndentingNewLine]", 
    \(\(B = {a1, b1, c1};\)\), "\[IndentingNewLine]", 
    \(A . B\), "\[IndentingNewLine]", 
    \(A . B === Map[# . B &, A]\)}], "Input"],

Cell[BoxData[
    \({a1\ x1 + b1\ x2 + c1\ x3, a1\ y1 + b1\ y2 + c1\ y3}\)], "Output"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["The Dot product of two matrices", "Subsection"],

Cell[TextData[{
  "When ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " computes the Dot product of matrices you essentially get the product of \
the matrices as defined in Linear Algebra. Hence if A is a (m \[Cross] n) \
matrix and B is a (n \[Cross] j) matrix then ",
  Cell[BoxData[
      \(TraditionalForm\`Dot[A, B]\)]],
  " is a ",
  Cell[BoxData[
      \(TraditionalForm\`\((m\ \[Cross]\ \ j)\)\)]],
  " matrix. A generic example is given in the next cell."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(A = {{a1, a2}, {b1, b2}};\)\), "\[IndentingNewLine]", 
    \(\(B = {{x1, x2, x3}, {y1, y2, y3}};\)\), "\[IndentingNewLine]", 
    \(A . B\)}], "Input"],

Cell[BoxData[
    \({{a1\ x1 + a2\ y1, a1\ x2 + a2\ y2, a1\ x3 + a2\ y3}, {b1\ x1 + b2\ y1, 
        b1\ x2 + b2\ y2, b1\ x3 + b2\ y3}}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["The Dot product of two tensors", "Subsection"],

Cell["\<\
Mathematica can compute the Dot product of tensors with compatible \
dimensions. In the next cell the Dot product of tensors A and B is \
computed.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(A = {{{a1, a2}, {b1, b2}}, {{c1, c2}, {d1, d2}}};\)\), "\n", 
    \(\(B = {\ \ {{w1, w2, w3}, {x1, x2, x3}}, {{y1, y2, y3}, {z1, z2, 
              z3}}\ \ };\)\), "\n", 
    \(A . B\)}], "Input"],

Cell[BoxData[
    \({{{{a1\ w1 + a2\ y1, a1\ w2 + a2\ y2, 
            a1\ w3 + a2\ y3}, {a1\ x1 + a2\ z1, a1\ x2 + a2\ z2, 
            a1\ x3 + a2\ z3}}, {{b1\ w1 + b2\ y1, b1\ w2 + b2\ y2, 
            b1\ w3 + b2\ y3}, {b1\ x1 + b2\ z1, b1\ x2 + b2\ z2, 
            b1\ x3 + b2\ z3}}}, {{{c1\ w1 + c2\ y1, c1\ w2 + c2\ y2, 
            c1\ w3 + c2\ y3}, {c1\ x1 + c2\ z1, c1\ x2 + c2\ z2, 
            c1\ x3 + c2\ z3}}, {{d1\ w1 + d2\ y1, d1\ w2 + d2\ y2, 
            d1\ w3 + d2\ y3}, {d1\ x1 + d2\ z1, d1\ x2 + d2\ z2, 
            d1\ x3 + d2\ z3}}}}\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell helps explain how parts of the dot product above are \
computed.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(A . B === {A[\([1]\)] . B, A[\([2]\)] . B}\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "In the cell above A[[1]] is a matrix, but B is a tensor. The next cell \
shows how parts of ",
  Cell[BoxData[
      \(TraditionalForm\`\((A[\([1]\)]\  . \ B)\)\)]],
  " are computed. The parts of ",
  Cell[BoxData[
      \(TraditionalForm\`\((A[\([2]\)]\  . \ B)\)\)]],
  " are computed in a similar manner. All the Dot products below involve \
vectors and matrices and are computed as explained above."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(A[\([1]\)] . 
        B === {\[IndentingNewLine]{A[\([1, 1]\)] . First[Transpose[B]], 
          A[\([1, 1]\)] . 
            Last[Transpose[B]]}, \[IndentingNewLine]{A[\([1, 2]\)] . 
            First[Transpose[B]], 
          A[\([1, 2]\)] . Last[Transpose[B]]}\[IndentingNewLine]}\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["The Dot product of three or more arguments", "Subsection"],

Cell[TextData[{
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " can also compute Dot[A1, A2, A3,  ... ]  provided  (A1, A2, A3, ...) have \
suitable dimensions.\nDot[A1, A2, A3 ]  can be considered a concise way or \
writing Dot[A1, Dot[A2, A3] ] or  \nDot[Dot[A1, A2], A3]].  An example of the \
Dot product of three arguments is given in the next cell."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(A1 = {a, b, c};\)\), "\[IndentingNewLine]", 
    \(\(B1 = {{x1, x1}, {y1, y2}, {z3, z3}};\)\), "\[IndentingNewLine]", 
    \(\(C1 = {2, 3};\)\), "\[IndentingNewLine]", 
    \(Dot[A1, B1, C1]\)}], "Input"],

Cell[BoxData[
    \(2\ \((a\ x1 + b\ y1 + c\ z3)\) + 
      3\ \((a\ x1 + b\ y2 + c\ z3)\)\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Evaluate", "Section"],

Cell["\<\
Evaluate is used to ensure that one or more argument of a function evaluates \
even if the argument(s) would have not evaluated due to one of the attributes \
HoldAll, HoldRest, HoldFirst.  As an example consider the definitions in the \
next cell.\
\>", "Text",
  CellTags->"Evaluate"],

Cell[BoxData[{
    \(\(ClearAll["\<Global`*\>"];\)\), "\n", 
    \(\(Attributes[f] = {HoldRest};\)\), "\n", 
    \(f[x__] := Hold[x]\), "\n", 
    \(\({s, t, u, v, w} = {12, 15, 23, vv, 37};\)\), "\[IndentingNewLine]", 
    \(\(vv = 28;\)\)}], "Input"],

Cell["\<\
Because  f  has the HoldRest attribute only the first argument of  f  \
evaluates before the definition of  f  is used.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(f[s, t, u, v, w]\)], "Input"],

Cell[BoxData[
    \(Hold[12, t, u, v, w]\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "In the next cell Evaluate is used to ensure the ",
  Cell[BoxData[
      \(TraditionalForm\`4\^th\)]],
  " argument evaluates when it would have been held.  Notice (v) evaluated to \
(vv), and then (vv)  evaluated to 28.  It would be very difficult to make (v) \
evaluate to (vv), but prevent evaluation of (vv) to 28."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(f[s, t, u, Evaluate[v], w]\)], "Input"],

Cell[BoxData[
    \(Hold[12, t, u, 28, w]\)], "Output"]
}, Open  ]],

Cell["\<\
We can give Evaluate multiple arguments and they evaluate to a sequence as in \
the next cell.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(f[s, t, Evaluate[u, v], w]\)], "Input"],

Cell[BoxData[
    \(Hold[12, t, 23, 28, w]\)], "Output"]
}, Open  ]],

Cell["\<\
You might expect the following to evaluate the (v) in {u,v}, but it doesn't \
work. That is because in order for Evaluate to have an effect, the expression \
of which it is an argument must be evaluated.  In this example Evaluate[v]  \
is an argument of {u,Evaluate[v]}, and this list doesn't evaluate because (f) \
has the HoldRest attribute.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(f[s, t, {u, Evaluate[v]}, w]\)], "Input"],

Cell[BoxData[
    \(Hold[12, t, {u, Evaluate[v]}, w]\)], "Output"]
}, Open  ]],

Cell["\<\
In order to evaluate something deep inside a held expression you have to do \
something like the following.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(expr = f[s, t, {u, v}, w];\)\), "\[IndentingNewLine]", 
    \(ReplacePart[expr, Part[expr, 3, 2], {3, 2}]\)}], "Input"],

Cell[BoxData[
    \(Hold[12, t, {u, 28}, w]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Common applications for Evaluate", "Subsection"],

Cell[TextData[{
  "The first argument of  ",
  StyleBox["Plot[f, {x,xmin,xmax}]",
    FontWeight->"Bold"],
  "  must evaluate to a machine size real number when (x) is substituted fro \
a value between (xmin) and (xmax).  Plot also allows the form  ",
  StyleBox["Plot[{f1,f2,f3}, {x,xmin,xmax}]",
    FontWeight->"Bold"],
  " but this only works when the first argument of Plot has the head List \
before the Plot algorithm is called.  Sometimes we need to Evaluate the first \
argument of Plot to give it what it needs.  Several examples of this are \
given below.\n\nIn the first three examples Evaluate is needed to ensure the \
first argument has the head List."
}], "Text"],

Cell[BoxData[{
    \(\(ClearAll["\<Global`*\>"];\)\), "\n", 
    \(\(f2 = {x\^2, x\^3};\)\), "\n", 
    \(\(Plot[Evaluate[f2], {x, 0, 1.3}];\)\)}], "Input"],

Cell[BoxData[
    \(\(\(\ \)\(Plot[
        Evaluate[{x^2 - c1, x^2 + c1} /. c1 -> 2], {x, \(-2\), 
          2}];\)\)\)], "Input"],

Cell[BoxData[
    \(\(Plot[
        Evaluate[Table[BesselJ[n, x], {n, 4}]], {x, 0, 10}];\)\)], "Input"],

Cell[TextData[{
  "If Evaluate isn't used in the next example the Plot algorithm tries to \
take the derivative with respect to numeric values such as \n",
  Cell[BoxData[
      \(TraditionalForm\`D[Sin[\(\[Pi]\ 2.53\)\/20] 400\/\[Pi], \ 2.53]\)]],
  " but this is nonsense.  The solution is to use Evaluate to ensure the \
derivative is computed before the Plot algorithm is called."
}], "Text"],

Cell[BoxData[
    \(\(\(\ \)\(Plot[
        Evaluate[D[Sin[\(\[Pi]\ x\)\/20] 400/\[Pi], x]], {x, 0, 
          50}];\)\)\)], "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["ExactNumberQ, InexactNumberQ, NumberQ, NumericQ", "Section"],

Cell[TextData[{
  "ExactNumberQ is undocumented, but as far as I can tell it returns True if \
it's argument has the head Integer, Rational, or if the argument is complex \
with infinite precision.  It seems ExactNumberQ returns False in every other \
case as demonstrated with the next input.  You may not be familiar with the \
feature Root that I use below, but it's well documented in the Help Browser \
and The ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " Book.  I suggest you refer to this documentation if you are confused with \
the use of Root below."
}], "Text",
  CellTags->"ExactNumberQ"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[x];\)\), "\[IndentingNewLine]", 
    \(ExactNumberQ /@ {3, 5/3, 
        2 + 3  \[ImaginaryI]}\), "\[IndentingNewLine]", 
    \(ExactNumberQ /@ {\[Pi], 3.2, 2.3 + 1.25  \[ImaginaryI], 
        2 + 1.25  \[ImaginaryI], 2.3 + \[ImaginaryI], N[\[Pi], 50], 
        N[\[Pi] \((1 + \[ImaginaryI])\), 50], \@3, \[Pi]/4, 
        Root[\(-7\) - #1 + #1\^3 &, 1], \[Infinity], x}\)}], "Input"],

Cell[BoxData[
    \({True, True, True}\)], "Output"],

Cell[BoxData[
    \({False, False, False, False, False, False, False, False, False, False, 
      False, False}\)], "Output"]
}, Open  ]],

Cell["\<\
InexactNumberQ is also undocumented it seems InexactNumberQ returns True if \
it's argument is an approximate number (real or complex), and returns False \
in every other case.\
\>", "Commentary"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(InexactNumberQ /@ {3.2, 2.3 + 1.25  \[ImaginaryI], 
        2.3 + 5  \[ImaginaryI], 2 + 1.25  \[ImaginaryI], N[\[Pi], 50], 
        N[\[Pi] \((1 + \[ImaginaryI])\), 50]}\), "\[IndentingNewLine]", 
    \(InexactNumberQ /@ {3, 5/3, 
        2 + 3  \[ImaginaryI], \[Infinity], \@3, \[Pi]/4, 
        Root[\(-7\) - #1 + #1\^3 &, 1], \[Infinity], x}\)}], "Input"],

Cell[BoxData[
    \({True, True, True, True, True, True}\)], "Output"],

Cell[BoxData[
    \({False, False, False, False, False, False, False, False, 
      False}\)], "Output"]
}, Open  ]],

Cell["NumberQ is documented and it's usage message is given below", \
"Commentary"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?NumberQ\)\)], "Input"],

Cell[BoxData[
    RowBox[{"\<\"NumberQ[expr] gives True if expr is a number, and False \
otherwise.\"\>", " ", 
      ButtonBox[
        StyleBox["More\[Ellipsis]",
          "SR"],
        ButtonData:>"NumberQ",
        Active->True,
        ButtonStyle->"RefGuideLink"]}]], "Print",
  CellTags->"Info3292238823-5325569"]
}, Open  ]],

Cell["\<\
It seems NumberQ  returns True whenever it's argument has the head Integer, \
Rational, Real, or Complex and False in every other case.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(NumberQ /@ {3.2, 2.3 + 1.25  \[ImaginaryI], 3, 5/3, 
        2/3 + 3  \[ImaginaryI], 3\^300, \((3/5)\)\^300, 
        3\^300 + 5\^200\ \[ImaginaryI], N[\[Pi], 50], 
        N[\[Pi] \((1 + \[ImaginaryI])\), 50]}\), "\n", 
    \(NumberQ /@ {\[Infinity], \@3, \[Pi]/4, Root[\(-7\) - #1 + #1\^3 &, 1], 
        x}\)}], "Input"],

Cell[BoxData[
    \({True, True, True, True, True, True, True, True, True, 
      True}\)], "Output"],

Cell[BoxData[
    \({False, False, False, False, False}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "NumericQ is also documented and it's usage message is given below.  \
NumericQ  recognizes things like ",
  Cell[BoxData[
      \(TraditionalForm\`\@3\)]],
  " as numeric values as demonstrated below.  Infinity and Indeterminate are \
not considered numeric."
}], "Commentary"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?NumericQ\)\)], "Input"],

Cell[BoxData[
    RowBox[{"\<\"NumericQ[expr] gives True if expr is a numeric quantity, and \
False otherwise.\"\>", " ", 
      ButtonBox[
        StyleBox["More\[Ellipsis]",
          "SR"],
        ButtonData:>"NumericQ",
        Active->True,
        ButtonStyle->"RefGuideLink"]}]], "Print",
  CellTags->"Info3242392617-9633741"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
    \(NumericQ /@ {3.2, 2.3 + 1.25  \[ImaginaryI], 3, 5/3, 
        2 + 3  \[ImaginaryI], \@3, \[Pi]/4, Root[\(-7\) - #1 + #1\^3 &, 1], 
        N[\[Pi], 50], 
        N[\[Pi] \((1 + \[ImaginaryI])\), 50]}\), "\[IndentingNewLine]", 
    \(NumericQ /@ {\[Infinity], 1/0, 0. /0, \[Infinity], x}\)}], "Input"],

Cell[BoxData[
    \({True, True, True, True, True, True, True, True, True, 
      True}\)], "Output"],

Cell[BoxData[
    \({False, False, False, False, False}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Flat", "Section"],

Cell[TextData[{
  "If a function has the Flat attribute nested layers are ",
  StyleBox["automatically",
    FontFamily->"Times New Roman"],
  " flattened during evaluation.  This aspect of how Flat works is understood \
by many ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " users, and is demonstrated in the cell below."
}], "Text",
  CellTags->"Flat"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(ClearAll[f]\), "\n", 
    \(\(Attributes[f] = {Flat};\)\), "\n", 
    \(f[f[f[f[1, 2, 3]]]]\)}], "Input"],

Cell[BoxData[
    \(f[1, 2, 3]\)], "Output"]
}, Open  ]],

Cell[TextData[{
  StyleBox["I was only able to understanding many of the subtle ways that \
Flat works after getting Technical Support from Dave Withoff.  One subtle \
point many users don't ",
    FontWeight->"Plain"],
  "understand is the effect the Flat attribute has on pattern matching.  In \
the cell below (f) still has the Flat attribute and no other attributes.  In \
the example below the pattern matcher tries to find a way to make the \
expression match the pattern.  The pattern matcher finds that the pattern \
matches when the f[1,2,3,4] is treated as f[f[1],f[2,3,4]] and the two are \
considered equivalent to when (f) has the Flat attribute.  When the \
definition is applied f[f[1],f[2,3,4]] evaluates to {f[1],f[2,3,4]}.  Then \
f[2,3,4] is treated as f[f[2],f[3,4]] which evaluates to {f[2],f[3,4]}.  Then \
f[3,4] evaluates to {f[3],f[4]}.  When this is all put together we get   (  \
{f[1]{f[2]{f[3],f[4]}}}  )."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(f[x_, y_] := {x, y}\), "\n", 
    \(f[1, 2, 3, 4]\)}], "Input"],

Cell[BoxData[
    \({f[1], {f[2], {f[3], f[4]}}}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "The result above would be different if (f) had the attributes Flat and \
OneIdentity.  For further discussion of this see the details of ",
  ButtonBox["OneIdentity, Flat",
    ButtonData:>"OneIdentity-Flat",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text"],

Cell[CellGroupData[{

Cell["A warning about attributes and pattern matching", "Subsection",
  CellTags->"Attributes warning"],

Cell["\<\
The attributes Flat, Orderless, and OneIdentity effect pattern matching.  If \
a user defined function needs either of these attributes, they should be set \
before any definitions are entered, and not changed after the definitions are \
made.  This way the given attributes effects both pattern matching and the \
evaluation process (usually the desired effect).  This point is demonstrated \
for the Flat attribute in the cells below.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(ClearAll[f]\), "\n", 
    \(\(Attributes[f] = {Flat};\)\), "\n", 
    \(f[x_, y_] := {x, y}\), "\n", 
    \(f[1, 2, 
      3]\ \ \ \ \  (*\ \ The\ head\ f\ is\ Flat\ for\ pattern\ \(\(matching\)\
\(.\)\)\ \ *) \)}], "Input"],

Cell[BoxData[
    \({f[1], {f[2], f[3]}}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(\(f[
      f[f[1]]]\)\(\ \ \ \ \)\( (*\ \ Nested\ layers\ of\ f\ are\ \
\(\(flattened\)\(.\)\)\ \ *) \)\)\)], "Input"],

Cell[BoxData[
    \(f[1]\)], "Output"]
}, Open  ]],

Cell["\<\
If definition(s) are given before the attributes are set then the attribute \
effects evaluation, but not pattern matching.  This is demonstrated in the \
next few cells.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(ClearAll[f]\), "\n", 
    \(f[x_, y_] := {x, \ y}\), "\n", 
    \(\(Attributes[f] = {Flat};\)\), "\n", 
    \(f[1, 2, 
      3]\ \  (*\ \ The\ head\ f\ is\ not\ Flat\ for\ pattern\ \
\(\(matching\)\(.\)\)\ \ *) \)}], "Input"],

Cell[BoxData[
    \(f[1, 2, 3]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(\(f[
      f[f[1]]]\)\(\ \ \)\( (*\ \ Nested\ layers\ of\ f\ are\ \
\(\(flattened\)\(.\)\)\ \ *) \)\)\)], "Input"],

Cell[BoxData[
    \(f[1]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
When the next input cell is evaluated (f) is Flat for pattern matching, but \
not for evaluation.\
\>", "Subsubsection"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(ClearAll[f]\), "\n", 
    \(\(Attributes[f] = {Flat};\)\), "\n", 
    \(f[x_, y_] := {x, y}\), "\n", 
    \(\(Attributes[f] = {};\)\), "\n", 
    \(\(f[x_, y_] := {x, y};\)\), "\n", 
    \(f[1, 2, 
      3]\ \ \  (*\ \ The\ head\ f\ is\ Flat\ for\ pattern\ \
\(\(matching\)\(.\)\)\ \ *) \)}], "Input"],

Cell[BoxData[
    \({f[1], {f[2], f[3]}}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(\(f[
      f[f[1]]]\)\(\ \ \)\( (*\ \ Nested\ layers\ of\ f\ are\ not\ \
\(\(Flattened\)\(.\)\)\ \ *) \)\)\)], "Input"],

Cell[BoxData[
    \(f[f[f[1]]]\)], "Output"]
}, Open  ]],

Cell["\<\
It now seems like (f) has the same definition twice.  We can evaluate ( \
f[x_,y_]=. ) once to get rid of one definition, but we need to use ( \
f[x_,y_]=. ) again to get rid of the second definition.  Alternatively we \
could use Clear[f] and all definitions for (f) would be removed in one \
step.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?f\)\)], "Input"],

Cell["Global`f", "Print",
  CellTags->"Info3242392618-3366990"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {GridBox[{
                {\(f[x_, y_] := {x, y}\)},
                {" "},
                {\(f[x_, y_] := {x, y}\)}
                },
              GridBaseline->{Baseline, {1, 1}},
              ColumnWidths->0.999,
              ColumnAlignments->{Left}]}
          },
        GridBaseline->{Baseline, {1, 1}},
        ColumnAlignments->{Left}],
      Definition[ "f"],
      Editable->False]], "Print",
  CellTags->"Info3242392618-3366990"]
}, Open  ]],

Cell[BoxData[
    \(f[x_, y_] =. \)], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?f\)\)], "Input"],

Cell["Global`f", "Print",
  CellTags->"Info3242392618-7584819"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {GridBox[{
                {\(f[x_, y_] := {x, y}\)}
                },
              GridBaseline->{Baseline, {1, 1}},
              ColumnWidths->0.999,
              ColumnAlignments->{Left}]}
          },
        GridBaseline->{Baseline, {1, 1}},
        ColumnAlignments->{Left}],
      Definition[ "f"],
      Editable->False]], "Print",
  CellTags->"Info3242392618-7584819"]
}, Open  ]],

Cell[BoxData[
    \(f[x_, y_] =. \)], "Input"],

Cell["Now (f) has no definitions.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(?? f\)], "Input"],

Cell["Global`f", "Print",
  CellTags->"Info3242392618-6169565"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \({f[1, 2], f[f[1]]}\)], "Input"],

Cell[BoxData[
    \({f[1, 2], f[f[1]]}\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["A problem with the Flat attribute and how to solve it", "Subsection"],

Cell["\<\
A Wolfram Research Technical Support web page points out that one should \
avoid definitions such as (f[p_]:=p) for functions that have the Flat \
attribute. In the cell below this was attempted,and the kernel would have \
gone into infinite iteration if it didn't bail out when the iteration limit \
was exceeded. The reason this leads to infinite iteration is that the pattern \
matcher tries to rewrite f[1,2] so (f) has only one argument so the \
expression will match the pattern (f[p_]). The pattern matcher is able to fit \
the expression to the pattern by treating f[1,2] as f[f[1,2]].The outer (f) \
is evaluated and results in f[1,2] which has to be evaluated.However,this is \
exactly where we started. Then the kernel does this over and over until the \
iteration limit is exceeded.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(ClearAll[f]\), "\n", 
    \(\(Attributes[f] = {Flat};\)\), "\n", 
    \(f[p_] := p\), "\n", 
    \(f[1, 2]\)}], "Input"],

Cell[BoxData[
    \(Hold[f[1, 2]]\)], "Output"]
}, Open  ]],

Cell["\<\
Plus and Times have the Flat attribute. At first glance it seems Plus and \
Times have the definitions 
( Plus[p_]:=p; Times[p_]:=p ) but it isn't that simple. Something special had \
to be done because Plus[a,b] and Times[a,b] don't cause an $IterationLimit \
message. Allan Hayes indicated the following definition can be used to allow \
a user defined function to work like Plus and Times in this regard. I suspect \
this works because the definition for f[a__]  is only used after pattern \
matching is finished.\
\>", "Text"],

Cell[BoxData[{\(ClearAll[f]\), "\n", \(SetAttributes[
      f, {Flat, OneIdentity}]\), "\n", 
    StyleBox[\(f[a__]\  /; \((\ Length[{a}] === 1\ )\) := \ a\),
      FormatType->StandardForm,
      FontFamily->"Courier New",
      FontSize->10], "\n", \(f[x_Real, y_] := {x, y}\)}], "Input"],

Cell["\<\
In the next output cell we see nested layers of (f) are flattened.  In \
addition the result is f[1,2] which does not lead to infinite iteration.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(\(f[f[f[f[1, 2]]]]\)\(\ \)\)\)], "Input"],

Cell[BoxData[
    \(f[1, 2]\)], "Output"]
}, Open  ]],

Cell["\<\
Next we see (f) is flat for pattern matching. In this case f[1.5, 2.5, 3.5] \
was treated as the equivalent expression f[1.5,f[2.5,3.5]] which evaluated to \
{1.5, {2.5, 3.5}}.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(f[1.5, 2.5, 3.5]\)], "Input"],

Cell[BoxData[
    \({1.5`, {2.5`, 3.5`}}\)], "Output"]
}, Open  ]],

Cell["\<\
Finally we verify that when (f) is evaluated with only one argument it \
returns the argument.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Clear[p]; \ f[p]\)], "Input"],

Cell[BoxData[
    \(p\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Flatten", "Section"],

Cell["\<\
The basic use of Flatten is demonstrated in the next cell.  Lots of users \
know about the basic use of Flatten, but there is much more to the story.\
\>", "Text",
  CellTags->"Flatten"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Flatten[{{1, {2, {3, 4}}, 5, {6}}}]\)], "Input"],

Cell[BoxData[
    \({1, 2, 3, 4, 5, 6}\)], "Output"]
}, Open  ]],

Cell["\<\
First of all Flatten will flatten nested layers of any head as demonsrated in \
the next cell.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Flatten[h[h[1, h[2, h[3, 4]], 5, h[6]]]]\)], "Input"],

Cell[BoxData[
    \(h[1, 2, 3, 4, 5, 6]\)], "Output"]
}, Open  ]],

Cell["\<\
When Flatten is given only one argument, it checks the head of the expression \
and flattens nested layers of that head.  Notice the nested lists in the next \
example aren't flattened.  Also in  this example we are flattening layers of \
(h), starting with the arguments of (expr) and going down to deeper levels.  \
When Flatten gets to a subexpression that doesn't have the head (h) it \
decides not to look inside this subexpression for nested layers of (h).  \
Hence the output has nested layers of (h) in {h[h[7],h[8]]}.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(expr = 
        h[h[1, h[2, h[3, 4]], 5, 
            h[6]], {h[h[h[7]], h[8]]}, {9, {10}, {11, {12}, 
              13}}];\)\), "\[IndentingNewLine]", 
    \(Flatten[expr]\)}], "Input"],

Cell[BoxData[
    \(h[1, 2, 3, 4, 5, 
      6, {h[h[h[7]], h[8]]}, {9, {10}, {11, {12}, 13}}]\)], "Output"]
}, Open  ]],

Cell["\<\
In the next input we give Flatten (2) as a second argument and only two \
layers of (h) are flattened.  Here too the subexpression g[h[8,h[9,10]]] \
doesn't have the head (h), so Flatten doesn't flatten layers of (h) in this \
subexpression.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(expr = 
        h[1, 2, h[3, 
            h[4, h[h[h[5]], 6], 
              g[h[8, h[9, 10]]]]]];\)\), "\[IndentingNewLine]", 
    \(Flatten[expr, 2]\)}], "Input"],

Cell[BoxData[
    \(h[1, 2, 3, 4, h[h[h[5]], 6], g[h[8, h[9, 10]]]]\)], "Output"]
}, Open  ]],

Cell["\<\
We can give Flatten a third argument to indicate that layers with a certain \
head should be flattened. This is needed in the next cell to ensure layers of \
(h) are flattened.  If Flatten was given one or two arguments it would try to \
flatten layers of (g).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(expr = 
        g[1, h[2, 
            h[3, 4, h[5, h[6, h[7, h[8]]]]]]];\)\), "\[IndentingNewLine]", 
    \(Flatten[expr, \[Infinity], h]\)}], "Input"],

Cell[BoxData[
    \(g[1, 2, 3, 4, 5, 6, 7, 8]\)], "Output"]
}, Open  ]],

Cell["\<\
In the next example Flatten is trying to flatten layers of (h).  Flatten \
finds that the subexpression g[h[9,h[10,11]]] doesn't have the head (h) so it \
doesn't flatten layers of (h) in that subexpression.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(expr = 
        g[1, h[2, h[3, 4, h[5, h[6, h[7, h[8]]]]]], 
          g[h[9, h[10, 11]]]];\)\), "\[IndentingNewLine]", 
    \(Flatten[expr, \[Infinity], h]\)}], "Input"],

Cell[BoxData[
    \(g[1, 2, 3, 4, 5, 6, 7, 8, g[h[9, h[10, 11]]]]\)], "Output"]
}, Open  ]],

Cell["\<\
If we want to flatten all nested layers of (h), the replacement rule in the \
next cell should be used.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(expr = 
        g[1, h[2, h[3, 4, h[5, h[6, h[7, h[8]]]]]], 
          g[h[9, h[10, 11]]]];\)\), "\[IndentingNewLine]", 
    \(expr //. h[e1___, h[e2___], e3___] :> h[e1, e2, e3]\)}], "Input"],

Cell[BoxData[
    \(g[1, h[2, 3, 4, 5, 6, 7, 8], g[h[9, 10, 11]]]\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Fold", "Section"],

Cell["\<\
The basic example of Fold is given below, but first I clear values from all \
variables.\
\>", "Text",
  CellTags->"Fold"],

Cell[CellGroupData[{

Cell["\<\
ClearAll[\"Global`*\"];
Fold[f,x,{a,b,c}]\
\>", "Input"],

Cell[BoxData[
    \(f[f[f[x, a], b], c]\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "The basic example above doesn't do much to help one understand how to make \
a useful program using Fold.  Some more illuminating examples are given \
below.  If you don't understand the #& notation see the discussion of ",
  ButtonBox["Function",
    ButtonData:>"Function",
    ButtonStyle->"Hyperlink"],
  ". The three examples below aren't very useful, but they demonstrate the \
form that is normally needed when using Fold.\n\nFrom these examples we get:\n\
((((a+b)+c)+d)+e)\n\n((((a b)c)d)e)\n\n",
  StyleBox["StringJoin[StringJoin[StringJoin[StringJoin[StringJoin[\n  \
\"\",\"a\"],\"b\"],\"c\"],\"d\"],\"e\"]", "Input",
    FontWeight->"Plain",
    Background->None,
    FontVariations->{"CompatibilityType"->0}],
  "\n"
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Fold[\((#1 + #2)\) &, 0, {a, b, c, d, e}]\)], "Input"],

Cell[BoxData[
    \(a + b + c + d + e\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Fold[\((#1*\ #2)\) &, 1, {a, \ b, \ c, d, e}]\)], "Input"],

Cell[BoxData[
    \(a\ b\ c\ d\ e\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Fold[
      StringJoin[#1, #2] &, "\<\>", {"\<a\>", "\<b\>", "\<c\>", "\<d\>", "\<e\
\>"}]\)], "Input"],

Cell[BoxData[
    \("abcde"\)], "Output"]
}, Open  ]],

Cell["\<\
A more useful application of Fold is given in the next cell.  Here we have a \
function that expresses a polynomial using Horner's rule.\
\>", "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(\(HornerForm[poly_?PolynomialQ, 
        x_Symbol] := \[IndentingNewLine]Fold[\((x\ #1 + #2)\) &, 0, 
        Reverse[CoefficientList[poly, x]]]\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(HornerForm[2 + 3  x + x\^2 - 4  x\^3 + 2  x\^4, x]\)}], "Input"],

Cell[BoxData[
    \(2 + x\ \((3 + x\ \((1 + x\ \((\(-4\) + 2\ x)\))\))\)\)], "Output"]
}, Open  ]],

Cell["\<\
In the Cell below Fold is used to make an Alternating Series.  If ( lst ) was \
used instead of (Reverse[lst] ),  the first term would be multiplied by (-1) \
when the Length of ( lst ) is even.  Jerry Keiper posted this solution to the \
MathGroup.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(\(alternate[lst_List] := 
      Fold[\((#2 - #1)\) &, 0, Reverse[lst]]\)\(\[IndentingNewLine]\)
    \)\), "\n", 
    \(\(Clear[a1, a2, a3, a4, a5, a6, a7, a8];\)\), "\n", 
    \(alternate[{a1, a2, a3, a4, a5, a6, a7, a8}]\)}], "Input"],

Cell[BoxData[
    \(a1 - a2 + a3 - a4 + a5 - a6 + a7 - a8\)], "Output"]
}, Open  ]],

Cell["\<\
Another application of Fold is shown below (copied from the Help Browser).  \
This function (EvaluateAt) takes an expression and a list of positions, and \
evaluates in place only the parts at the specified positions.\
\>", "Text",
  CellTags->"Partial evaluation 2"],

Cell[BoxData[
    \(EvaluateAt[expr_, positions_] := 
      Fold[ReplacePart[#1, Part[#1, Sequence @@ #2], #2] &, expr, 
        positions]\)], "Input"],

Cell["\<\
To demonstrate this function consider the expression below which is wrapped \
in HoldForm to prevent evaluation.\
\>", "Text"],

Cell[BoxData[
    \(\(expr = 
        HoldForm[{{Cos[\[Pi]], \@8, 
              Cos[\[Pi]], \((x\ y\ z)\)\^2}, \[IndentingNewLine]{\@12, 
              Sin[ArcCos[x]], 2, 0}}];\)\)], "Input"],

Cell["\<\
First we use ReleaseHold to see what the expression evaluates to without \
HoldForm.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(ReleaseHold[expr]\)], "Input"],

Cell[BoxData[
    \({{\(-1\), 2\ \@2, \(-1\), x\^2\ y\^2\ z\^2}, {2\ \@3, \@\(1 - x\^2\), 
        2, 0}}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell EvaluateAt (defined above) is used to evaluate only the \
parts of (expr) that contain trigonometric functions.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(EvaluateAt[expr, {{1, 1, 1}, {1, 1, 3}, {1, 2, 2}}]\)], "Input"],

Cell[BoxData[
    TagBox[\({{\(-1\), \@8, \(-1\), \((x\ y\ z)\)\^2}, {\@12, \@\(1 - x\^2\), 
          2, 0}}\),
      HoldForm]], "Output"]
}, Open  ]],

Cell[TextData[{
  "If you have trouble figuring out the position of a portion of a \
sub-expression you are interested in you might want to down load a package \
Called (ExpressionManipulation.m) from ",
  ButtonBox["http://home.earthlink.net/~djmp/Mathematica.html",
    ButtonData:>{
      URL[ "http://home.earthlink.net/~djmp/Mathematica.html"], None},
    ButtonStyle->"Hyperlink"],
  " .\n\nAn alternate method of getting the same result in this example is \
given in the discussion of ",
  ButtonBox["Block",
    ButtonData:>"Partial evaluation1",
    ButtonStyle->"Hyperlink"],
  ".\n\nFor another elegant application of Fold see the program Alan Hayes \
wrote which quickly finds the integers ",
  ButtonBox["Relatively Prime to an integer n",
    ButtonData:>"RelativePrimes_Fold",
    ButtonStyle->"Hyperlink"],
  " using Fold."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["FoldList", "Section"],

Cell["\<\
The usage message of FoldList is shown below, and of course it's closely \
related to Fold. For a long time I wondered where something like this would \
have useful applications.\
\>", "Text",
  CellTags->"FoldList"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?FoldList\)\)], "Input"],

Cell[BoxData[
    RowBox[{"\<\"FoldList[f, x, {a, b, ... }] gives {x, f[x, a], f[f[x, a], \
b], ... }.\"\>", " ", 
      ButtonBox[
        StyleBox["More\[Ellipsis]",
          "SR"],
        ButtonData:>"FoldList",
        Active->True,
        ButtonStyle->"RefGuideLink"]}]], "Print",
  CellTags->"Info3242392636-8498059"]
}, Open  ]],

Cell[TextData[{
  "J\[UDoubleDot]rgen Tischer used FoldList to solve a common problem in the \
MathGroup. The solution is given below which takes a list of angles and adds \
to, or subtracts from, each element a multiple of 360\[Degree]  to minimize \
the jump from the previous element. This trick forms the heart of the \
SmoothPhase package that I have posted on ",
  StyleBox["MathSource",
    FontSlant->"Italic"],
  "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{\(lst = {5, 35, 65, 95, 125, 
          155, \(-175\), \(-145\), \(-115\), \(-85\), \(-55\), \(-25\)};\), "\
\[IndentingNewLine]", 
    StyleBox[\(FoldList[\((Round[\((#1 - #2)\)/360] 360 + #2)\) &, 
        First[lst], Rest[lst]]\),
      FormatType->StandardForm,
      FontFamily->"Courier New",
      FontSize->10]}], "Input"],

Cell[BoxData[
    \({5, 35, 65, 95, 125, 155, 185, 215, 245, 275, 305, 335}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Another elegant ",
  ButtonBox["application of FoldList",
    ButtonData:>"FoldList_Example1",
    ButtonStyle->"Hyperlink"],
  " is given in the section on Clever little programs."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Format", "Section"],

Cell["\<\
The lines below ensure a polynomial is written in the opposite order from the \
usual Format.\
\>", "Text",
  CellTags->"Format"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(\(Unprotect[Plus];\)\(\n\)
    \)\), "\n", 
    \(\(\(Format[HoldPattern[Plus[p__]]] := 
        Module[{s1, s2}, \ns1 = Hold[p]; \ns2 = Reverse[s1]; \n
          ReplacePart[HoldForm[Evaluate[s2]], Plus, {1, 0}] /; \n
            OrderedQ[s1] && \((s1 =!= s2)\)];\)\(\n\)
    \)\), "\n", 
    \(\(Clear[x];\)\ \ \), "\[IndentingNewLine]", 
    \(Expand[\((2 + x)\)\^4]\)}], "Input"],

Cell[BoxData[
    TagBox[\(x\^4 + 8\ x\^3 + 24\ x\^2 + 32\ x + 16\),
      HoldForm]], "Output"]
}, Open  ]],

Cell["Before moving on the normal convention is restored.", "Text"],

Cell[BoxData[{
    \(\(Format[HoldPattern[Plus[p__]]] =. \ \ \ ;\)\), "\n", 
    \(\(Protect[Plus];\)\)}], "Input"],

Cell["\<\
Another application of Format is given below. A user once wrote to the \
MathGroup asking how one could ensure rational numbers greater than one are \
displayed as improper fractions.  P.J. Hinton of Wolfram Research gave the \
solution below to change the way rational numbers are formatted.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Unprotect[Rational];\)\), "\n", 
    \(Format[
        Rational[num_Integer, 
          den_Integer]] \
:= \[IndentingNewLine]DisplayForm[\[IndentingNewLine]RowBox[{ToString[
              Quotient[num, den]], \[IndentingNewLine]FractionBox[
              ToString[Mod[num, den]], 
              ToString[
                den]]\[IndentingNewLine]}\[IndentingNewLine]]\
\[IndentingNewLine]]\), "\n", 
    \(\(\(Protect[Rational];\)\(\n\)
    \)\), "\[IndentingNewLine]", 
    \(14/3\  - 1\)}], "Input"],

Cell[BoxData[
    TagBox[\(3  2\/3\),
      DisplayForm]], "Output"]
}, Open  ]],

Cell["\<\
Before continuing we the next cell should be evaluated to remove the above \
formatting rule.\
\>", "Text"],

Cell[BoxData[{
    \(\(Unprotect[Rational];\)\), "\n", 
    \(\(FormatValues[Rational] = {};\)\), "\n", 
    \(\(Protect[Rational];\)\)}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["FreeQ", "Section"],

Cell[TextData[{
  "FreeQ is like MemberQ in that is also takes a ",
  ButtonBox["level specification",
    ButtonData:>"Level Specification",
    ButtonStyle->"Hyperlink"],
  ".  By default FreeQ looks at all levels, so in the next example FreeQ \
returns False because it see the 2 in ",
  Cell[BoxData[
      \(TraditionalForm\`x\^2\)]],
  "."
}], "Text",
  CellTags->"FreeQ"],

Cell[CellGroupData[{

Cell[BoxData[
    \(FreeQ[y + x + x\^2, _Integer]\)], "Input"],

Cell[BoxData[
    \(False\)], "Output"]
}, Open  ]],

Cell["\<\
Next I tell FreeQ to only look at level 1 and it says there are no \
Integers.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(FreeQ[y + x + x\^2, _Integer, 1]\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell["\<\
Next FreeQ returns False because the whole expression matches the pattern \
(_List).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(FreeQ[{1, 0}, _List]\)], "Input"],

Cell[BoxData[
    \(False\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "I don't provide further examples, but any combination of pattern matching \
constructs can be used with FreeQ.  Nuances of ",
  ButtonBox["pattern matching",
    ButtonData:>"Pattern-Matching",
    ButtonStyle->"Hyperlink"],
  " are discussed in another section."
}], "Text"],

Cell[CellGroupData[{

Cell["Heads Option", "Subsection"],

Cell["\<\
FreeQ has a Heads option like several other functions, and it has the default \
setting (Heads\[Rule]True).  So in the next example FreeQ checks the heads of \
subexpressions and determines that there is one with the head Plus.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(FreeQ[{{x, y}, {1 + x + x\^2, y}}, Plus]\)], "Input"],

Cell[BoxData[
    \(False\)], "Output"]
}, Open  ]],

Cell["\<\
In the next example the setting (Heads\[Rule]False) is used and FreeQ doesn't \
check the heads of subexpressions.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(FreeQ[{{x, y}, {1 + x + x\^2, y}}, Plus, 
      Heads \[Rule] False]\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Function", "Section"],

Cell["Why use pure functions?", "Text",
  FontSize->14,
  FontWeight->"Bold",
  CellTags->"Function"],

Cell["\<\
\[Bullet] If a function is used many times over it can run 15 times faster if \
it's implemented as a pure function.
\[Bullet] Programming with pure functions is often more concise.  
   For example the following line uses a pure function in Select to return \
all elements of data with a magnitude less than 50.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(data = {\(-4\), 34, \(-98\), \(-23\), 68, 
          31};\)\), "\[IndentingNewLine]", 
    \(Select[data, \ Abs[#] < 50 &]\)}], "Input"],

Cell[BoxData[
    \({\(-4\), 34, \(-23\), 31}\)], "Output"]
}, Open  ]],

Cell["\<\
The following line also returns all elements of data with a magnitude less \
than 50.  This version doesn't use pure functions. Notice the version using a \
pure function is more concise but seems cryptic until you get used to pure \
functions.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Small[x_] := Abs[x] < 50;\)\), "\[IndentingNewLine]", 
    \(Select[data, Small]\)}], "Input"],

Cell[BoxData[
    \({\(-4\), 34, \(-23\), 31}\)], "Output"]
}, Open  ]],

Cell["\<\
Before looking at examples below it might help to clear definitions from all \
global symbols with the next cell.\
\>", "Text"],

Cell[BoxData[
    \(ClearAll["\<Global`*\>"]\)], "Input"],

Cell[CellGroupData[{

Cell["Pure functions that use only one argument", "Subsection"],

Cell["\<\
The next cell defines a function (f) which returns 3 plus it's argument.\
\>", "Text"],

Cell[BoxData[
    \(f[x_] := 3 + x\)], "Input"],

Cell["\<\
In the next cell I give four different ways to define a pure function (g) \
which returns 3 plus it's first argument. The expression used to define the \
function varies depending which version is used, but as far as I can tell \
there is no meaningful difference between the different versions.
The Symbol (#) is short hand for Slot[1] and it refers to the first argument \
given to a pure function.\
\>", "Text"],

Cell[BoxData[{
    \(\(g = 3 + # &;\)\), "\n", 
    \(\(g = Function[3 + #];\)\), "\n", 
    \(\(g = Function[x, 3 + x];\)\), "\n", 
    \(\(g = Function[{x}, 3 + x];\)\)}], "Input"],

Cell["In the next cell we see f[t] returns the same thing as g[t].", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \({f[t], g[t]}\)], "Input"],

Cell[BoxData[
    \({3 + t, 3 + t}\)], "Output"]
}, Open  ]],

Cell["\<\
Functions (f) and (g) don't always do the same thing.  Function (f) is only \
defined when given one argument, but the pure function (g) is defined when \
given one or more arguments.  The pure function (g) uses the first argument \
and ignores all other arguments. \
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \({f[t1, t2], g[t1, t2]}\)], "Input"],

Cell[BoxData[
    \({f[t1, t2], 3 + t1}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
  "Pure functions that use an  ",
  Cell[BoxData[
      \(TraditionalForm\`n\^th\)]],
  " argument"
}], "Subsection"],

Cell[BoxData[
    \(ClearAll[f, g]\)], "Input"],

Cell["\<\
In the next cell I define a function (f) that takes three arguments.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(f[x_, y_, z_] := {x - y, x - z};\)\), "\[IndentingNewLine]", 
    \(f[a, b, c]\)}], "Input"],

Cell[BoxData[
    \({a - b, a - c}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell I give three ways to define a pure function that does \
essentially the same thing as (f) in the previous cell.  The FullForm of (#n) \
 is Slot[n], and we use (#2, and  #3) refer to the second and third arguments \
of a pure function. The third way of defining the pure function results in \
differnt form of storing the functions definition that the first two \
solutions, but as far as I can tell there is no meaningful difference between \
the different versions.\
\>", "Text"],

Cell[BoxData[{
    \(\(g = {#1 - #2, #1 - #3} &;\)\), "\n", 
    \(\(g = Function[{#1 - #2, #1 - #3}];\)\), "\n", 
    \(\(g = Function[{x, y, z}, {x - y, x - z}];\)\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(g[a, b, c]\)], "Input"],

Cell[BoxData[
    \({a - b, a - c}\)], "Output"]
}, Open  ]],

Cell["\<\
Notice the previous definition for (g) will complain if it's given an \
insufficient number of arguments.  Because of this you shouldn't use pure \
functions to define a function an end user will use.  However, pure functions \
are a good choice for private functions in a package since the end user will \
not be using the private functions.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(g[x, y]\)], "Input"],

Cell[BoxData[
    \(\(Function[{x, y, z}, {x - y, x - z}]\)[x, y]\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Notice it's perfectly legal for a pure function to ignore some arguments \
before the ",
  Cell[BoxData[
      \(TraditionalForm\`n\^th\)]],
  " argument.  To demonstrate this point I define (g) below which returns the \
sum of it's ",
  Cell[BoxData[
      \(TraditionalForm\`2\^nd\)]],
  " and ",
  Cell[BoxData[
      \(TraditionalForm\`4\^th\)]],
  "arguments. In this case all other arguments are ignored."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[g, x2, x4];\)\), "\[IndentingNewLine]", 
    \(\(g = #2 + #4 &;\)\), "\[IndentingNewLine]", 
    \(g[x1, x2, x3, x4, x5, x6]\)}], "Input"],

Cell[BoxData[
    \(x2 + x4\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Pure functions that use an arbitrary number of arguments", "Subsection"],

Cell[BoxData[
    \(ClearAll[f, g]\)], "Input"],

Cell["\<\
The following cell defines a function (f) that puts all it's arguments in a \
list and squares each element.  The squaring operation is mapped to each \
element because Power has the Listable attribute, but that's another subject.\
\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(f[x__] := {x}\^2\), "\[IndentingNewLine]", 
    \(f[x, y, 5, 3\/\@2]\)}], "Input"],

Cell[BoxData[
    \({x\^2, y\^2, 25, 9\/2}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell I give two ways to define a pure function that puts all its \
elements in a list and square each element.  The FullForm of ## is \
SlotSequence[1] and is used to refer to all the arguments passed to a pure \
function.  The two styles used here result in exactly the same definition for \
the function.\
\>", "Text"],

Cell[BoxData[{
    \(\(g = {##}\^2 &;\)\), "\[IndentingNewLine]", 
    \(\(g = Function[{##}\^2];\)\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(g[x, y, 5, 3\/\@2]\)], "Input"],

Cell[BoxData[
    \({x\^2, y\^2, 25, 9\/2}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Use of ##n", "Subsubsection"],

Cell[BoxData[
    \(ClearAll[f, g]\)], "Input"],

Cell["\<\
The next cell defines a pure function (g) that puts all it's arguments \
starting with the third argument in a list and squares each element. The \
FullForm of  (##3)  is SlotSequence[3] and it refers to all arguments of a \
pure function from the third argument on.  The two styles used here result in \
exactly the same definition for the function.\
\>", "Text"],

Cell[BoxData[{
    \(\(g = {##3}\^2 &;\)\), "\[IndentingNewLine]", 
    \(\(g = Function[{##3}\^2];\)\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(g[v, x, y, 5, 3\/\@2]\)], "Input"],

Cell[BoxData[
    \({y\^2, 25, 9\/2}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Earlier I demonstrated that ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " will complain if a pure function uses #3 and is given less than three \
arguments.  So it's curious that ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " doesn't complain below when (g) tries to use ##3, but is given only two \
arguments."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(g[x, y]\)], "Input"],

Cell[BoxData[
    \({}\)], "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Pure functions with one attribute", "Subsection"],

Cell[BoxData[
    \(ClearAll[f, g]\)], "Input"],

Cell["\<\
In the next cell I define a function (f) that returns True if it's argument \
is a Symbol before evaluating and otherwise returns False.  Programming this \
function is slightly tricky because evaluation is prevented in two places.  \
First we give (f) the HoldAll attribute to prevent it's argument from \
evaluating before using the definition of (f).  In addition we use \
Unevaluated[x] to prevent the argument (x) from evaluating before getting \
it's head.\
\>", "Text"],

Cell[BoxData[{
    \(\(Attributes[f] = {HoldAll};\)\), "\[IndentingNewLine]", 
    \(f[x_] := \((Head[Unevaluated[x]] === Symbol)\)\)}], "Input"],

Cell["\<\
In the next cell we see f[t] returns True even when (t) evaluates to a number \
rather than a symbol.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(t = 1.4;\)\), "\[IndentingNewLine]", 
    \({f[t], f[1.4]}\)}], "Input"],

Cell[BoxData[
    \({True, False}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell I give four ways to define a pure function (f) that does \
essentially the same thing as (f) defined above.\
\>", "Text"],

Cell[BoxData[{
    \(\(g = 
        Function[\ \ x, \ \ Head[Unevaluated[x]] === Symbol, 
          HoldAll];\)\), "\[IndentingNewLine]", 
    \(\(g = 
        Function[{x}, Head[Unevaluated[x]] === Symbol, 
          HoldAll];\)\), "\[IndentingNewLine]", 
    \(\(g = 
        Function[\ \ x, \ \ Head[Unevaluated[x]] === 
            Symbol, {HoldAll}];\)\), "\[IndentingNewLine]", 
    \(\(g = 
        Function[{x}, 
          Head[Unevaluated[x]] === Symbol, {HoldAll}];\)\)}], "Input"],

Cell["\<\
In the next cell we see (g) does the same thing as (f).  I have found useful \
applications for this pure function.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(t = 1.4;\)\), "\[IndentingNewLine]", 
    \({g[t], g[1.4]}\)}], "Input"],

Cell[BoxData[
    \({True, False}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Pure functions with multiple attributes", "Subsection"],

Cell[BoxData[
    \(ClearAll[f, g]\)], "Input"],

Cell["\<\
The next cell defines a function (f) which prevents it's arguments from \
evaluating, puts the arguments in canonical order, converts the arguments to \
strings and concatenates the sorted strings with another string.\
\>", "Text"],

Cell[BoxData[{
    \(\(Attributes[f] = {HoldAll, Orderless};\)\), "\[IndentingNewLine]", 
    \(\(f[x_, 
          y_] := \((ToString@\(Unevaluated@x\) <> "\<...\>" <> 
            ToString@\(Unevaluated@y\))\);\)\)}], "Input"],

Cell["\<\
In the next cell we see (f) in action.  You will find f[t,s] returns the same \
thing as f[s,t].\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(s = 6; t = 9;\), "\[IndentingNewLine]", 
    \(f[t, s]\)}], "Input"],

Cell[BoxData[
    \("s...t"\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell defines a pure function (g) that does essentially the same \
thing as (f) above.\
\>", "Text"],

Cell[BoxData[
    \(\(g = 
        Function[{x, y}, 
          ToString@\(Unevaluated@x\) <> "\<...\>" <> 
            ToString@\(Unevaluated@y\), {HoldAll, Orderless}];\)\)], "Input"],

Cell["In the next cell we see (g) in action.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(s = 6; t = 9;\), "\[IndentingNewLine]", 
    \(g[t, s]\)}], "Input"],

Cell[BoxData[
    \("s...t"\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Pure functions that use no arguments", "Subsection"],

Cell[BoxData[
    \(\(ClearAll[f1, f2, x];\)\)], "Input"],

Cell[TextData[{
  "(h&) is a pure function with no arguments which always returns (h). An \
occasion where this is needed is in the PolygonTessellation package available \
at ",
  ButtonBox["http://library.wolfram.com/packages/",
    ButtonData:>{
      URL[ "http://library.wolfram.com/packages/"], None},
    ButtonStyle->"Hyperlink"],
  ". This package includes a function called TessellatePolygon3D with a \
WindingRule option. The WindingRule setting should be a function that returns \
True or False. A typical setting of this option is WindingRule\[Rule]OddQ, \
but in some cases you want a test that always comes out True. In that case \
the setting WindingRule\[Rule](True &) should be used.\n\nOften times the \
ButtonFunction for buttons is a pure function with no arguments.  I give such \
an example in my section on ",
  ButtonBox["ButtonProgramming",
    ButtonData:>"Pure_Function_Example",
    ButtonStyle->"Hyperlink"],
  ".\n\nConsider f1, f2 in the next cell. Here the function f1 returns True \
no matter what argument(s) it has, and f2 returns a random number between 0 \
and 1 no matter what argument(s) it has."
}], "Text",
  CellTags->"No_Argument_Functions"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(f1 = True &;\)\), "\[IndentingNewLine]", 
    \(\(f2 = Random[] &;\)\), "\[IndentingNewLine]", 
    \({f1[x], f1[24.5], f1[4], f1[1, 2, 3], f2[x], f2[10^7], 
      f2[1, 2, 3]}\)}], "Input"],

Cell[BoxData[
    \({True, True, True, True, 0.8913304573631929`, 0.1930429850356227`, 
      0.7352159650313722`}\)], "Output"]
}, Open  ]],

Cell["\<\
Keep in mind (f1) isn't True it's a function that always returns True and \
that explains why the first element of the next list is False.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \({f1 === True, f1[] === True, f1[x] === True}\)], "Input"],

Cell[BoxData[
    \({False, True, True}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Use of  #0  (rarely useful)", "Subsection"],

Cell[BoxData[
    \(\(ClearAll[f];\)\)], "Input"],

Cell["\<\
When used in a pure function (#0) represents the pure function itself.  I \
can't imagine when this would be useful, but I demonstrate it in with the \
pure function (f) in the next cell.  This pure function prints (The second \
argument is ...) and returns the entire pure function as an expression.\
\>", "Text"],

Cell[BoxData[
    \(\(f = \((\((Print["\<The second argument = \>" <> 
                  ToString[#2]]; #0)\) &)\);\)\)], "Input"],

Cell["In the next cell we see (f) in action.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(f[wx1, wx2, wx3, wx4]\)], "Input"],

Cell[BoxData[
    \("The second argument = wx2"\)], "Print"],

Cell[BoxData[
    \(\((Print["The second argument = " <> ToString[#2]]; #0)\) &\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[TextData[{
  "Also read  \"Further Examples\" at the end of the  ",
  ButtonBox["Function",
    ButtonStyle->"RefGuideLink"],
  "  documentation in the Help Browser."
}], "Subsection",
  FontSize->12]
}, Closed]],

Cell[CellGroupData[{

Cell["HoldAll, HoldFirst, HoldRest", "Section"],

Cell["\<\
If a function (f) has the HoldAll attribute (f) does it's work before it's \
arguments evaluate.
It's easy to see why Clear must have the HoldAll attribute.  Consider the \
cell where values are assigned to (x,y,z).\
\>", "Text",
  CellTags->{"Hold", "HoldAll"}],

Cell[BoxData[{
    \(\(x = 2;\)\), "\[IndentingNewLine]", 
    \(\(y = 3;\)\), "\[IndentingNewLine]", 
    \(\(z = 6;\)\)}], "Input"],

Cell["\<\
If Clear didn't have the HoldAll attribute the following would evaluate to \
Clear[2,3,6] which is nonsense.\
\>", "Text"],

Cell[BoxData[
    \(Clear[x, y, z]\)], "Input"],

Cell[TextData[{
  "The example in the next cell is from Power Programming With ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " by David Wagner."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(ClearAll[f, g]\), "\[IndentingNewLine]", 
    \(\(SetAttributes[f, HoldAll];\)\), "\[IndentingNewLine]", 
    \(f[x_] := g[x]\), "\[IndentingNewLine]", 
    \(Trace[f[2 + 2]]\)}], "Input"],

Cell[BoxData[
    RowBox[{"{", 
      RowBox[{
        TagBox[\(f[2 + 2]\),
          HoldForm], ",", 
        TagBox[\(g[2 + 2]\),
          HoldForm], ",", 
        RowBox[{"{", 
          RowBox[{
            TagBox[\(2 + 2\),
              HoldForm], ",", 
            TagBox["4",
              HoldForm]}], "}"}], ",", 
        TagBox[\(g[4]\),
          HoldForm]}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
In the example above the unevaluated sum (2+2) is substituted for (x) on the \
right side of the definition  f[x_]:=g[x].  The sum is only evaluated when \
it's time for (g) to evaluate it's arguments.  If (g) also held it's \
arguments the sum wouldn't evaluate at all.

The FullForm of (x=2) is Set[x,2].  Set has the HoldFirst attribute and it's \
important that is does.  If Set didn't hold it's first argument the second \
assignment in the next cell would evaluate to (2=5) which is nonsense.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(x = 2;\)\), "\[IndentingNewLine]", 
    \(x = 5\)}], "Input"],

Cell[BoxData[
    \(5\)], "Output"]
}, Open  ]],

Cell["\<\
Also it's easy to see why the symbol If has the attribute HoldRest.  Whe \
given an expression such as  
If[ Test, T, F]  we want to only evaluate 'T' when the Test is True, and we \
only want to evaluate 'F' when the Test is False.  If the Test is neither \
True or False we want neither 'T' or 'F' to evaluate. \
\>", "Text"],

Cell[CellGroupData[{

Cell["\<\
Built-in Symbols with attributes HoldAll, HoldFirst, HoldRest\
\>", "Subsection"],

Cell["The next cell makes a list of all built-in symbols.", "Text"],

Cell[BoxData[
    \(\(symbs = 
        Cases[ToExpression /@ Names["\<System`*\>"], _Symbol];\)\)], "Input"],

Cell["\<\
The next cell gives a list of all built-in symbols with the HoldAll \
attribute.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Select[symbs, MemberQ[Attributes[#], HoldAll] &]\)], "Input"],

Cell[BoxData[
    \({AbortProtect, Alias, And, Attributes, Block, Check, CheckAbort, 
      CheckAll, Clear, ClearAll, Compile, CompiledFunction, 
      CompoundExpression, Condition, ConsoleMessage, ConsolePrint, 
      ContourPlot, DefaultValues, Definition, DensityPlot, Dialog, Do, 
      DownValues, EditDefinition, Exists, FileName, FindMinimum, FindRoot, 
      For, ForAll, FormatValues, FullDefinition, Function, 
      FunctionInterpolation, Hold, HoldForm, HoldPattern, Information, 
      Literal, MatchLocalNameQ, MemoryConstrained, Messages, Module, Nand, 
      NIntegrate, Nor, NProduct, NSum, NValues, Off, On, Or, OwnValues, 
      ParametricPlot, ParametricPlot3D, Play, Plot, Plot3D, Product, Protect, 
      Remove, SampledSoundFunction, SetDelayed, StackBegin, StackComplete, 
      StackInhibit, SubValues, Sum, Table, TagSet, TagSetDelayed, TagUnset, 
      TimeConstrained, Timing, Trace, TraceDialog, TracePrint, TraceScan, 
      UnAlias, Unprotect, UpSetDelayed, UpValues, ValueQ, Which, While, 
      With, $ConditionHold, $Failed}\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell gives a list of all built-in symbols with the HoldFirst \
attribute.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Select[symbs, MemberQ[Attributes[#], HoldFirst] &]\)], "Input"],

Cell[BoxData[
    \({AddTo, AppendTo, Catch, ClearAttributes, Context, Debug, Decrement, 
      DivideBy, Increment, Message, MessageName, MessagePacket, Pattern, 
      PreDecrement, PreIncrement, PrependTo, RuleCondition, Set, 
      SetAttributes, Stack, SubtractFrom, TimesBy, Unset, UpSet}\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell gives a list of all built-in symbols with the HoldRest \
attribute.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Select[symbs, MemberQ[Attributes[#], HoldRest] &]\)], "Input"],

Cell[BoxData[
    \({DumpSave, If, PatternTest, RuleDelayed, Save, Switch}\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["HoldAllComplete", "Section"],

Cell["\<\
Consider the following expression wrapped in Hold.  Hold has the HoldAll \
attribute, but we can still force evaluation of arguments and sequences are \
automatically spliced together.  However, nested layers of Plus aren't \
flattened, and the arguments of Plus aren't sorted.\
\>", "Text",
  CellTags->"HoldAllComplete"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(f[x_] := x^2;\)\), "\[IndentingNewLine]", 
    \(Hold[Evaluate[2 + 3^2], Sequence[v, w], Sequence[x, y], 
      Plus[d, s, Plus[z, a, Plus[u, u]]], f[5]]\)}], "Input"],

Cell[BoxData[
    \(Hold[11, v, w, x, y, d + s + \((z + a + \((u + u)\))\), 
      f[5]]\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell we use HoldAllComplete.  In this case Evaluate is ignored \
and sequences are not spliced together.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(HoldComplete[\[IndentingNewLine]Evaluate[2 + 3^2], Sequence[v, w], 
      Sequence[x, y], Plus[d, s, Plus[z, a, Plus[u, u]]], 
      f[5]\[IndentingNewLine]]\)], "Input"],

Cell[BoxData[
    \(HoldComplete[Evaluate[2 + 3\^2], Sequence[v, w], Sequence[x, y], 
      d + s + \((z + a + \((u + u)\))\), f[5]]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Built-in Symbols with the HoldAllComplete attribute", "Subsection"],

Cell["The next cell makes a list of all built-in symbols.", "Text"],

Cell[BoxData[
    \(\(symbs = 
        Cases[ToExpression /@ Names["\<System`*\>"], _Symbol];\)\)], "Input"],

Cell["\<\
Very few buit-in symbols have the HoldAllComplete attribute and they are all \
listed below.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Select[symbs, MemberQ[Attributes[#], HoldAllComplete] &]\)], "Input"],

Cell[BoxData[
    \({HoldComplete, InterpretationBox, MakeBoxes, Parenthesize, 
      Unevaluated}\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["HoldForm", "Section"],

Cell["The next line gives a sum of integers squared.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Sum[\(HoldForm[#^2] &\)[i], {i, 1, 9}]\)], "Input"],

Cell[BoxData[
    RowBox[{
      TagBox[\(1\^2\),
        HoldForm], "+", 
      TagBox[\(2\^2\),
        HoldForm], "+", 
      TagBox[\(3\^2\),
        HoldForm], "+", 
      TagBox[\(4\^2\),
        HoldForm], "+", 
      TagBox[\(5\^2\),
        HoldForm], "+", 
      TagBox[\(6\^2\),
        HoldForm], "+", 
      TagBox[\(7\^2\),
        HoldForm], "+", 
      TagBox[\(8\^2\),
        HoldForm], "+", 
      TagBox[\(9\^2\),
        HoldForm]}]], "Output"]
}, Open  ]],

Cell["We can use ReleaseHold to complete the calculation.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(ReleaseHold[%]\)], "Input"],

Cell[BoxData[
    \(285\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["HoldPattern", "Section"],

Cell["\<\
You might be very surprised that the following evaluates to True!\
\>", "Text",
  CellTags->"HoldPattern"],

Cell[CellGroupData[{

Cell[BoxData[
    \(MatchQ[And[x, y, z], Times[p__]]\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell["\<\
When the cell above is evaluated  Times[p__] evaluates to (p__) before the \
kernel checks to see if the pattern matches.  MatchQ then determines if \
And[x,y,z] matches the pattern (p__) and it does because And[x,y,z] is itself \
a sequence of one.

Now the next cell also evaluates to True because both ( And[p__] ) and ( \
Times[p__] ) evaluate to ( p__ ).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Times[p__] === And[p__]\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell["\<\
We can prevent patterns in the examples above from evaluating by wrapping \
them with HoldPattern as in the following lines.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(MatchQ[And[x, y, z], HoldPattern[Times[p__]]]\)], "Input"],

Cell[BoxData[
    \(False\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(HoldPattern[Times[p__]] === HoldPattern[And[p__]]\)], "Input"],

Cell[BoxData[
    \(False\)], "Output"]
}, Open  ]],

Cell["\<\
With the next line one might expect to have the head (And) changed to (List), \
but it doesn't work.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[x, y, z, prod, a];\)\), "\[IndentingNewLine]", 
    \(And[x, y, z] /. And[x__] -> List[x]\)}], "Input"],

Cell[BoxData[
    \({x && y && z}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell HoldPattern is used to ensure the head (And) is changed to \
(List).  The two examples that follow have the same effect, but the use of \
HoldPattern isn't needed.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(And[x, y, z] /. HoldPattern[And[a__]] -> List[a]\)], "Input"],

Cell[BoxData[
    \({x, y, z}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(And[x, y, z] /. And -> List\)], "Input"],

Cell[BoxData[
    \({x, y, z}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(And[x, y, z] /. And[a_, b___] -> List[a, b]\)], "Input"],

Cell[BoxData[
    \({x, y, z}\)], "Output"]
}, Open  ]],

Cell["\<\
HoldPattern wasn't needed in the last example because ( And[a_,b__] ) \
evaluates to itself.\
\>", "Text"],

Cell["\<\
Sometimes we need to use HoldPattern with care.  Suppose we wanted to replace \
a product of terms to the (1/3) power with (prod).  We can attempt to do this \
on (expr) below.\
\>", "Text"],

Cell[BoxData[{
    \(\(Clear[x, y, z, expr, prod];\)\), "\n", 
    \(\(expr = \((x*y*z)\)\^\(1/3\) + \((x + y + z)\)\^\(1/3\);\)\)}], "Input"],

Cell[TextData[{
  "In the next line HoldPattern isn't used, and ",
  Cell[BoxData[
      \(TraditionalForm\`Times[__]\^\(1/3\)\)]],
  " evaluates to ",
  Cell[BoxData[
      \(TraditionalForm\`\((__\^\(1/3\))\)\)]],
  ".  Then both terms of expr match the evaluated pattern.  We then get \
(prod+prod)\[LongRightArrow](2 prod)."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(expr /. Times[__]\^\(1/3\) -> prod\)], "Input"],

Cell[BoxData[
    \(2\ prod\)], "Output"]
}, Open  ]],

Cell["\<\
Now if the entire pattern is wrapped in HoldPattern, the exponent in the \
pattern is held in the form 
(Times[1,Power[3,-1]] )  instead of  ( Rational[1,3] ), and neither term \
matches the pattern.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(expr /. HoldPattern[\ \((\ Times[__])\)\^\(1/3\)\ ] -> prod\)], "Input"],

Cell[BoxData[
    \(\((x\ y\ z)\)\^\(1/3\) + \((x + y + z)\)\^\(1/3\)\)], "Output"]
}, Open  ]],

Cell["\<\
The desired result is given when the expression HoldPattern[Times[__]] is \
raised to the (1/3) power.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(expr /. \((HoldPattern[Times[__]])\)\^\(1/3\) -> prod\)], "Input"],

Cell[BoxData[
    \(prod + \((x + y + z)\)\^\(1/3\)\)], "Output"]
}, Open  ]],

Cell["\<\
An easier way to get the desired result is to use  (_Times)^(1/3)  as a \
pattern.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(expr /. _Times\^\(1/3\) -> prod\)], "Input"],

Cell[BoxData[
    \(prod + \((x + y + z)\)\^\(1/3\)\)], "Output"]
}, Open  ]],

Cell["\<\
Alan Hayes explained that HoldPattern[_] is also needed to ensure that the \
rule below is used.  Similar to the other examples HoldPattern is needed \
because Dt[x_] evaluates to something other than itself.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[a, b];\)\), "\n", 
    \(a\^2 + 2  a + Dt[a] /. Dt[x_] :> 1\)}], "Input"],

Cell[BoxData[
    \(2\ a + a\^2 + Dt[a]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(a\^2 + 2  a + Dt[a] /. HoldPattern[Dt[x_]] :> 1\)], "Input"],

Cell[BoxData[
    \(1 + 2\ a + a\^2\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Hyperlinks", "Section"],

Cell[CellGroupData[{

Cell["How to make a hyperlink to a part of the Help Browser", "Subsection",
  CellTags->"Hyperlinks"],

Cell[TextData[{
  "Here is how you make hyperlinks to some portion of the Help Browser with \
",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " under MS-Windows.   The procedure should be similar on other platforms.\n\
\nStep 1:\nFind the part of the Help Browser that you want the hyperlink to \
jump to.  Don't use the MasterIndex radio button, because other radio buttons \
can access the same stuff, and I don't know how to make a link to the \
MasterIndex.  Once you have the right help page displayed make a note of the \
radio button selected, and the title of the Help Browser topic (to the right \
of the GoTo button).\n\nStep 2:\nType the title of the Help Browser topic in \
a cell, and select the topic.  It doesn't matter what type of cell the \
hyperlink is in (Text, Section, Title, etc.), but one doesn't normally \
include a hyperlink in an Input cell.\n\nStep 3:\nMake the menu selection \
(Input \[RightTriangle] Create Button), then from the pull down menu select \
the radio button you want to link to.  The choices listed should include:\n   \
 MainBookLink\n    AddOnsLink\n    RefGuideLink\n    Getting StartedLink\n    \
OtherInformationLink\nThe selection (RefGuideLink) reefers to the (Built-in \
Functions) button in the Help Browser.  The other selections refer to a Help \
Browser radio button by the same name.  After making the appropriate menu \
selection you should have your hyperlink to the Help Browser."
}], "Text"],

Cell["\<\
As an example we make a hyperlink to section 3.2.4 of the Main Book portion \
of the Help Browser.\
\>", "Text"],

Cell[TextData[{
  "A hyperlink to ",
  ButtonBox["3.2.4",
    ButtonStyle->"MainBookLink"],
  " in the Help Browser"
}], "Text",
  CellFrame->False],

Cell[TextData[{
  "You simply type in the appropriate text, select the cell bracket, and make \
the menu selection ",
  Cell[BoxData[
      \(TraditionalForm\`Format\  \[RightTriangle] Style \[RightTriangle] 
        Text\)]],
  ".  Next select \"3.2.4\" and make the menu selection  ",
  Cell[BoxData[
      \(TraditionalForm\`Input\  \[RightTriangle] 
        CreateButton\  \[RightTriangle] MainBookLink\)]],
  ".  The text \"3.2.4\" is now a hyperlink to section 3.2.4 of the main \
book."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
How to make a hyperlink to a part of the Help Browser, and control the way it \
looks.\
\>", "Subsection"],

Cell["\<\
Suppose you want to make the hyperlink in the next cell.  In this case the \
hyperlink will jump to section 3.2.4 of the Main Book, but the text for the \
hyperlink isn't  \"3.2.4\" as when the procedure from above is used.\
\>", "Text"],

Cell[TextData[{
  "A hyperlink to ",
  ButtonBox["Number theory functions",
    ButtonData:>"3.2.4",
    ButtonStyle->"MainBookLink"],
  " in the Help Browser"
}], "Text"],

Cell["\<\
Steps 1-3:
Make an hyperlink to section 3.2.4 of the Main Book using the procedure \
above.  That will give you the hyperlink and text in the next cell.\
\>", "Text"],

Cell[TextData[{
  "A hyperlink to ",
  ButtonBox["3.2.4",
    ButtonStyle->"MainBookLink"],
  " in the HelpBrowser"
}], "Text"],

Cell["\<\
Step 4:
Put the insertion point (place where keyboard input would go) in the cell \
containing the hyperlink you are making and make the menu selection (Format \
\[RightTriangle] Show Expression) and you get the full expression of the cell \
as shown below.\
\>", "Text"],

Cell[RawData["\<\
Cell[TextData[{
  \"A hyperlink to \",
  ButtonBox[\"3.2.4\",
    ButtonStyle->\"MainBookLink\"],
  \" in the Help Browser\"
}], \"Commentary\"]\
\>"], "Text"],

Cell[TextData[{
  "Step 5:\nEdit the cell expression to look like the cell below.  Notice the \
cell is changed to include ",
  StyleBox["ButtonData\[Rule]\"3.2.4\"",
    FontColor->RGBColor[0.839857, 0.0273442, 0.00781262],
    FontVariations->{"CompatibilityType"->0}],
  "."
}], "Text"],

Cell[RawData["\<\
Cell[TextData[{
  \"A hyperlink to \",
  ButtonBox[\"3.2.4\",ButtonData->\"3.2.4\",
    ButtonStyle->\"MainBookLink\"],
  \" in the HelpBrowser\"
}], \"Commentary\"]\
\>"], "Text"],

Cell["\<\
Step 6:
Make the menu selection (Format \[RightTriangle] Show Expression) and the \
cell looks the same as it did before.  Now that you use the ButtonData option \
of ButtonBox you can change what the hyperlink looks like without changing \
what it does!

Step 7:
Use the keyboard arrows (not the mouse) to move the insertion point into the \
text for the hyperlink, and change the text of the hyperlink from \"3.2.4\" \
to \"Number theory functions\".  You should then have the cell below.\
\>", "Text"],

Cell[TextData[{
  "A hyperlink to ",
  ButtonBox["Number theory functions",
    ButtonData:>"3.2.4",
    ButtonStyle->"MainBookLink"],
  " in the Help Browser"
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
How to make a hyperlink to a specific cell in the Help Browser.\
\>", "Subsection"],

Cell[TextData[{
  "The entire contents of The Mathematica Book is included in the Help \
Browser, and some hyperlinks in the Help Browser take you to specific \
paragraphs (cells) in the book. How can you make your own hyperlinks that do \
this?  I will explain how you can make \nthis button \[LongRightArrow] ",
  ButtonBox["Options in Show",
    ButtonData:>{"1.9.4", "4.15"},
    ButtonStyle->"MainBookLink"],
  " \[LongLeftArrow].\n\nIf you click on the above button you will see that \
it takes you to a specific paragraph in The ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " Book, and the top of the Help Browser will show that you are in section \
1.9.4.  Now select the paragraph in the Help Browser that the button jumped \
to, and make the menu selection (Format \[RightTriangle] ShowExpression).  \
Scroll to the bottom of the expression for this cell, and you should see that \
the cell expression has option \nCellTags \
\[RuleDelayed]{\"S1.9.4\",\"4.15\"}.  You then need to make a button with the \
options \n       ButtonData\[RuleDelayed]{\"1.9.4\",\"4.15\"}, \
ButtonStyle->\"MainBookLink\".  \nThe setting of the ButtonData option is the \
same as the CellTags setting except the 'S' in the first string was removed. \
The same button is shown below, and you can Show the expression of this cell \
to see what it should look like.\n\nNow to make the desired button type '",
  StyleBox["A button to Options in Show in the Help Browser",
    FontColor->RGBColor[0.8, 0, 0]],
  "' in a text cell.  Then select '",
  StyleBox["Options in Show",
    FontColor->RGBColor[0.8, 0, 0]],
  "', and make the menu selection (Input \[RightTriangle] Create Button \
\[RightTriangle] Custom). Select 'Main Book Link' for ButtonStyle, check the \
box for ButtonData and enter ",
  StyleBox["{\"1.9.4\",\"4.15\"}",
    FontColor->RGBColor[0.8, 0, 0]],
  " in the box below the ButtonData check. Next select OK and you should have \
the cell below."
}], "Text"],

Cell[TextData[{
  "A button to ",
  ButtonBox["Options in Show",
    ButtonData:>{"1.9.4", "4.15"},
    ButtonStyle->"MainBookLink"],
  " in the Help Browser."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["How to make a hyperlink to a web page ", "Subsection"],

Cell[TextData[{
  "This is how you make a hyperlink to a web page using ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " under Windows 95/98.  The procedure should be similar under other \
operating systems.\n\nStep 1:\nIn a text cell type the text that will be a \
link to a web page.\n\nStep 2:\nSelect the text that will be the hyperlink.\n\
\nStep 3:\nMake the menu selection (Input \[RightTriangle] Create Hyperlink).\
\n\nStep 4:\nA dialog box will come up.  Type the URL of the web page in the \
blank space next to \"Other notebook or URL\".  Click on the OK button and \
the selected text is a hyperlink to the URL you entered."
}], "Text"],

Cell[TextData[{
  "As an example I give a hyperlink to the Wolfram Research ",
  ButtonBox["web page",
    ButtonData:>{
      URL[ "http://www.wolfram.com"], None},
    ButtonStyle->"Hyperlink"],
  "."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["How to make a hyperlink that launches an email message", "Subsection"],

Cell["\<\
My computer uses Windows 98 and has Microsoft Outlook installed.  With my \
configuration I can follow the steps below to make a button which launches an \
email to message to (ersektr@navair.navy.mil).  I suspect the steps are \
similar with other confugurations.

Step 1:
In a text cell I type the text that I want to use for the hyperlink.

Step 2:
Select that portion of the above text cell which will be the hyperlink.

Step 3:
Make the menu selection (Input | Create Hyperlink).

Step 4:
In the field for \"Other Notebook or URL\" type
   mailto:ersektr@navair.navy.mil

Step 5:
Click on OK and the text that was selected is now a button that launches an \
email to 
(ersektr@navair.navy.mil)

You might also like to know that the evaluating the next input cell will also \
launch an email message to 
   ersektr@navair.navy.mil.\
\>", "Text",
  CellTags->"Email"],

Cell[BoxData[
    StyleBox[\(FrontEndExecute[{FrontEnd`NotebookLocate[{URL["\<mailto:\
ersektr@navair.navy.mil\>"], None}]}]\),
      FormatType->StandardForm,
      FontFamily->"Arial",
      FontSize->10]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Still More", "Subsection"],

Cell[TextData[{
  "If you still don't see what you're looking try these links to ",
  ButtonBox["Button Styles",
    ButtonData:>"ButtonStyles",
    ButtonStyle->"Hyperlink"],
  " and ",
  ButtonBox["Button Programming",
    ButtonData:>"ButtonProgramming",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Inner", "Section"],

Cell[TextData[{
  "Inner is a generalization of Dot in that other functions can be used in \
place of Times and Plus. In the next two cells we see ",
  StyleBox["Inner[Times, list1, list2, Plus]",
    FontVariations->{"CompatibilityType"->0}],
  " is equivalent to  Dot[list1, list2] .  Before demonstrating Dot I clear \
the values from any symbols."
}], "Text",
  CellTags->"Inner"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(Dot[{a, b, c}, {x, y, z}]\)}], "Input"],

Cell[BoxData[
    \(a\ x + b\ y + c\ z\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Inner[Times, {a, b, c}, {x, y, z}, Plus]\)], "Input"],

Cell[BoxData[
    \(a\ x + b\ y + c\ z\)], "Output"]
}, Open  ]],

Cell["The next cell shows a generic application of Inner. ", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Inner[f, {a, b, c}, {x, y, z}, g]\)], "Input"],

Cell[BoxData[
    \(g[f[a, x], f[b, y], f[c, z]]\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell we see that when Inner is given only three arguments Plus is \
used in place of a fourth argument.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Inner[f, {a, b, c}, {x, y, z}]\)], "Input"],

Cell[BoxData[
    \(f[a, x] + f[b, y] + f[c, z]\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell we see Inner can handle things other than lists. Inner only \
requires that the objects have the same Head and compatible dimensions.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Inner[f, h[a, b, c], h[x, y, z], g]\)], "Input"],

Cell[BoxData[
    \(g[f[a, x], f[b, y], f[c, z]]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Inner product with Matrices and Tensors", "Subsection"],

Cell[TextData[{
  "In the section on ",
  ButtonBox["Dot",
    ButtonData:>"Dot",
    ButtonStyle->"Hyperlink"],
  " we saw that Dot can be used on lists, matrices and tensors. Inner does \
the same thing with Lists, matrices and tensors except other functions can be \
used in place of Times and Plus."
}], "Text"],

Cell[TextData[{
  "In the next cell (A) and (B) are matrices and ",
  Cell[BoxData[
      \(TraditionalForm\`Inner[Times, A, B, Plus]\)]],
  " is the same as ",
  Cell[BoxData[
      \(TraditionalForm\`Dot[A, B]\)]],
  ". "
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(A = {{a1, a2}, {b1, b2}};\)\), "\[IndentingNewLine]", 
    \(\(\(B = {{x1, x2, x3}, {y1, y2, y3}};\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(Inner[Times, A, B, Plus] === Dot[A, B]\)}], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "In the next cell we evaluate  ",
  Cell[BoxData[
      \(TraditionalForm\`Inner[f, A, B, g]\)]],
  "  and we get somthing like matrix multiplication except (f) is used in \
place of multiplication, and (g) is used in place of addition. "
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Inner[f, A, B, g]\)], "Input"],

Cell[BoxData[
    \({{g[f[a1, x1], f[a2, y1]], g[f[a1, x2], f[a2, y2]], 
        g[f[a1, x3], f[a2, y3]]}, {g[f[b1, x1], f[b2, y1]], 
        g[f[b1, x2], f[b2, y2]], g[f[b1, x3], f[b2, y3]]}}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "I don't give examples of using Inner on tensors, but I think you will find \
it's very much like the ",
  ButtonBox["Dot",
    ButtonData:>"Dot",
    ButtonStyle->"Hyperlink"],
  " product of tensors."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
  "Giving Inner a ",
  Cell[BoxData[
      \(TraditionalForm\`5\^th\)]],
  " argument"
}], "Subsection"],

Cell[TextData[{
  "In the next example Inner is given (1) as a fifth argument and, (at least \
in this example) Inner[Times,A,B,Plus,1] is equivalent to ",
  Cell[BoxData[
      \(TraditionalForm\`Dot[Transpose[A], B]\)]],
  ". "
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(A = {{a1, a2}, {b1, b2}};\)\), "\[IndentingNewLine]", 
    \(\(\(B = {{x1, x2, x3}, {y1, y2, y3}};\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(Inner[Times, A, B, Plus, 1] === Dot[Transpose[A], B]\)}], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell["\<\
The next example shows that (at least in this example) the default value of \
the fifth argument is 2.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Inner[f, A, B, g] === Inner[f, A, B, g, 2]\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Insert", "Section"],

Cell["Consider the list of ordered pairs (lst) below.", "Text",
  CellTags->"Insert"],

Cell[BoxData[{
    \(\(Clear["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(\(lst = {{x1, y1}, {x2, y2}, {x3, y3}, {x4, y4}, {x5, 
            y5}};\)\)}], "Input"],

Cell[TextData[{
  "Now suppose you want to insert ",
  StyleBox["{a1,b1},{a2,b2},{a3,b3}", "Input"],
  "\nbetween the third and fourth ordered pairs. The line below does the \
trick nicely."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Insert[lst, Unevaluated[Sequence @@ {{a1, b1}, {a2, b2}, {a3, b3}}], 
      4]\)], "Input"],

Cell[BoxData[
    \({{x1, y1}, {x2, y2}, {x3, y3}, {a1, b1}, {a2, b2}, {a3, b3}, {x4, 
        y4}, {x5, y5}}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Here Unevaluated is needed since Insert doesn't have a Hold attribute, and \
we don't want ",
  StyleBox["Sequence@@{...}",
    FontFamily->"Courier",
    FontWeight->"Bold"],
  " to evaluate until after Insert does it's job.  The use of ",
  StyleBox["(Sequence@@)",
    FontFamily->"Courier",
    FontWeight->"Bold"],
  " simply strips the head List from the list of ordered pairs."
}], "Text"],

Cell[TextData[{
  "Notice you can use ",
  StyleBox["Insert[expr, elem, {{i1,j1, ...},{i2,j2, ...}, ...}]",
    FontFamily->"Courier",
    FontWeight->"Bold"],
  "  to inset an expression at more than one position, but this is very slow \
if you are inserting at lots (>100) of positions."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Level", "Section"],

Cell[TextData[{
  "Lots of examples using Level can be found in the discussion of ",
  ButtonBox["Level Specification",
    ButtonData:>"Level Specification",
    ButtonStyle->"Hyperlink"],
  ". Below I explain some of the subtle details. \n\nIn the next cell we get \
a list of all subexpressions at level 2 in expr.  Notice x1 and  x7  each \
appear twice in expr and twice in the result returned by Level."
}], "Text",
  CellTags->"Level"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(\(expr = {g[x1], {x1, x2}, {x3, x4}, g[x6], \(h[1]\)[x7], 
          g[x7]};\)\), "\[IndentingNewLine]", 
    \(Level[expr, {2}]\)}], "Input"],

Cell[BoxData[
    \({x1, x1, x2, x3, x4, x6, x7, x7}\)], "Output"]
}, Open  ]],

Cell["\<\
It seems Level gives a result such that the elements are sorted according to \
their position in the original expression.  This is demonstrated in the next \
cell where a sorted list of positions is used to get the same result we got \
above and the positions are in canonical order.  Notice each list of \
positions has length 2 and this is what we expect since we asked for all \
expressions at level 2.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(posn = 
        Sort[{{1, 1}, {2, 1}, {2, 2}, {3, 1}, {3, 2}, {4, 1}, {5, 1}, {6, 
              1}}];\)\), "\n", 
    \(Extract[expr, posn]\)}], "Input"],

Cell[BoxData[
    \({x1, x1, x2, x3, x4, x6, x7, x7}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Heads Option", "Subsection"],

Cell["\<\
By default Level uses the setting (Heads\[Rule]False).  In the next cell we \
use (Heads\[Rule]True) and get the heads at level 2.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Level[expr, {2}, Heads \[Rule] True]\)], "Input"],

Cell[BoxData[
    \({g, x1, List, x1, x2, List, x3, x4, g, x6, h[1], x7, g, x7}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Using the third argument in Level", "Subsection"],

Cell["\<\
Finally Level can be given a third argument that can be applied to the list \
returned.  To demonstrate this feature consider the next cell which gives a \
list of all subexpressions at level 3 and deeper.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(demo = 
        x + Cos[\(\[Pi] \@\( 2 + x/3\)\)\/3] + 
          Sin[\(\[Pi] \@ x\)\/6];\)\), "\[IndentingNewLine]", 
    \(Level[demo, {3, \[Infinity]}]\)}], "Input"],

Cell[BoxData[
    \({1\/3, \[Pi], 2, 1\/3, x, x\/3, 2 + x\/3, 1\/2, \@\(2 + x\/3\), 
      1\/6, \[Pi], x, 1\/2, \@x}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell Level returns the sum of the elements we got from the \
previous cell.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Level[demo, {3, \[Infinity]}, Plus]\)], "Input"],

Cell[BoxData[
    \(35\/6 + 2\ \[Pi] + \@\(2 + x\/3\) + \@x + \(8\ x\)\/3\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Level Specification", "Section"],

Cell[TextData[{
  "The concept of level specification is explained in The Mathematica Book \
(Sections ",
  ButtonBox["2.1.7",
    ButtonData:>{"2.1.7"},
    ButtonStyle->"MainBookLink"],
  ", and ",
  ButtonBox["A.3.6",
    ButtonData:>{"A.3.6"},
    ButtonStyle->"MainBookLink"],
  "), and is explained further here.  The \"level\" of an expression is \
fundamental to an understanding of level specification.  Level 1 of an \
expression is all subexpressions that can be accessed by giving Part a single \
integer position (e.g.   expr[[2]]).  Level 2 of an expression is all \
subexpressions that can be accessed by giving Part two integers to specify \
the position (e.g.    expr[[2,3]]).  The parts of an expression at level (n) \
can be accessed by giving Part a sequence of (n) integers.  Level 0 of an \
expression is the expression itself.  As indicated by the usage message for \
Level (below) the second argument of Level is a level specification.  In the \
cells that follow Level[demo,_] will be used to explore the different \
variations of level specification."
}], "Text",
  CellTags->"Level Specification"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?Level\)\)], "Input"],

Cell[BoxData[
    RowBox[{"\<\"Level[expr, levelspec] gives a list of all subexpressions of \
expr on levels specified by levelspec. Level[expr, levelspec, f] applies f to \
the list of subexpressions.\"\>", " ", 
      ButtonBox[
        StyleBox["More\[Ellipsis]",
          "SR"],
        ButtonData:>"Level",
        Active->True,
        ButtonStyle->"RefGuideLink"]}]], "Print",
  CellTags->"Info3242392684-5465879"]
}, Open  ]],

Cell[BoxData[{
    \(\(Clear[x];\)\), "\[IndentingNewLine]", 
    \(\(demo = 
        x + Cos[\(\[Pi] \@\( 2 + 1/x\)\)\/3] + 
          Sin[\(\[Pi] \@ x\)\/6];\)\)}], "Input"],

Cell[TextData[{
  "The functions (Apply, Cases, Count, DeleteCases, FreeQ, Level, Map, \
MapIndexed, MemberQ, Position, Replace, Scan) can  use level specification \
with the same conventions described below.  Several examples of using level \
specification are given in the discussion of ",
  ButtonBox["Map",
    ButtonData:>"Map",
    ButtonStyle->"Hyperlink"],
  " in addition to those in this discussion of Level.  Each of these commands \
also have the option Heads.  The Heads option can be True or False and \
controls whether the command should look at the heads of subexpressions."
}], "Text"],

Cell[CellGroupData[{

Cell["A positive integer for a level specification", "Subsection"],

Cell["\<\
When (levelspec) in Level[expr,levelspec] is an integer (n) a list of all \
subexpressions of (expr) at all levels from 1 through (n) is returned.  In \
the cell below Level is used to get a list of all subexpressions of demo at \
level 1.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Level[demo, 1]\)], "Input"],

Cell[BoxData[
    \({x, Cos[1\/3\ \[Pi]\ \@\(2 + 1\/x\)], 
      Sin[\(\[Pi]\ \@x\)\/6]}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next line Level[demo, 2] returns a list of all subexpressions at \
levels 1 through 2.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Level[demo, 2]\)], "Input"],

Cell[BoxData[
    \({x, 1\/3\ \[Pi]\ \@\(2 + 1\/x\), 
      Cos[1\/3\ \[Pi]\ \@\(2 + 1\/x\)], \(\[Pi]\ \@x\)\/6, 
      Sin[\(\[Pi]\ \@x\)\/6]}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["A list of one positive integer for a level specification", "Subsection"],

Cell["\<\
If the level specification given to Level is a list containing one positive \
integer, then only subexpressions at the level in the list are returned.  In \
the next cell Level gives a list of all subexpressions at level 2.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Level[demo, {2}]\)], "Input"],

Cell[BoxData[
    \({1\/3\ \[Pi]\ \@\(2 + 1\/x\), \(\[Pi]\ \@x\)\/6}\)], "Output"]
}, Open  ]],

Cell["\<\
A level specification deeper than the expression can be given.  When Level \
gets such a level specification it returns an empty list as in the following \
line.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Level[demo, {25}]\)], "Input"],

Cell[BoxData[
    \({}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["A list of two positive integers as a level specification", "Subsection"],

Cell["\<\
If Level is given a list of two integers {m,n} as a level specification, then \
we get a list of all subexpressions at level (m) at level (n) and all \
subexpressions at levels between (m) and (n).  The next line returns a list \
of all subexpressions at levels 2, 3, and 4.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Level[demo, {2, 4}]\)], "Input"],

Cell[BoxData[
    \({1\/3, \[Pi], 2 + 1\/x, 1\/2, \@\(2 + 1\/x\), 
      1\/3\ \[Pi]\ \@\(2 + 1\/x\), 1\/6, \[Pi], x, 
      1\/2, \@x, \(\[Pi]\ \@x\)\/6}\)], "Output"]
}, Open  ]],

Cell["\<\
The next line gives a list of all subexpressions at levels 0, 1, and 2.  The \
subexpression at level 0 is the expression itself.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Level[demo, {0, 2}]\)], "Input"],

Cell[BoxData[
    \({x, 1\/3\ \[Pi]\ \@\(2 + 1\/x\), 
      Cos[1\/3\ \[Pi]\ \@\(2 + 1\/x\)], \(\[Pi]\ \@x\)\/6, 
      Sin[\(\[Pi]\ \@x\)\/6], 
      x + Cos[1\/3\ \[Pi]\ \@\(2 + 1\/x\)] + 
        Sin[\(\[Pi]\ \@x\)\/6]}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Negative integers in level specifications", "Subsection"],

Cell["\<\
To understand negative levels you have to first understand the Mathematica \
meaning of depth.  The depth of an expression is said to be one greater than \
the maximum number of indices needed to access any part of an expression. \
\>", "Text"],

Cell[CellGroupData[{

Cell["A list of one negative integer for a level specification", \
"Subsubsection"],

Cell["\<\
 A level specification {-n} (where -n is a negative integer) is all \
subexpressions that have depth (n).  Atoms have depth 1, so the level \
specification {-1} in the next line causes Level to return a list of all the \
atoms in (demo2).  \
\>", "Text"],

Cell["\<\
Note:  Rational numbers have a Numerator and Denominator.  However the \
numerator and denominator of rational numbers can't  be accessed using Part \
so they are regarded as atoms and have a depth of 1.  Complex numbers are \
also regarded as atoms although none were included in (demo).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \({AtomQ[1/3], Depth[1/3]}\)], "Input"],

Cell[BoxData[
    \({True, 1}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Part[1/3, 1]\)], "Input"],

Cell[BoxData[
    \(\(1\/3\)\[LeftDoubleBracket]1\[RightDoubleBracket]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Level[demo, {\(-1\)}]\)], "Input"],

Cell[BoxData[
    \({x, 1\/3, \[Pi], 2, x, \(-1\), 1\/2, 1\/6, \[Pi], x, 1\/2}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next line the level specification is {-4}, and Level returns a list of \
all subexpressions of demo with depth equal to 4.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Level[demo, {\(-4\)}]\)], "Input"],

Cell[BoxData[
    \({\@\(2 + 1\/x\), Sin[\(\[Pi]\ \@x\)\/6]}\)], "Output"]
}, Open  ]],

Cell["\<\
As with positive integer level specifications Level may return an empty list \
if the given expression has no subexpressions sufficiently deep.  The next \
line returns an empty list because neither demo or any of it's subexpressions \
have a depth of 25.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Level[demo, {\(-25\)}]\)], "Input"],

Cell[BoxData[
    \({}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["A negative integer as a level specification", "Subsubsection"],

Cell["\<\
If Level is given a negative integer as a level specification it returns all \
subexpressions from level 1 down to (and including) the negative level \
specified.  The next line returns a list of all subexpressions from level 1 \
down to  those at level -4.  Since the level specification goes down to -4 \
all sub expressions returned have a depth  of 4 or greater.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Level[demo, \(-4\)]\)], "Input"],

Cell[BoxData[
    \({\@\(2 + 1\/x\), 1\/3\ \[Pi]\ \@\(2 + 1\/x\), 
      Cos[1\/3\ \[Pi]\ \@\(2 + 1\/x\)], Sin[\(\[Pi]\ \@x\)\/6]}\)], "Output"]
}, Open  ]],

Cell["\<\
If Level is given (-1) as a level specification (as in the next line) we get \
a list of all subexpressions from level 1 down to the atoms.  This amounts to \
every subexpression, but not the whole expression itself.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Level[demo, \(-1\)]\)], "Input"],

Cell[BoxData[
    \({x, 1\/3, \[Pi], 2, x, \(-1\), 1\/x, 2 + 1\/x, 1\/2, \@\(2 + 1\/x\), 
      1\/3\ \[Pi]\ \@\(2 + 1\/x\), Cos[1\/3\ \[Pi]\ \@\(2 + 1\/x\)], 
      1\/6, \[Pi], x, 1\/2, \@x, \(\[Pi]\ \@x\)\/6, 
      Sin[\(\[Pi]\ \@x\)\/6]}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next line we see level specifications -1 and \[Infinity] are \
equivalent. \
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Level[demo, \(-1\)] === Level[demo, \[Infinity]]\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
A list of integers including one or two negative integers for a level \
specification\
\>", "Subsubsection"],

Cell["\<\
The next line gives a list of all subexpressions at any level (except level \
0) that have a depth of 3 or greater.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Level[demo, {1, \(-3\)}]\)], "Input"],

Cell[BoxData[
    \({2 + 1\/x, \@\(2 + 1\/x\), 1\/3\ \[Pi]\ \@\(2 + 1\/x\), 
      Cos[1\/3\ \[Pi]\ \@\(2 + 1\/x\)], \(\[Pi]\ \@x\)\/6, 
      Sin[\(\[Pi]\ \@x\)\/6]}\)], "Output"]
}, Open  ]],

Cell["\<\
Then the next line gives a list of all subexpressions at levels 2 or above \
with a depth of 4 or less.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(tt = Level[demo, {\(-4\), 2}]\)], "Input"],

Cell[BoxData[
    \({x, \(\[Pi]\ \@x\)\/6, Sin[\(\[Pi]\ \@x\)\/6]}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next two cells level specification {0,-1}  is effectively the same as \
level specification {-\[Infinity],\[Infinity]}.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Level[demo, {0, \(-1\)}] === 
      Level[demo, {\(-\[Infinity]\), \[Infinity]}]\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell["\<\
In the next line Level is asked to return all subexpressions at levels 3 or \
deeper that have a depth of 6 or greater.  Expression demo2 has no \
subexpressions meeting this criteria, so an empty list is returned.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Level[demo, {3, \(-6\)}]\)], "Input"],

Cell[BoxData[
    \({}\)], "Output"]
}, Open  ]],

Cell["\<\
The next line gives a list of all subexpression with a depth of 1, 2, or 3.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Level[demo, {\(-3\), \(-1\)}]\)], "Input"],

Cell[BoxData[
    \({x, 1\/3, \[Pi], 2, x, \(-1\), 1\/x, 2 + 1\/x, 1\/2, 1\/6, \[Pi], x, 
      1\/2, \@x, \(\[Pi]\ \@x\)\/6}\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["ListConvolve", "Section"],

Cell["The next cell demonstrates the basic use of ListConvolve.", "Text",
  CellTags->"ListConvolve"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Off[General::spell1];\)\), "\[IndentingNewLine]", 
    \(\(\(Clear["\<Global`*\>"];\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(ListConvolve[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, b6}]\)}], "Input"],

Cell[BoxData[
    \({a4\ b1 + a3\ b2 + a2\ b3 + a1\ b4, a4\ b2 + a3\ b3 + a2\ b4 + a1\ b5, 
      a4\ b3 + a3\ b4 + a2\ b5 + a1\ b6}\)], "Output"]
}, Open  ]],

Cell["\<\
Next we see that ListConvolve is equivalent to flattening the result of a \
certain matrix product.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    RowBox[{
      RowBox[{
        RowBox[{"(", GridBox[{
              {"a4", "a3", "a2", "a1", "0", "0"},
              {"0", "a4", "a3", "a2", "a1", "0"},
              {"0", "0", "a4", "a3", "a2", "a1"}
              }], ")"}], ".", 
        RowBox[{"(", GridBox[{
              {"b1"},
              {"b2"},
              {"b3"},
              {"b4"},
              {"b5"},
              {"b6"}
              }], ")"}]}], ";"}], "\[IndentingNewLine]", \(Flatten[%] === 
      ListConvolve[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, b6}]\)}], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell shows that ListConvolve is closely related to ListCorrelate.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(listA = {a1, a2, a3, a4};\)\), "\[IndentingNewLine]", 
    \(\(listB = {b1, b2, b3, b4, b5, b6};\)\), "\[IndentingNewLine]", 
    \(ListConvolve[listA, listB] === \ 
      ListCorrelate[Reverse[listA], listB]\)}], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
  "Specifying the \"overhang\" using  ",
  Cell[BoxData[
      \(TraditionalForm\`{K\_L, K\_R}\)]]
}], "Subsection"],

Cell["\<\
In the next cell we provide ListConvolve {-1,-1} as a third argument.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListConvolve[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, 
        b6}, {\(-1\), \(-1\)}]\)], "Input"],

Cell[BoxData[
    \({a4\ b1 + a3\ b2 + a2\ b3 + a1\ b4, a4\ b2 + a3\ b3 + a2\ b4 + a1\ b5, 
      a4\ b3 + a3\ b4 + a2\ b5 + a1\ b6, a1\ b1 + a4\ b4 + a3\ b5 + a2\ b6, 
      a2\ b1 + a1\ b2 + a4\ b5 + a3\ b6, 
      a3\ b1 + a2\ b2 + a1\ b3 + a4\ b6}\)], "Output"]
}, Open  ]],

Cell["\<\
The previous example is equivalent to the matrix product in the next cell.  \
Here we have the last element of {a1, a2, a3, a4} in the upper left position \
of the left matrix..  We also have the last element of {a1, a2, a3, a4} in \
the lower right position of the left matrix.  The (-1) indicates last element \
of {a1, a2, a3, a4}, and (-2) would indicate the second from the last element \
of {a1, a2, a3, a4}.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    RowBox[{
      RowBox[{
        RowBox[{"(", GridBox[{
              {"a4", "a3", "a2", "a1", "0", "0"},
              {"0", "a4", "a3", "a2", "a1", "0"},
              {"0", "0", "a4", "a3", "a2", "a1"},
              {"a1", "0", "0", "a4", "a3", "a2"},
              {"a2", "a1", "0", "0", "a4", "a3"},
              {"a3", "a2", "a1", "0", "0", "a4"}
              }], ")"}], ".", 
        RowBox[{"(", GridBox[{
              {"b1"},
              {"b2"},
              {"b3"},
              {"b4"},
              {"b5"},
              {"b6"}
              }], ")"}]}], ";"}], "\[IndentingNewLine]", \(Flatten[%] === 
      ListConvolve[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, 
          b6}, {\(-1\), \(-1\)}]\)}], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell we provide ListConvolve {1,1} as a third argument.\
\>", "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListConvolve[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, b6}, {1, 
        1}]\)], "Input"],

Cell[BoxData[
    \({a1\ b1 + a4\ b4 + a3\ b5 + a2\ b6, a2\ b1 + a1\ b2 + a4\ b5 + a3\ b6, 
      a3\ b1 + a2\ b2 + a1\ b3 + a4\ b6, a4\ b1 + a3\ b2 + a2\ b3 + a1\ b4, 
      a4\ b2 + a3\ b3 + a2\ b4 + a1\ b5, 
      a4\ b3 + a3\ b4 + a2\ b5 + a1\ b6}\)], "Output"]
}, Open  ]],

Cell["\<\
The previous example is equivalent to the matrix product in the next cell.  \
Here we have the first element of {a1, a2, a3, a4} in the upper left position \
of the left matrix..  We also have the first element of {a1, a2, a3, a4} in \
the lower right position of the left matrix.  The (1) indicates first element \
of {a1, a2, a3, a4}, and (2) would indicate the second element of {a1, a2, \
a3, a4}.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    RowBox[{
      RowBox[{
        RowBox[{"(", GridBox[{
              {"a1", "0", "0", "a4", "a3", "a2"},
              {"a2", "a1", "0", "0", "a4", "a3"},
              {"a3", "a2", "a1", "0", "0", "a4"},
              {"a4", "a3", "a2", "a1", "0", "0"},
              {"0", "a4", "a3", "a2", "a1", "0"},
              {"0", "0", "a4", "a3", "a2", "a1"}
              }], ")"}], ".", 
        RowBox[{"(", GridBox[{
              {"b1"},
              {"b2"},
              {"b3"},
              {"b4"},
              {"b5"},
              {"b6"}
              }], ")"}]}], ";"}], "\[IndentingNewLine]", \(Flatten[%] === 
      ListConvolve[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, b6}, {1, 
          1}]\)}], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell we provide ListConvolve {1,-1} as a third argument.\
\>", "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListConvolve[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, 
        b6}, {1, \(-1\)}]\)], "Input"],

Cell[BoxData[
    \({a1\ b1 + a4\ b4 + a3\ b5 + a2\ b6, a2\ b1 + a1\ b2 + a4\ b5 + a3\ b6, 
      a3\ b1 + a2\ b2 + a1\ b3 + a4\ b6, a4\ b1 + a3\ b2 + a2\ b3 + a1\ b4, 
      a4\ b2 + a3\ b3 + a2\ b4 + a1\ b5, a4\ b3 + a3\ b4 + a2\ b5 + a1\ b6, 
      a1\ b1 + a4\ b4 + a3\ b5 + a2\ b6, a2\ b1 + a1\ b2 + a4\ b5 + a3\ b6, 
      a3\ b1 + a2\ b2 + a1\ b3 + a4\ b6}\)], "Output"]
}, Open  ]],

Cell["\<\
The previous example is equivalent to the matrix product in the next cell.  \
Here we have the first element of {a1, a2, a3, a4} in the upper left position \
of the left matrix..  We also have the last element of {a1, a2, a3, a4} in \
the lower right position of the left matrix.  The (1) indicates first element \
of {a1, a2, a3, a4}, and (-1) indicates the last element of {a1, a2, a3, a4}.\
\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    RowBox[{
      RowBox[{
        RowBox[{"(", GridBox[{
              {"a1", "0", "0", "a4", "a3", "a2"},
              {"a2", "a1", "0", "0", "a4", "a3"},
              {"a3", "a2", "a1", "0", "0", "a4"},
              {"a4", "a3", "a2", "a1", "0", "0"},
              {"0", "a4", "a3", "a2", "a1", "0"},
              {"0", "0", "a4", "a3", "a2", "a1"},
              {"a1", "0", "0", "a4", "a3", "a2"},
              {"a2", "a1", "0", "0", "a4", "a3"},
              {"a3", "a2", "a1", "0", "0", "a4"}
              }], ")"}], ".", 
        RowBox[{"(", GridBox[{
              {"b1"},
              {"b2"},
              {"b3"},
              {"b4"},
              {"b5"},
              {"b6"}
              }], ")"}]}], ";"}], "\[IndentingNewLine]", \(Flatten[%] === 
      ListConvolve[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, 
          b6}, {1, \(-1\)}]\)}], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell we provide ListConvolve {-1,1} as a third argument. Notice \
this gives the same result as 
ListConvolve[{a1,a2,a3,a4},{b1,b2,b3,b4,b5,b6}]  (ie. {-1,1} is the default \
for the third argument).\
\>", "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListConvolve[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, b6}, {\(-1\), 
        1}]\)], "Input"],

Cell[BoxData[
    \({a4\ b1 + a3\ b2 + a2\ b3 + a1\ b4, a4\ b2 + a3\ b3 + a2\ b4 + a1\ b5, 
      a4\ b3 + a3\ b4 + a2\ b5 + a1\ b6}\)], "Output"]
}, Open  ]],

Cell["\<\
The previous example is equivalent to the matrix product in the next cell.  \
Here we have the last element of {a1, a2, a3, a4} in the upper left position \
of the left matrix..  We also have the First element of {a1, a2, a3, a4} in \
the lower right position of the left matrix.  The (1) indicates first element \
of {a1, a2, a3, a4}, and (-1) indicates the last element of {a1, a2, a3, a4}.\
\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    RowBox[{
      RowBox[{
        RowBox[{"(", GridBox[{
              {"a4", "a3", "a2", "a1", "0", "0"},
              {"0", "a4", "a3", "a2", "a1", "0"},
              {"0", "0", "a4", "a3", "a2", "a1"}
              }], ")"}], ".", 
        RowBox[{"(", GridBox[{
              {"b1"},
              {"b2"},
              {"b3"},
              {"b4"},
              {"b5"},
              {"b6"}
              }], ")"}]}], ";"}], "\[IndentingNewLine]", \(Flatten[%] === 
      ListConvolve[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, b6}, {\(-1\), 
          1}]\)}], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Specifying the padding", "Subsection"],

Cell[TextData[{
  "In the next cell we provide (s) as a ",
  Cell[BoxData[
      \(TraditionalForm\`4\^th\)]],
  " argument."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListConvolve[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, b6}, {1, \(-1\)}, 
      s]\)], "Input"],

Cell[BoxData[
    \({a1\ b1 + a2\ s + a3\ s + a4\ s, a2\ b1 + a1\ b2 + a3\ s + a4\ s, 
      a3\ b1 + a2\ b2 + a1\ b3 + a4\ s, a4\ b1 + a3\ b2 + a2\ b3 + a1\ b4, 
      a4\ b2 + a3\ b3 + a2\ b4 + a1\ b5, a4\ b3 + a3\ b4 + a2\ b5 + a1\ b6, 
      a4\ b4 + a3\ b5 + a2\ b6 + a1\ s, a4\ b5 + a3\ b6 + a1\ s + a2\ s, 
      a4\ b6 + a1\ s + a2\ s + a3\ s}\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell performs a series of Dot products that give the same result as \
in the previous cell.  Notice we gave ListConvolve {1,-1} as a third \
argument, and the left part of the first row starts with the first part of \
{a1,a2,a3,a4}.  Also the last row ends with the last element of \
{a1,a2,a3,a4}.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\({\[IndentingNewLine]{a1, a2, a3, a4, 0, 0} . {b1, s\ , s\ , s\ , s\ , 
            s\ }, \[IndentingNewLine]{a2, a1, a3, a4, 0, 0} . {b1, b2, s\ , 
            s\ , s\ , s\ }, \[IndentingNewLine]{a3, a2, a1, a4, 0, 0} . {b1, 
            b2, b3, s\ , s\ , s\ }, \[IndentingNewLine]{a4, a3, a2, a1, 0, 
            0} . {b1, b2, b3, b4, s\ , s\ }, \[IndentingNewLine]{0, a4, a3, 
            a2, a1, 0} . {b1, b2, b3, b4, b5, s\ }, \[IndentingNewLine]{0, 0, 
            a4, a3, a2, a1} . {b1, b2, b3, b4, b5, 
            b6}, \[IndentingNewLine]{a1, 0, 0, a4, a3, a2} . {s\ , b2, b3, 
            b4, b5, b6}, \[IndentingNewLine]{a2, a1, 0, 0, a4, a3} . {s\ , 
            s\ , b3, b4, b5, b6}, \[IndentingNewLine]{a3, a2, a1, 0, 0, 
            a4} . {s\ , s\ , s\ , b4, b5, 
            b6}\[IndentingNewLine]};\)\), "\[IndentingNewLine]", 
    \(% === ListConvolve[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, 
          b6}, {1, \(-1\)}, s]\)}], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "In the next cell we provide {u1 ,u2, u3, u4, u5, u6} as a ",
  Cell[BoxData[
      \(TraditionalForm\`4\^th\)]],
  " argument."
}], "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListConvolve[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, 
        b6}, {1, \(-1\)}, {s1, s2, s3, s4, s5, s6}]\)], "Input"],

Cell[BoxData[
    \({a1\ b1 + a4\ s4 + a3\ s5 + a2\ s6, a2\ b1 + a1\ b2 + a4\ s5 + a3\ s6, 
      a3\ b1 + a2\ b2 + a1\ b3 + a4\ s6, a4\ b1 + a3\ b2 + a2\ b3 + a1\ b4, 
      a4\ b2 + a3\ b3 + a2\ b4 + a1\ b5, a4\ b3 + a3\ b4 + a2\ b5 + a1\ b6, 
      a4\ b4 + a3\ b5 + a2\ b6 + a1\ s1, a4\ b5 + a3\ b6 + a2\ s1 + a1\ s2, 
      a4\ b6 + a3\ s1 + a2\ s2 + a1\ s3}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "The next cell performs a series of Dot products that give the same result \
as in the previous cell. Notice the difference between giving (s) and giving \
{s,t,u} as a ",
  Cell[BoxData[
      \(TraditionalForm\`4\^th\)]],
  " argument.  I actually have a hard time seeing when this would be useful."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\({\[IndentingNewLine]{a1, 0, 0, a4, a3, a2} . {b1, b2, b3, s4, s5, 
            s6}, \[IndentingNewLine]{a2, a1, 0, 0, a4, a3} . {b1, b2, b3, b4, 
            s5, s6}, \[IndentingNewLine]{a3, a2, a1, 0, 0, a4} . {b1, b2, b3, 
            b4, b5\ , s6}, \[IndentingNewLine]{a4, a3, a2, a1, 0, 0} . {b1, 
            b2, b3, b4, b5, b6}, \[IndentingNewLine]{0, a4, a3, a2, a1, 
            0} . {b1, b2, b3, b4, b5, u6\ }, \[IndentingNewLine]{0, 0, a4, 
            a3, a2, a1} . {b1, b2, b3, b4, b5, b6}, \[IndentingNewLine]{a1, 
            0, 0, a4, a3, a2} . {s1\ , b2, b3, b4, b5, 
            b6}, \[IndentingNewLine]{a2, a1, 0, 0, a4, a3} . {s1, s2\ , b3, 
            b4, b5, b6}, \[IndentingNewLine]{a3, a2, a1, 0, 0, a4} . {s1, 
            s2\ , s3\ , b4, b5, 
            b6}\[IndentingNewLine]};\)\), "\[IndentingNewLine]", 
    \(% === ListConvolve[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, 
          b6}, {1, \(-1\)}, {s1, s2, s3, s4, s5, s6}]\)}], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "To make this more clear I give another example where we give ListConvolve \
a ",
  Cell[BoxData[
      \(TraditionalForm\`4\^th\)]],
  " argument in the next cell."
}], "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListConvolve[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, 
        b6}, {1, \(-1\)}, {s1, s2}]\)], "Input"],

Cell[BoxData[
    \({a1\ b1 + a3\ s1 + a2\ s2 + a4\ s2, a2\ b1 + a1\ b2 + a4\ s1 + a3\ s2, 
      a3\ b1 + a2\ b2 + a1\ b3 + a4\ s2, a4\ b1 + a3\ b2 + a2\ b3 + a1\ b4, 
      a4\ b2 + a3\ b3 + a2\ b4 + a1\ b5, a4\ b3 + a3\ b4 + a2\ b5 + a1\ b6, 
      a4\ b4 + a3\ b5 + a2\ b6 + a1\ s1, a4\ b5 + a3\ b6 + a2\ s1 + a1\ s2, 
      a4\ b6 + a1\ s1 + a3\ s1 + a2\ s2}\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell performs a series of Dot products that give the same result as \
in the previous cell.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\({\[IndentingNewLine]{a1, 0, 0, a4, a3, a2} . {b1, b2, b3, s2, s1, 
            s2}, \[IndentingNewLine]{a2, a1, 0, 0, a4, a3} . {b1, b2, b3, b4, 
            s1, s2}, \[IndentingNewLine]{a3, a2, a1, 0, 0, a4} . {b1, b2, b3, 
            b4, b5\ , s2}, \[IndentingNewLine]{a4, a3, a2, a1, 0, 0} . {b1, 
            b2, b3, b4, b5, b6}, \[IndentingNewLine]{0, a4, a3, a2, a1, 
            0} . {b1, b2, b3, b4, b5, u6\ }, \[IndentingNewLine]{0, 0, a4, 
            a3, a2, a1} . {b1, b2, b3, b4, b5, b6}, \[IndentingNewLine]{a1, 
            0, 0, a4, a3, a2} . {s1\ , b2, b3, b4, b5, 
            b6}, \[IndentingNewLine]{a2, a1, 0, 0, a4, a3} . {s1, s2\ , b3, 
            b4, b5, b6}, \[IndentingNewLine]{a3, a2, a1, 0, 0, a4} . {s1, 
            s2\ , s1\ , b4, b5, 
            b6}\[IndentingNewLine]};\)\), "\[IndentingNewLine]", 
    \(% === ListConvolve[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, 
          b6}, {1, \(-1\)}, {s1, s2}]\)}], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "It's curious that providing an empty list as a ",
  Cell[BoxData[
      \(TraditionalForm\`4\^th\)]],
  " argument is equivalent to providing the integer 1 as a ",
  Cell[BoxData[
      \(TraditionalForm\`4\^th\)]],
  " argument."
}], "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListConvolve[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, 
          b6}, {1, \(-1\)}, {}] === 
      ListConvolve[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, b6}, {1, \(-1\)}, 
        1]\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "The next cell shows that by default ListConvolve uses the second argument \
in place of a ",
  Cell[BoxData[
      \(TraditionalForm\`4\^th\)]],
  " argument when none is provided."
}], "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListConvolve[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, 
          b6}, {1, \(-1\)}] === \[IndentingNewLine]ListConvolve[{a1, a2, a3, 
          a4}, {b1, b2, b3, b4, b5, b6}, {1, \(-1\)}, {b1, b2, b3, b4, b5, 
          b6}]\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Generalizing beyond Times, Plus", "Subsection"],

Cell[TextData[{
  "In the next cell we provide ListConvolve (g) as a ",
  Cell[BoxData[
      \(TraditionalForm\`5\^th\)]],
  " argument and it uses the head (g) in place of Times."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListConvolve[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, b6}, {\(-1\), 1}, 
      lst, g]\)], "Input"],

Cell[BoxData[
    \({g[a1, b4] + g[a2, b3] + g[a3, b2] + g[a4, b1], 
      g[a1, b5] + g[a2, b4] + g[a3, b3] + g[a4, b2], 
      g[a1, b6] + g[a2, b5] + g[a3, b4] + g[a4, b3]}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "In the next cell we provide ListConvolve (g, h) as a ",
  Cell[BoxData[
      \(TraditionalForm\`5\^th\)]],
  " and ",
  Cell[BoxData[
      \(TraditionalForm\`6\^th\)]],
  " arguments respectively and it uses the heads (g) and (h) in place of \
Times and Plus respectively."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListConvolve[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, b6}, {\(-1\), 1}, 
      lst, g, h]\)], "Input"],

Cell[BoxData[
    \({h[g[a4, b1], g[a3, b2], g[a2, b3], g[a1, b4]], 
      h[g[a4, b2], g[a3, b3], g[a2, b4], g[a1, b5]], 
      h[g[a4, b3], g[a3, b4], g[a2, b5], g[a1, b6]]}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["ListConvolve with matrices", "Subsection"],

Cell["In the next cell we perform a ListConvolution on matrices.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    RowBox[{
      RowBox[{"m1", "=", 
        RowBox[{"(", GridBox[{
              {"a1", "a2", "a3"},
              {"b1", "b2", "b3"},
              {"c1", "c2", "c3"}
              }], ")"}]}], ";"}], "\n", 
    RowBox[{
      RowBox[{"m2", "=", 
        RowBox[{"(", GridBox[{
              {"x1", "x2", "x3"},
              {"y1", "y2", "y3"},
              {"z1", "z2", "z3"}
              }], ")"}]}], ";"}], "\n", \(ListConvolve[m1, m2]\)}], "Input"],

Cell[BoxData[
    \({{c3\ x1 + c2\ x2 + c1\ x3 + b3\ y1 + b2\ y2 + b1\ y3 + a3\ z1 + 
          a2\ z2 + a1\ z3}}\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell shows how the same ListConvolution can be done as Dot products \
on parts of the matrices.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListConvolve[m1, 
        m2] === \[IndentingNewLine]{{Part[m1, 1] . Reverse[Part[m2, 3]] + 
            Part[m1, 2] . Reverse[Part[m2, 2]] + 
            Part[m1, 3] . Reverse[Part[m2, 1]]}}\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "We can give ListConvolve a level specification as a ",
  Cell[BoxData[
      \(TraditionalForm\`7\^th\)]],
  " argument.  The next cell shows that level (2) is the default \
specification when working on matrices. "
}], "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListConvolve[m1, m2] === \[IndentingNewLine]ListConvolve[m1, 
        m2, {\(-1\), 1}, m2, Times, Plus, 2]\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell we give ListConvolve the integer (1) as a level \
specification.\
\>", "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListConvolve[m1, m2, {\(-1\), 1}, m2, Times, Plus, 1]\)], "Input"],

Cell[BoxData[
    \({{c1\ x1 + b1\ y1 + a1\ z1, c2\ x2 + b2\ y2 + a2\ z2, 
        c3\ x3 + b3\ y3 + a3\ z3}}\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell shows how the same ListConvolution can be done as Dot products \
on parts of the matrices.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(mat1 = Transpose[m1];\)\), "\n", 
    \(\(\(mat2 = Transpose[m2];\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(ListConvolve[m1, m2, {\(-1\), 1}, m2, Times, Plus, 
        1] === \n{{Reverse[Part[mat1, 1]] . Part[mat2, 1], 
          Reverse[Part[mat1, 2]] . Part[mat2, 2], 
          Reverse[Part[mat1, 3]] . Part[mat2, 3]}}\)}], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell shows two ways of expressing the default for the third argument \
of ListConvolve when working with matrices.\
\>", "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListConvolve[m1, m2] === ListConvolve[m1, m2, {\(-1\), 1}] === 
      ListConvolve[m1, m2, {{\(-1\), \(-1\)}, {1, 1}}]\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell["\<\
I am having a hard time seeing a pattern to how a ListConvolution on matrices \
is done in different cases.  I would like to have a complete understanding \
for what the third argument of ListConvolve does when working with matrices, \
but it's too hard to decipher.  For example I would like to understand the \
result of the examples below.  \
\>", "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[BoxData[
    \(ListConvolve[m1, m2, {1, 1}]\)], "Input"],

Cell[BoxData[
    \(ListConvolve[m1, m2, {{1, 1}, {\(-1\), \(-1\)}}]\)], "Input"],

Cell[BoxData[
    \(ListConvolve[m1, m2, {1, 1}, m2, Times, Plus, 1]\)], "Input"],

Cell["\<\
I also understand we can also perform a ListConvolution on tensors, but that \
is also too confusing for me to think about.\
\>", "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["ListCorrelate", "Section"],

Cell["The next cell demonstrates the basic use of ListCorrelate.", "Text",
  CellTags->"ListCorrelate"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Off[General::spell1];\)\), "\[IndentingNewLine]", 
    \(\(Clear["\<Global`*\>"];\)\[IndentingNewLine]\), "\[IndentingNewLine]", \

    \(ListCorrelate[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, b6}]\)}], "Input"],

Cell[BoxData[
    \({a1\ b1 + a2\ b2 + a3\ b3 + a4\ b4, a1\ b2 + a2\ b3 + a3\ b4 + a4\ b5, 
      a1\ b3 + a2\ b4 + a3\ b5 + a4\ b6}\)], "Output"]
}, Open  ]],

Cell["\<\
Next we see that ListCorrelate is equivalent to flattening the result of a \
certain matrix product.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    RowBox[{
      RowBox[{
        RowBox[{"(", GridBox[{
              {"a1", "a2", "a3", "a4", "0", "0"},
              {"0", "a1", "a2", "a3", "a4", "0"},
              {"0", "0", "a1", "a2", "a3", "a4"}
              }], ")"}], ".", 
        RowBox[{"(", GridBox[{
              {"b1"},
              {"b2"},
              {"b3"},
              {"b4"},
              {"b5"},
              {"b6"}
              }], ")"}]}], ";"}], "\[IndentingNewLine]", \(Flatten[%] === 
      ListCorrelate[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, b6}]\)}], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell shows that ListConvolve is closely related to ListCorrelate.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(listA = {a1, a2, a3, a4};\)\), "\[IndentingNewLine]", 
    \(\(listB = {b1, b2, b3, b4, b5, b6};\)\), "\[IndentingNewLine]", 
    \(ListConvolve[listA, listB] === \ 
      ListCorrelate[Reverse[listA], listB]\)}], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
  "Specifying the \"overhang\" using  ",
  Cell[BoxData[
      \(TraditionalForm\`{K\_L, K\_R}\)]]
}], "Subsection"],

Cell["\<\
In the next cell we provide ListCorrelate {-1,-1} as a third argument.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListCorrelate[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, 
        b6}, {\(-1\), \(-1\)}]\)], "Input"],

Cell[BoxData[
    \({a4\ b1 + a1\ b4 + a2\ b5 + a3\ b6, a3\ b1 + a4\ b2 + a1\ b5 + a2\ b6, 
      a2\ b1 + a3\ b2 + a4\ b3 + a1\ b6, a1\ b1 + a2\ b2 + a3\ b3 + a4\ b4, 
      a1\ b2 + a2\ b3 + a3\ b4 + a4\ b5, 
      a1\ b3 + a2\ b4 + a3\ b5 + a4\ b6}\)], "Output"]
}, Open  ]],

Cell["\<\
The previous example is equivalent to the matrix product in the next cell.  \
Here we have the last element of {a1, a2, a3, a4} in the upper left position \
of the left matrix..  We also have the last element of {a1, a2, a3, a4} in \
the lower right position of the left matrix.  The (-1) indicates last element \
of {a1, a2, a3, a4}, and (-2) would indicate the second from the last element \
of {a1, a2, a3, a4}.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    RowBox[{
      RowBox[{
        RowBox[{"(", GridBox[{
              {"a4", "0", "0", "a1", "a2", "a3"},
              {"a3", "a4", "0", "0", "a1", "a2"},
              {"a2", "a3", "a4", "0", "0", "a1"},
              {"a1", "a2", "a3", "a4", "0", "0"},
              {"0", "a1", "a2", "a3", "a4", "0"},
              {"0", "0", "a1", "a2", "a3", "a4"}
              }], ")"}], ".", 
        RowBox[{"(", GridBox[{
              {"b1"},
              {"b2"},
              {"b3"},
              {"b4"},
              {"b5"},
              {"b6"}
              }], ")"}]}], ";"}], "\[IndentingNewLine]", \(Flatten[%] === 
      ListCorrelate[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, 
          b6}, {\(-1\), \(-1\)}]\)}], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell we provide ListCorrelate {1,1} as a third argument.\
\>", "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListCorrelate[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, b6}, {1, 
        1}]\)], "Input"],

Cell[BoxData[
    \({a1\ b1 + a2\ b2 + a3\ b3 + a4\ b4, a1\ b2 + a2\ b3 + a3\ b4 + a4\ b5, 
      a1\ b3 + a2\ b4 + a3\ b5 + a4\ b6, a4\ b1 + a1\ b4 + a2\ b5 + a3\ b6, 
      a3\ b1 + a4\ b2 + a1\ b5 + a2\ b6, 
      a2\ b1 + a3\ b2 + a4\ b3 + a1\ b6}\)], "Output"]
}, Open  ]],

Cell["\<\
The previous example is equivalent to the matrix product in the next cell.  \
Here we have the first element of {a1, a2, a3, a4} in the upper left position \
of the left matrix..  We also have the first element of {a1, a2, a3, a4} in \
the lower right position of the left matrix.  The (1) indicates first element \
of {a1, a2, a3, a4}, and (2) would indicate the second element of {a1, a2, \
a3, a4}.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    RowBox[{
      RowBox[{
        RowBox[{"(", GridBox[{
              {"a1", "a2", "a3", "a4", "0", "0"},
              {"0", "a1", "a2", "a3", "a4", "0"},
              {"0", "0", "a1", "a2", "a3", "a4"},
              {"a4", "0", "0", "a1", "a2", "a3"},
              {"a3", "a4", "0", "0", "a1", "a2"},
              {"a2", "a3", "a4", "0", "0", "a1"}
              }], ")"}], ".", 
        RowBox[{"(", GridBox[{
              {"b1"},
              {"b2"},
              {"b3"},
              {"b4"},
              {"b5"},
              {"b6"}
              }], ")"}]}], ";"}], "\[IndentingNewLine]", \(Flatten[%] === 
      ListCorrelate[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, b6}, {1, 
          1}]\)}], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell we provide ListCorrelate {1,-1} as a third argument.\
\>", "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListCorrelate[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, 
        b6}, {1, \(-1\)}]\)], "Input"],

Cell[BoxData[
    \({a1\ b1 + a2\ b2 + a3\ b3 + a4\ b4, a1\ b2 + a2\ b3 + a3\ b4 + a4\ b5, 
      a1\ b3 + a2\ b4 + a3\ b5 + a4\ b6}\)], "Output"]
}, Open  ]],

Cell["\<\
The previous example is equivalent to the matrix product in the next cell.  \
Here we have the first element of {a1, a2, a3, a4} in the upper left position \
of the left matrix..  We also have the last element of {a1, a2, a3, a4} in \
the lower right position of the left matrix.  The (1) indicates first element \
of {a1, a2, a3, a4}, and (-1) indicates the last element of {a1, a2, a3, a4}.\
\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    RowBox[{
      RowBox[{
        RowBox[{"(", GridBox[{
              {"a1", "a2", "a3", "a4", "0", "0"},
              {"0", "a1", "a2", "a3", "a4", "0"},
              {"0", "0", "a1", "a2", "a3", "a4"},
              {"a4", "0", "0", "a1", "a2", "a3"},
              {"a3", "a4", "0", "0", "a1", "a2"},
              {"a2", "a3", "a4", "0", "0", "a1"},
              {"a1", "a2", "a3", "a4", "0", "0"},
              {"0", "a1", "a2", "a3", "a4", "0"},
              {"0", "0", "a1", "a2", "a3", "a4"}
              }], ")"}], ".", 
        RowBox[{"(", GridBox[{
              {"b1"},
              {"b2"},
              {"b3"},
              {"b4"},
              {"b5"},
              {"b6"}
              }], ")"}]}], ";"}], "\[IndentingNewLine]", \(Flatten[%] === 
      ListCorrelate[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, 
          b6}, {1, \(-1\)}]\)}], "Input"],

Cell[BoxData[
    \(False\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell we provide ListCorrelate {-1,1} as a third argument. Notice \
this gives the same result as 
ListCorrelate[{a1,a2,a3,a4},{b1,b2,b3,b4,b5,b6}]  (ie. {-1,1} is the default \
for the third argument).\
\>", "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListCorrelate[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, b6}, {\(-1\), 
        1}]\)], "Input"],

Cell[BoxData[
    \({a4\ b1 + a1\ b4 + a2\ b5 + a3\ b6, a3\ b1 + a4\ b2 + a1\ b5 + a2\ b6, 
      a2\ b1 + a3\ b2 + a4\ b3 + a1\ b6, a1\ b1 + a2\ b2 + a3\ b3 + a4\ b4, 
      a1\ b2 + a2\ b3 + a3\ b4 + a4\ b5, a1\ b3 + a2\ b4 + a3\ b5 + a4\ b6, 
      a4\ b1 + a1\ b4 + a2\ b5 + a3\ b6, a3\ b1 + a4\ b2 + a1\ b5 + a2\ b6, 
      a2\ b1 + a3\ b2 + a4\ b3 + a1\ b6}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Length[%]\)], "Input"],

Cell[BoxData[
    \(9\)], "Output"]
}, Open  ]],

Cell["\<\
The previous example is equivalent to the matrix product in the next cell.  \
Here we have the last element of {a1, a2, a3, a4} in the upper left position \
of the left matrix..  We also have the First element of {a1, a2, a3, a4} in \
the lower right position of the left matrix.  The (1) indicates first element \
of {a1, a2, a3, a4}, and (-1) indicates the last element of {a1, a2, a3, a4}.\
\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    RowBox[{
      RowBox[{
        RowBox[{"(", GridBox[{
              {"a4", "0", "0", "a1", "a2", "a3"},
              {"a3", "a4", "0", "0", "a1", "a2"},
              {"a2", "a3", "a4", "0", "0", "a1"},
              {"a1", "a2", "a3", "a4", "0", "0"},
              {"0", "a1", "a2", "a3", "a4", "0"},
              {"0", "0", "a1", "a2", "a3", "a4"},
              {"a4", "0", "0", "a1", "a2", "a3"},
              {"a3", "a4", "0", "0", "a1", "a2"},
              {"a2", "a3", "a4", "0", "0", "a1"}
              }], ")"}], ".", 
        RowBox[{"(", GridBox[{
              {"b1"},
              {"b2"},
              {"b3"},
              {"b4"},
              {"b5"},
              {"b6"}
              }], ")"}]}], ";"}], "\[IndentingNewLine]", \(Flatten[%] === 
      ListCorrelate[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, b6}, {\(-1\), 
          1}]\)}], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Specifying the padding", "Subsection"],

Cell[TextData[{
  "In the next cell we provide (s) as a ",
  Cell[BoxData[
      \(TraditionalForm\`4\^th\)]],
  " argument."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListCorrelate[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, b6}, {\(-1\), 1}, 
      s]\)], "Input"],

Cell[BoxData[
    \({a4\ b1 + a1\ s + a2\ s + a3\ s, a3\ b1 + a4\ b2 + a1\ s + a2\ s, 
      a2\ b1 + a3\ b2 + a4\ b3 + a1\ s, a1\ b1 + a2\ b2 + a3\ b3 + a4\ b4, 
      a1\ b2 + a2\ b3 + a3\ b4 + a4\ b5, a1\ b3 + a2\ b4 + a3\ b5 + a4\ b6, 
      a1\ b4 + a2\ b5 + a3\ b6 + a4\ s, a1\ b5 + a2\ b6 + a3\ s + a4\ s, 
      a1\ b6 + a2\ s + a3\ s + a4\ s}\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell performs a series of Dot products that give the same result as \
in the previous cell.  Notice we gave ListCorrelate {1,-1} as a third \
argument, and the left part of the first row starts with the first part of \
{a1,a2,a3,a4}.  Also the last row ends with the last element of \
{a1,a2,a3,a4}.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\({\[IndentingNewLine]{a4, \ 0, \ 0, a1, a2, a3} . {b1, s\ , s\ , s\ , 
            s\ , s\ }, \[IndentingNewLine]{a3, a4, \ 0, \ 0, a1, a2} . {b1, 
            b2, s\ , s\ , s\ , s\ }, \[IndentingNewLine]{a2, a3, a4, \ 0, \ 
            0, a1} . {b1, b2, b3, s\ , s\ , s\ }, \[IndentingNewLine]{a1, a2, 
            a3, a4, \ 0, \ 0} . {b1, b2, b3, b4, s\ , 
            s\ }, \[IndentingNewLine]{\ 0, a1, a2, a3, a4, \ 0} . {b1, b2, 
            b3, b4, b5, s\ }, \[IndentingNewLine]{\ 0, \ 0, a1, a2, a3, 
            a4} . {b1, b2, b3, b4, b5, b6}, \[IndentingNewLine]{a4, \ 0, \ 0, 
            a1, a2, a3} . {s\ , b2, b3, b4, b5, b6}, \[IndentingNewLine]{a3, 
            a4, \ 0, \ 0, a1, a2} . {s\ , s\ , b3, b4, b5, 
            b6}, \[IndentingNewLine]{a2, a3, a4, \ 0, \ 0, a1} . {s\ , s\ , 
            s\ , b4, b5, 
            b6}\[IndentingNewLine]};\)\), "\[IndentingNewLine]", 
    \(% === ListCorrelate[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, 
          b6}, {\(-1\), 1}, s]\)}], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "In the next cell we provide {s1 s2, s3, s4, s5, s6} as a ",
  Cell[BoxData[
      \(TraditionalForm\`4\^th\)]],
  " argument."
}], "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[CellGroupData[{

Cell[BoxData[
    \(w1 = 
      ListCorrelate[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, b6}, {\(-1\), 
          1}, {s1, s2, s3, s4, s5, s6}]\)], "Input"],

Cell[BoxData[
    \({a4\ b1 + a1\ s4 + a2\ s5 + a3\ s6, a3\ b1 + a4\ b2 + a1\ s5 + a2\ s6, 
      a2\ b1 + a3\ b2 + a4\ b3 + a1\ s6, a1\ b1 + a2\ b2 + a3\ b3 + a4\ b4, 
      a1\ b2 + a2\ b3 + a3\ b4 + a4\ b5, a1\ b3 + a2\ b4 + a3\ b5 + a4\ b6, 
      a1\ b4 + a2\ b5 + a3\ b6 + a4\ s1, a1\ b5 + a2\ b6 + a3\ s1 + a4\ s2, 
      a1\ b6 + a2\ s1 + a3\ s2 + a4\ s3}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "The next cell performs a series of Dot products that give the same result \
as in the previous cell. Notice the difference between giving (s) and giving \
{s,t,u} as a ",
  Cell[BoxData[
      \(TraditionalForm\`4\^th\)]],
  " argument.  I actually have a hard time seeing when this would be useful."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\({\[IndentingNewLine]{a4, \ 0, \ 0, a1, a2, a3} . {b1, s2\ , s3\ , 
            s4\ , s5\ , s6\ }, \[IndentingNewLine]{a3, a4, \ 0, \ 0, a1, 
            a2} . {b1, b2, s3\ , s4\ , s5\ , s6\ }, \[IndentingNewLine]{a2, 
            a3, a4, \ 0, \ 0, a1} . {b1, b2, b3, s4\ , s5\ , 
            s6\ }, \[IndentingNewLine]{a1, a2, a3, a4, \ 0, \ 0} . {b1, b2, 
            b3, b4, s5\ , s6\ }, \[IndentingNewLine]{\ 0, a1, a2, a3, a4, \ 
            0} . {b1, b2, b3, b4, b5, s6\ }, \[IndentingNewLine]{\ 0, \ 0, 
            a1, a2, a3, a4} . {b1, b2, b3, b4, b5, 
            b6}, \[IndentingNewLine]{a4, \ 0, \ 0, a1, a2, a3} . {s1\ , b2, 
            b3, b4, b5, b6}, \[IndentingNewLine]{a3, a4, \ 0, \ 0, a1, 
            a2} . {s1\ , s2\ , b3, b4, b5, b6}, \[IndentingNewLine]{a2, a3, 
            a4, \ 0, \ 0, a1} . {s1\ , s2\ , s3\ , b4, b5, 
            b6}\[IndentingNewLine]};\)\), "\n", 
    \(% === ListCorrelate[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, 
          b6}, {\(-1\), 1}, {s1, s2, s3, s4, s5, s6}]\)}], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "To make this more clear I give another example where we give ",
  "ListCorrelate",
  " a ",
  Cell[BoxData[
      \(TraditionalForm\`4\^th\)]],
  " argument in the next cell."
}], "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListCorrelate[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, b6}, {\(-1\), 
        1}, {s1, s2}]\)], "Input"],

Cell[BoxData[
    \({a4\ b1 + a2\ s1 + a1\ s2 + a3\ s2, a3\ b1 + a4\ b2 + a1\ s1 + a2\ s2, 
      a2\ b1 + a3\ b2 + a4\ b3 + a1\ s2, a1\ b1 + a2\ b2 + a3\ b3 + a4\ b4, 
      a1\ b2 + a2\ b3 + a3\ b4 + a4\ b5, a1\ b3 + a2\ b4 + a3\ b5 + a4\ b6, 
      a1\ b4 + a2\ b5 + a3\ b6 + a4\ s1, a1\ b5 + a2\ b6 + a3\ s1 + a4\ s2, 
      a1\ b6 + a2\ s1 + a4\ s1 + a3\ s2}\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell performs a series of Dot products that give the same result as \
in the previous cell.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\({\[IndentingNewLine]{a4, \ 0, \ 0, a1, a2, a3} . {b1, s2\ , s1\ , 
            s2\ , s1\ , s2\ }, \[IndentingNewLine]{a3, a4, \ 0, \ 0, a1, 
            a2} . {b1, b2, s1\ , s2\ , s1\ , s2\ }, \[IndentingNewLine]{a2, 
            a3, a4, \ 0, \ 0, a1} . {b1, b2, b3, s2\ , s1\ , 
            s2\ }, \[IndentingNewLine]{a1, a2, a3, a4, \ 0, \ 0} . {b1, b2, 
            b3, b4, s1\ , s2\ }, \[IndentingNewLine]{\ 0, a1, a2, a3, a4, \ 
            0} . {b1, b2, b3, b4, b5, s2\ }, \[IndentingNewLine]{\ 0, \ 0, 
            a1, a2, a3, a4} . {b1, b2, b3, b4, b5, 
            b6}, \[IndentingNewLine]{a4, \ 0, \ 0, a1, a2, a3} . {s1\ , b2, 
            b3, b4, b5, b6}, \[IndentingNewLine]{a3, a4, \ 0, \ 0, a1, 
            a2} . {s1\ , s2\ , b3, b4, b5, b6}, \[IndentingNewLine]{a2, a3, 
            a4, \ 0, \ 0, a1} . {s1\ , s2\ , s1\ , b4, b5, 
            b6}\[IndentingNewLine]};\)\), "\n", 
    \(% === ListCorrelate[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, 
          b6}, {\(-1\), 1}, {s1, s2}]\)}], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "It's curious that providing an empty list as a ",
  Cell[BoxData[
      \(TraditionalForm\`4\^th\)]],
  " argument is equivalent to providing the integer 1 as a ",
  Cell[BoxData[
      \(TraditionalForm\`4\^th\)]],
  " argument."
}], "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListCorrelate[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, 
          b6}, {1, \(-1\)}, {}] === 
      ListCorrelate[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, b6}, {1, \(-1\)}, 
        1]\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "The next cell shows that by default ",
  "ListCorrelate",
  " uses the second argument in place of a ",
  Cell[BoxData[
      \(TraditionalForm\`4\^th\)]],
  " argument when none is provided."
}], "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListCorrelate[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, 
          b6}, {1, \(-1\)}] === \[IndentingNewLine]ListCorrelate[{a1, a2, a3, 
          a4}, {b1, b2, b3, b4, b5, b6}, {1, \(-1\)}, {b1, b2, b3, b4, b5, 
          b6}]\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Generalizing beyond Times, Plus", "Subsection"],

Cell[TextData[{
  "In the next cell we provide ListConvolve (g) as a ",
  Cell[BoxData[
      \(TraditionalForm\`5\^th\)]],
  " argument and it uses the head (g) in place of Times."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListCorrelate[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, b6}, {1, \(-1\)}, 
      lst, g]\)], "Input"],

Cell[BoxData[
    \({g[a1, b1] + g[a2, b2] + g[a3, b3] + g[a4, b4], 
      g[a1, b2] + g[a2, b3] + g[a3, b4] + g[a4, b5], 
      g[a1, b3] + g[a2, b4] + g[a3, b5] + g[a4, b6]}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "In the next cell we provide ",
  "ListCorrelate",
  " (g, h) as a ",
  Cell[BoxData[
      \(TraditionalForm\`5\^th\)]],
  " and ",
  Cell[BoxData[
      \(TraditionalForm\`6\^th\)]],
  " arguments respectively and it uses the heads (g) and (h) in place of \
Times and Plus respectively."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListCorrelate[{a1, a2, a3, a4}, {b1, b2, b3, b4, b5, b6}, {1, \(-1\)}, 
      lst, g, h]\)], "Input"],

Cell[BoxData[
    \({h[g[a1, b1], g[a2, b2], g[a3, b3], g[a4, b4]], 
      h[g[a1, b2], g[a2, b3], g[a3, b4], g[a4, b5]], 
      h[g[a1, b3], g[a2, b4], g[a3, b5], g[a4, b6]]}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["ListCorrelate with matrices", "Subsection"],

Cell["In the next cell we perform a ListCorrelate on matrices.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    RowBox[{
      RowBox[{"m1", "=", 
        RowBox[{"(", GridBox[{
              {"a1", "a2", "a3"},
              {"b1", "b2", "b3"},
              {"c1", "c2", "c3"}
              }], ")"}]}], ";"}], "\n", 
    RowBox[{
      RowBox[{"m2", "=", 
        RowBox[{"(", GridBox[{
              {"x1", "x2", "x3"},
              {"y1", "y2", "y3"},
              {"z1", "z2", "z3"}
              }], ")"}]}], ";"}], "\n", \(ListCorrelate[m1, m2]\)}], "Input"],

Cell[BoxData[
    \({{a1\ x1 + a2\ x2 + a3\ x3 + b1\ y1 + b2\ y2 + b3\ y3 + c1\ z1 + 
          c2\ z2 + c3\ z3}}\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell shows how the same ListCorrelate can be done as Dot products on \
parts of the matrices.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListCorrelate[m1, 
        m2] === {{Part[m1, 1] . Part[m2, 1] + Part[m1, 2] . Part[m2, 2] + 
            Part[m1, 3] . Part[m2, 3]}}\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "We can give ",
  "ListCorrelate",
  " a level specification as a ",
  Cell[BoxData[
      \(TraditionalForm\`7\^th\)]],
  " argument.  The next cell shows that level (2) is the default \
specification when working on matrices. "
}], "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListCorrelate[m1, m2] === \[IndentingNewLine]ListCorrelate[m1, 
        m2, {1, \(-1\)}, m2, Times, Plus, 2]\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell we give ListCorrelate the integer (1) as a level \
specification.\
\>", "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListCorrelate[m1, m2, {1, \(-1\)}, m2, Times, Plus, 1]\)], "Input"],

Cell[BoxData[
    \({{a1\ x1 + b1\ y1 + c1\ z1, a2\ x2 + b2\ y2 + c2\ z2, 
        a3\ x3 + b3\ y3 + c3\ z3}}\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell shows how the same ListCorrelate can be done as Dot products on \
parts of the matrices.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(mat1 = Transpose[m1];\)\), "\n", 
    \(mat2 = Transpose[m2]; \n\), "\[IndentingNewLine]", 
    \(ListCorrelate[m1, m2, {1, \(-1\)}, m2, Times, Plus, 
        1] === {{Part[mat1, 1] . Part[mat2, 1], 
          Part[mat1, 2] . Part[mat2, 2], 
          Part[mat1, 3] . Part[mat2, 3]}}\)}], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell shows two ways of expressing the default for the third argument \
of ListCorrelate when working with matrices.\
\>", "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[CellGroupData[{

Cell[BoxData[
    \(ListCorrelate[m1, m2] === ListCorrelate[m1, m2, {1, \(-1\)}] === 
      ListCorrelate[m1, m2, {{1, 1}, {\(-1\), \(-1\)}}]\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell["\<\
I am having a hard time seeing a pattern to how a ListConvolution on matrices \
is done in different cases.  I would like to have a complete understanding \
for what the third argument of ListCorrelate does when working with matrices, \
but it's too hard to decipher.  For example I would like to understand the \
result of the examples below.  \
\>", "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[BoxData[
    \(ListCorrelate[m1, m2, {1, 1}]\)], "Input"],

Cell[BoxData[
    \(ListCorrelate[m1, m2, {{\(-1\), \(-1\)}, {1, 1}}]\)], "Input"],

Cell[BoxData[
    \(ListCorrelate[m1, m2, {\(-1\), 1}, m2, Times, Plus, 1]\)], "Input"],

Cell["\<\
I also understand we can also perform a ListCorrelate on tensors, but that is \
also too confusing for me to think about.\
\>", "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Map", "Section"],

Cell[TextData[{
  "Map and (f[#]&) can be used to map any function (f) to each argument under \
any Head.  In the next Cell (Exp[_]) mapped to each term in a sum.  Many \
users understand what Map does with the default level specification.  In the \
first example the default level specification is used, and Exp[_] is mapped \
to each expression at the first level.  The #& notation is explained in the \
discussion of ",
  ButtonBox["Function",
    ButtonData:>"Function",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text",
  CellTags->"Map"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[x];\)\), "\[IndentingNewLine]", 
    \(\(demo = 
        x + Cos[\(\(\@x\) \[Pi]\)\/3] + Sin[\(\@x\ \[Pi]\)\/6];\)\), "\n", 
    \(Map[\ Exp[#] &, \ demo]\)}], "Input"],

Cell[BoxData[
    \(\[ExponentialE]\^x + \[ExponentialE]\^Cos[\(\[Pi]\ \@x\)\/3] + \
\[ExponentialE]\^Sin[\(\[Pi]\ \@x\)\/6]\)], "Output"]
}, Open  ]],

Cell["\<\
Note:  The shorthand notation for Map is   /@ .  This shorthand notation is \
used to do the same as the previous line.  At first this notation seems very \
cryptic.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(\(\ \)\(\(Exp[#] &\) /@ demo\)\)\)], "Input"],

Cell[BoxData[
    \(\[ExponentialE]\^x + \[ExponentialE]\^Cos[\(\[Pi]\ \@x\)\/3] + \
\[ExponentialE]\^Sin[\(\[Pi]\ \@x\)\/6]\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "If you need to specify a level specification the short hand notation is \
not at all convenient.  Different variations of ",
  ButtonBox["level specification",
    ButtonData:>"Level Specification",
    ButtonStyle->"Hyperlink"],
  " are demonstrated in the lines below.  Many other commands allow a user to \
specify the level specification, and the conventions are always the same.  \
Level specification {3} means to only map the function to Level 3.  In the \
next Cell we Map \n(# + 1)& to all subexpressions in (demo) at Level {3}.\n "
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Map[\((# + z)\) &, demo, {3}]\)], "Input"],

Cell[BoxData[
    \(x + Cos[\((1\/3 + z)\)\ \((\[Pi] + z)\)\ \((\@x + z)\)] + 
      Sin[\((1\/6 + z)\)\ \((\[Pi] + z)\)\ \((\@x + z)\)]\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Level specification {-1} refers to the smallest subexpressions (the \
atoms).  In the next cell we add (1) to each atom in (demo).  It should be \
pointed out that the list of atoms includes 1/6, 1/3,  and 1/2, instead of 1, \
2, 3, 6.  This is because since ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " rational numbers as atoms.  Complex numbers are also considered atoms.  \n\
   "
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Map[\ \((# + 1)\) &, demo, \ {\(-1\)}]\)], "Input"],

Cell[BoxData[
    \(1 + x + Cos[4\/3\ \((1 + \[Pi])\)\ \((1 + x)\)\^\(3/2\)] + 
      Sin[7\/6\ \((1 + \[Pi])\)\ \((1 + x)\)\^\(3/2\)]\)], "Output"]
}, Open  ]],

Cell["\<\
Level specification (2) refers to all levels from (Level 1) to (Level 2).  \
Now we Map ( #/z&) to all subexpressions of (demo) from (Level 1) to (Level \
2).
 \
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Map[#\/z &, demo, 2]\)], "Input"],

Cell[BoxData[
    \(x\/z + Cos[\(\[Pi]\ \@x\)\/\(3\ z\)]\/z + 
      Sin[\(\[Pi]\ \@x\)\/\(6\ z\)]\/z\)], "Output"]
}, Open  ]],

Cell["\<\
The next line Maps (#+z&) to all subexpressions of (demo) at (Level 2) and \
(Level 3).
 \
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Map[# + z &, demo, \ {2, 3}]\)], "Input"],

Cell[BoxData[
    \(x + Cos[z + \((1\/3 + z)\)\ \((\[Pi] + z)\)\ \((\@x + z)\)] + 
      Sin[z + \((1\/6 + z)\)\ \((\[Pi] + z)\)\ \((\@x + z)\)]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Heads Option", "Subsection"],

Cell["\<\
Map has a Heads option like several other functions, but it's hard to think \
of a practical use for this feature.  By default Map uses the setting (Heads\
\[Rule]False).  If your writing a program and you need to make it full proof \
you should use the form  Map[f, expr, Heads\[Rule]False]  instead of the \
shorter (and normally equivalent) form  f/@expr.  The reason is that the user \
may have changed the default setting via SetOptions[Map, Heads\[Rule]True] \
which would change the behavior of  f/@expr.  Now consider the next cell to \
see how Map uses the Heads option.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[f, h];\)\), "\[IndentingNewLine]", 
    \(\(expr = {h[1], {2, 3}};\)\), "\[IndentingNewLine]", 
    \(Map[f, expr, {2}, \ Heads \[Rule] False]\)}], "Input"],

Cell[BoxData[
    \({h[f[1]], {f[2], f[3]}}\)], "Output"]
}, Open  ]],

Cell["\<\
In the cell above (f) was mapped to expressions at positions {1,1}, {2,1}, \
and {2,2} since they are all the expressions at level 2.  In the next cell \
the same example is evaluated with the setting (Heads\[Rule]True) and (f) is \
also mapped to every head at level 2. In this case the heads at level 2 are \
(h) at position {1,0} and List at position {2,0}.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Map[f, expr, {2}, Heads \[Rule] True]\)], "Input"],

Cell[BoxData[
    \({\(f[h]\)[f[1]], \(f[List]\)[f[2], f[3]]}\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["MapAt", "Section"],

Cell["\<\
MapAt allows us to Map a function to specified positions.  The next cell maps \
foo to position 3.\
\>", "Text",
  CellTags->"MapAt"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(MapAt[foo, {a, b, c, d, e, f}, 3]\)}], "Input"],

Cell[BoxData[
    \({a, b, foo[c], d, e, f}\)], "Output"]
}, Open  ]],

Cell["The next cell maps foo to positions {2} and {4}.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(MapAt[foo, {a, b, c, d, e, f}, {{2}, {4}}]\)], "Input"],

Cell[BoxData[
    \({a, foo[b], c, foo[d], e, f}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["MapIndexed", "Section"],

Cell["\<\
It's a little difficult to learn how to use the MapIndexed function.  In the \
next cell I clear values form all variables and give the simplest use of \
MapIndexed.  Notice the results are in the form f[2,{1}],  f[3,{2}],  etc.\
\>", "Text",
  CellTags->"MapIndexed"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(\(lst = Prime[Range[6]];\)\), "\n", 
    \(MapIndexed[foo, lst] // TableForm\)}], "Input"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {\(foo[2, {1}]\)},
          {\(foo[3, {2}]\)},
          {\(foo[5, {3}]\)},
          {\(foo[7, {4}]\)},
          {\(foo[11, {5}]\)},
          {\(foo[13, {6}]\)}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      TableForm[ {
        foo[ 2, {1}], 
        foo[ 3, {2}], 
        foo[ 5, {3}], 
        foo[ 7, {4}], 
        foo[ 11, {5}], 
        foo[ 13, {6}]}]]], "Output"]
}, Open  ]],

Cell[TextData[{
  "Instead of the form above, one might rather have the result of MapIndexed \
in the form \nf[2,1], f[3,2], etc.  In the line above (f) is applied to two \
arguments, and the second argument has the head List.  A result in the form  \
f[2,1], f[3,2]  is obtained in the next line by removing the head list from \
the second argument.  Technically the head was changed to Sequence, then \
Sequence was removed during evaluation.  The #& notation is explained in the \
discussion of ",
  ButtonBox["Function",
    ButtonData:>"Function",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(MapIndexed[foo[#1, Sequence @@ #2] &, lst] // TableForm\)], "Input"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {\(foo[2, 1]\)},
          {\(foo[3, 2]\)},
          {\(foo[5, 3]\)},
          {\(foo[7, 4]\)},
          {\(foo[11, 5]\)},
          {\(foo[13, 6]\)}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      TableForm[ {
        foo[ 2, 1], 
        foo[ 3, 2], 
        foo[ 5, 3], 
        foo[ 7, 4], 
        foo[ 11, 5], 
        foo[ 13, 6]}]]], "Output"]
}, Open  ]],

Cell["\<\
Another use of MapIndexed involves mapping two functions as in the line \
below.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(MapIndexed[{foo[#1], goo[#2]} &, lst] // TableForm\)], "Input"],

Cell[BoxData[
    TagBox[GridBox[{
          {\(foo[2]\), \(goo[{1}]\)},
          {\(foo[3]\), \(goo[{2}]\)},
          {\(foo[5]\), \(goo[{3}]\)},
          {\(foo[7]\), \(goo[{4}]\)},
          {\(foo[11]\), \(goo[{5}]\)},
          {\(foo[13]\), \(goo[{6}]\)}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      Function[ BoxForm`e$, 
        TableForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell["\<\
In the next line (g@@#2) is used to ensure we end up with g[1], g[2], .. \
instead of g[{1}], g[{2}], ....\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(MapIndexed[{foo[#1], goo @@ #2} &, lst] // TableForm\)], "Input"],

Cell[BoxData[
    TagBox[GridBox[{
          {\(foo[2]\), \(goo[1]\)},
          {\(foo[3]\), \(goo[2]\)},
          {\(foo[5]\), \(goo[3]\)},
          {\(foo[7]\), \(goo[4]\)},
          {\(foo[11]\), \(goo[5]\)},
          {\(foo[13]\), \(goo[6]\)}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      Function[ BoxForm`e$, 
        TableForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell[TextData[{
  "By giving MapIndexed a ",
  ButtonBox["level specification",
    ButtonData:>"Level Specification",
    ButtonStyle->"Hyperlink"],
  " for only level 2 you can MapIndex to each element of a matrix. "
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(MapIndexed[foo, {{a, b}, {c, d}}, {2}]\)], "Input"],

Cell[BoxData[
    \({{foo[a, {1, 1}], foo[b, {1, 2}]}, {foo[c, {2, 1}], 
        foo[d, {2, 2}]}}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MapIndexed[{foo[#1], goo[Sequence @@ #2]} &, {{a, b}, {c, 
          d}}, {2}]\)], "Input"],

Cell[BoxData[
    \({{{foo[a], goo[1, 1]}, {foo[b], goo[1, 2]}}, {{foo[c], 
          goo[2, 1]}, {foo[d], goo[2, 2]}}}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "MapIndexed can take a level specification using the same conventions as \
the examples where level specification is explained.  A ",
  ButtonBox["practical example",
    ButtonData:>"MapIndexedExample",
    ButtonStyle->"Hyperlink"],
  " that uses MapIndexed with a level specification is given in the section \
on Coefficient and CoefficientList."
}], "Text"],

Cell[CellGroupData[{

Cell["Heads Option", "Subsection"],

Cell["\<\
MapIndexed has a Heads option with the default setting (Heads\[Rule]False).  \
In the next cell we use (Heads\[Rule]True) and the function with an index is \
mapped to the head of {a,b,c}.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(MapIndexed[foo, {a, b, c}, Heads \[Rule] True]\)], "Input"],

Cell[BoxData[
    \(\(foo[List, {0}]\)[foo[a, {1}], foo[b, {2}], foo[c, {3}]]\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["MapThread", "Section"],

Cell["\<\
MapThread can be used to Apply a function to each column of a matrix as I do \
in the next cell. However, before using MapThread I clear the values from all \
variables.\
\>", "Text",
  FontFamily->"Times New Roman",
  CellTags->"MapThread"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(\(mat = {{a, b, c, d, e, f}, {1, 2, 3, 4, 5, 6}};\)\), "\n", 
    \(MapThread[foo, mat]\)}], "Input"],

Cell[BoxData[
    \({foo[a, 1], foo[b, 2], foo[c, 3], foo[d, 4], foo[e, 5], 
      foo[f, 6]}\)], "Output"]
}, Open  ]],

Cell["\<\
 MapThread is equivalent to using Map followed by Apply at level 2 (see \
below).  I have to wonder why it isn't called ApplyThread.\
\>", "Text",
  FontFamily->"Times New Roman"],

Cell[CellGroupData[{

Cell[BoxData[
    \(MapThread[foo, mat] === Apply[foo, Thread[mat], 2]\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell["\<\
In the next few lined we use MapThread to work with the tensor below.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(Off[General::spell1]\), "\n", 
    \(\(tensor = {\n\t\t{{a111, a112, a113, a114}, {a121, a122, a123, 
              a124}}, \n\t\t{{a211, a212, a213, a214}, \n\t\t\t{a221, a222, 
              a223, a224}}, \n\t\t{{a311, a321, a323, a324}, \n\t\t\t{a321, 
              a322, a323, a324}}\n\t};\)\), "\n", 
    \(On[General::spell1]\), "\n", 
    \(Dimensions[tensor]\)}], "Input"],

Cell[BoxData[
    \({3, 2, 4}\)], "Output"]
}, Open  ]],

Cell["In the next line MapThread is used on the above tensor.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(t1 = MapThread[foo, tensor];\)\), "\n", 
    \(t1[\([1]\)]\)}], "Input"],

Cell[BoxData[
    \(foo[{a111, a112, a113, a114}, {a211, a212, a213, a214}, {a311, a321, 
        a323, a324}]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(t1[\([2]\)]\)], "Input"],

Cell[BoxData[
    \(foo[{a121, a122, a123, a124}, {a221, a222, a223, a224}, {a321, a322, 
        a323, a324}]\)], "Output"]
}, Open  ]],

Cell["\<\
MapThread can work on the tensor above with a third argument as in the next \
example, and gives a very different result than the previous example.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(t2 = MapThread[foo, tensor, 2];\)\), "\n", 
    \(t2[\([1]\)]\)}], "Input"],

Cell[BoxData[
    \({foo[a111, a211, a311], foo[a112, a212, a321], foo[a113, a213, a323], 
      foo[a114, a214, a324]}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(t2[\([2]\)]\)], "Input"],

Cell[BoxData[
    \({foo[a121, a221, a321], foo[a122, a222, a322], foo[a123, a223, a323], 
      foo[a124, a224, a324]}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "An interesting application of MapThread is given below where MapThread is \
used to apply a list of functions to a list of arguments.  The #& notation is \
explained in the discussion of ",
  ButtonBox["Function",
    ButtonData:>"Function",
    ButtonStyle->"Hyperlink"],
  ".\n "
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(funcs = {f1, \ f2, \ f3};\)\), "\n", 
    \(\(values = {val1, val2, val3};\)\), "\n", 
    \(MapThread[\((#1[#2])\) &, \ {funcs, values}]\)}], "Input"],

Cell[BoxData[
    \({f1[val1], f2[val2], f3[val3]}\)], "Output"]
}, Open  ]],

Cell["\<\
Alan Hayes provided the code below to make a list of replacement rules.\
\>", "Text",
  FontFamily->"Times New Roman"],

Cell[CellGroupData[{

Cell[BoxData[
    \(pos = Array[p, {4, 3}]\)], "Input"],

Cell[BoxData[
    \({{p[1, 1], p[1, 2], p[1, 3]}, {p[2, 1], p[2, 2], p[2, 3]}, {p[3, 1], 
        p[3, 2], p[3, 3]}, {p[4, 1], p[4, 2], p[4, 3]}}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(posval = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}, {11, 12, 13}};\)\), "\n", 
    \(Flatten[MapThread[Rule, {pos, posval}, 2]]\)}], "Input"],

Cell[BoxData[
    \({p[1, 1] \[Rule] 1, p[1, 2] \[Rule] 2, p[1, 3] \[Rule] 3, 
      p[2, 1] \[Rule] 4, p[2, 2] \[Rule] 5, p[2, 3] \[Rule] 6, 
      p[3, 1] \[Rule] 7, p[3, 2] \[Rule] 8, p[3, 3] \[Rule] 9, 
      p[4, 1] \[Rule] 11, p[4, 2] \[Rule] 12, p[4, 3] \[Rule] 13}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["MakeBoxes", "Section"],

Cell[TextData[{
  "The code below will ensure any difference of two terms is displayed as a \
difference when you use any form that outputs 2D expressions (StandardForm, \
MatrixForm, TableForm, etc.).   TraditionalForm displays ",
  StyleBox["(b-a)", "InlineInput"],
  " even if you don't make a special definition, it also has many other \
conventions that come with it."
}], "Text",
  CellTags->"MakeBoxes"],

Cell["\<\
The kernel automatically calls MakeBoxes when it needs to format an \
expression using 2D notation.  The rules for MakeBoxes specify that how \
expressions with a certain form are should be displayed one way, and other \
forms should be displayed different ways.  Typically a definition  says a \
certain box structure should be built using parts of the given expression.  \
The various parts that are used in the box structure are often smaller \
expressions that also need to be made into 2D expressions, so MakeBoxes must \
be called on these smaller expressions.  This continues recursively until \
MakeBoxes formats atoms directly into box structures.

When the kernel calls MakeBoxes it passes the form used in the second \
argument. The form can be StandardForm, TraditionalForm, MatrixForm, or any \
other form that formats the output as 2D expressions.  A rule for MakeBoxes \
can have a specific form for the second argument as in MakeBoxes[pattn, \
StandardForm] in which case the definition is only used for StandardForm.  \
You can even define your own for using MakeBoxes[pattn, MyForm], and the \
provided formatting rules will be used when you evaluate expr//MyForm.  In \
the definition below the second argument of MakeBoxes is the pattern (form_). \
 In this case the formatting rule is used for any form that uses 2D \
expressions to format the output.

MakeBoxes has the HoldAllComplete attribute.  As a result you can't use \
MakeBoxes[Evaluate[expr], form] to force the evaluation of (expr).  If (expr) \
must complete evaluation that can be accomplished using 
( MakeBoxes@@{expr,form} ).\
\>", "Text"],

Cell[BoxData[
    \(\(MakeBoxes[\((n_Real | n_Integer | n_Rational)\) a_.  + b_ /; \n
            Head[b] =!= Plus && n < 0, form_] := \n
        RowBox[{MakeBoxes[b, form], "\<-\>", 
            MakeBoxes @@ {\(-n\)\ \ a, form}}];\)\)], "Input"],

Cell["\<\
The above rules for MakeBoxes will produce a more readable display of \
expressions such as the following:\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[a, y];\)\), "\[IndentingNewLine]", 
    \(Log[y - 2/3]/Sqrt[y - 4\ a] - Exp[y - 2.4]\)}], "Input"],

Cell[BoxData[
    \(Log[y - 2\/3]\/\@\(y - 4\ a\) - \[ExponentialE]\^\(y - 2.4`\)\)], \
"Output"]
}, Open  ]],

Cell["The rules for MakeBoxes are stored as FormatValues.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(FormatValues[MakeBoxes]\)], "Input"],

Cell[BoxData[
    \({HoldPattern[
          MakeBoxes[\((n_Real | n_Integer | n_Rational)\)\ a_.  + b_ /; 
              Head[b] =!= Plus && n < 0, form_]] \[RuleDelayed] 
        RowBox[{MakeBoxes[b, form], "-", 
            MakeBoxes @@ {\(-n\)\ a, form}}]}\)], "Output"]
}, Open  ]],

Cell["\<\
It may be tempting to write a slightly simpler implementation, but this \
simpler implementation has flaws.\
\>", "Text"],

Cell["\<\
The simpler implementation is:
    MakeBoxes[(n_Real|n_Integer|n_Rational)a_.+b_/;
    Head[b]=!=Plus&&n<0,form_]:=
    RowBox[{MakeBoxes[b,form],MakeBoxes@@{n*a,form}}];

In private email Neil Soiffer of Wolfram Research noted that the version \
above has a few problems.
(1) The '-' sign is grouped with the subsequent term as a unary \"minus\", \
instead of binary \"difference\".
This will effect spacing after the minus (not symmetric with respect to '-' \
as is easily seen with 'a-b').
(2) Grouping doesn't work well.  If one evaluates (a-b) and triple clicks on \
the '-' in the output, automatic grouping doesn't work right.
(3)  Perhaps the worst problem is that because '-' is interpreted as a unary \
minus, there is implied multiplication between the 'a' and the '-b' and so it \
will evaluate incorrectly.  Evaluate (a-b) and select the output cell, go to
cell | cell properties | cell evaluatable to make the output cell \
evaluatable, and then evaluate the cell.  The result looks like '-a b'.\
\>", "Text"],

Cell[CellGroupData[{

Cell["Another example", "Subsection"],

Cell["\<\
David park noted that the minus sign gets pulled into the sum in the next \
input.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\((\(-1\)\/2)\) \((a + 2.3*b + c)\)\)], "Input"],

Cell[BoxData[
    \(1\/2\ \((\(-a\) - 2.3`\ b - c)\)\)], "Output"]
}, Open  ]],

Cell["\<\
By looking at the box structure of the output cell above you can see what we \
need to use in a MakeBoxes definition.  The input in the next cell does the \
job.  The first definition ensures the negative sign is factored out, and the \
second definition puts the negative sign in the numerator.\
\>", "Text"],

Cell[BoxData[{
    \(MakeBoxes[a_*\(b : Plus[_?Negative*_, \((_?Negative*_)\) .. ]\), 
        form : \((StandardForm | TraditionalForm)\)] := 
      RowBox[{MakeBoxes @@ {\(-a\), form}, 
          RowBox[{"\<(\>", 
              MakeBoxes @@ {\(-b\), 
                  form}, "\<)\>"}]}]\n\), "\[IndentingNewLine]", 
    \(MakeBoxes[p_Rational?Negative, 
        form : \((StandardForm | TraditionalForm)\)] := 
      FractionBox[MakeBoxes @@ {Numerator[p], form}, 
        MakeBoxes @@ {Denominator[p], form}]\)}], "Input"],

Cell["Now the negative sign is always factored out.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \({\(-\((1\/2)\)\) \((a + 2.3*b + c)\), \(1\/2\) \((\(-a\) - 2.3*b - 
            c)\)}\)], "Input"],

Cell[BoxData[
    \({\(\(-1\)\/2\) \((a + 2.3`\ b + c)\), \(\(-1\)\/2\) \((a + 2.3`\ b + 
            c)\)}\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["MatchQ", "Section"],

Cell["\<\
In order for a pattern to match an expression, the pattern and the expression \
it is compared with must have the same FullForm after evaluation.  For \
example the expression a/b has the FullForm Times[a,Power[b,-1]], so it \
doesn't match the pattern (_Rational).  MatchQ is a very good tool to use \
when testing a pattern to see if it matches the intended expressions.  Some \
interesting examples of MatchQ are given below.\
\>", "Text",
  CellTags->"MatchQ"],

Cell[CellGroupData[{

Cell[BoxData[
    \({MatchQ[3/2, p_/q_], MatchQ[3/2, _Rational]}\)], "Input",
  CellTags->"MatchQ"],

Cell[BoxData[
    \({False, True}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "The head ",
  ButtonBox["HoldPattern",
    ButtonData:>"HoldPattern",
    ButtonStyle->"Hyperlink"],
  " used in next cell is explained in another section."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[a, b];\)\), "\n", 
    \({MatchQ[a/b, _Rational], \nMatchQ[a/b, _/_], \n
      MatchQ[a/b, HoldPattern[_/_]], \nMatchQ[a/b, p_/q_]}\)}], "Input"],

Cell[BoxData[
    \({False, False, True, True}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \({MatchQ[a/2, p_/q_], \n\tMatchQ[a/2, _Rational], \n\t
      MatchQ[a/2, _*_Rational]}\)], "Input"],

Cell[BoxData[
    \({False, False, True}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \({MatchQ[1/Sqrt[b], _/Sqrt[_]], 
      MatchQ[1/Sqrt[b], HoldPattern[_/Sqrt[_]]], \n\t
      MatchQ[1/Sqrt[b], 1/Sqrt[_]]}\)], "Input"],

Cell[BoxData[
    \({False, False, True}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \({MatchQ[a/Sqrt[b], _/Sqrt[_]], \n
      MatchQ[a/Sqrt[b], HoldPattern[_/Sqrt[_]]], \n
      MatchQ[a/Sqrt[b], HoldPattern[x_\ *y_^\((\(-1\)/2)\)]], \n
      MatchQ[a/Sqrt[b], HoldPattern[x_/Sqrt[y_]]], \n
      MatchQ[a/Sqrt[b], x_\ *y_^\((\(-1\)/2)\)], \n
      MatchQ[a/Sqrt[b], x_/Sqrt[y_]]}\)], "Input"],

Cell[BoxData[
    \({False, False, False, False, True, True}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \({MatchQ[2 + 3  I, a_ + b_*I], MatchQ[2 + 3  I, _Complex]}\)], "Input"],

Cell[BoxData[
    \({False, True}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \({MatchQ[a + b\ I, _Complex], \nMatchQ[a + b\ I, _ + _Complex], \n
      MatchQ[a + b\ I, _ + _*I], \nMatchQ[a + b\ I, \ _ + _*Complex[0, 1]], \n
      MatchQ[a + b\ I, HoldPattern[_ + _*I]], \n
      MatchQ[a + b\ I, HoldPattern[_ + _*Complex[0, 1]]], \n
      MatchQ[a + b\ I, _ + _\ *_Complex\ ], \n
      MatchQ[a + b\ I, \ x_ + y_*I]}\)], "Input"],

Cell[BoxData[
    \({False, False, False, False, False, True, True, True}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(data = {{2, 3}, {1, 4}, {6, 7}, {8, 6}, {2, 1}};\)\), "\n", 
    \(MatchQ[data, {{_, _} .. }]\)}], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "I don't provide further examples, but any combination of pattern matching \
constructs can be used with MatchQ.  Nuances of ",
  ButtonBox["pattern matching",
    ButtonData:>"Pattern-Matching",
    ButtonStyle->"Hyperlink"],
  " are discussed in another section."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["MemberQ", "Section"],

Cell["\<\
The first example is simple. MemberQ finds that the sum includes (x) to an \
Integer power.\
\>", "Text",
  CellTags->"MemberQ"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[x, y];\)\), "\[IndentingNewLine]", 
    \(MemberQ[1 + x + x\^2, Power[x, _Integer]]\)}], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell["\<\
You might wonder why MemberQ doesn't return True in this case.  The reason is \
that the default level specification doesn't have MemberQ check the whole \
expression.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(MemberQ[x\^2, Power[x, _Integer]]\)], "Input"],

Cell[BoxData[
    \(False\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Next MemberQ is given a ",
  ButtonBox["level specification",
    ButtonData:>"Level Specification",
    ButtonStyle->"Hyperlink"],
  " that has it check all levels including the whole expression, and True is \
returned."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(MemberQ[x\^2, Power[x, _Integer], {0, \(-1\)}]\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Next the default level specification stops MemberQ from looking deep \
enough to find the ",
  Cell[BoxData[
      \(TraditionalForm\`x\^2\)]],
  "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(MemberQ[{1 + x + x\^2, y}, Power[x, _Integer]]\)], "Input"],

Cell[BoxData[
    \(False\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "In the next example MemberQ is given a level specification deep enough to \
find the ",
  Cell[BoxData[
      \(TraditionalForm\`x\^2\)]],
  "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(MemberQ[{1 + x + x\^2, y}, Power[x, _Integer], {0, \(-1\)}]\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "I don't provide further examples, but any combination of pattern matching \
constructs can be used with MemberQ.  Nuances of ",
  ButtonBox["pattern matching",
    ButtonData:>"Pattern-Matching",
    ButtonStyle->"Hyperlink"],
  " are discussed in another section."
}], "Text"],

Cell[CellGroupData[{

Cell["Heads Option", "Subsection"],

Cell["\<\
MemberQ has a Heads option with the default setting (Heads\[Rule]False).  So \
in the next example MemberQ doesn't check the heads of subexpressions.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(MemberQ[1 + x + x\^2, Plus]\)], "Input"],

Cell[BoxData[
    \(False\)], "Output"]
}, Open  ]],

Cell["\<\
In the next example the setting (Heads\[Rule]True) is used and MemberQ does \
check the heads of subexpressions.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(MemberQ[1 + x + x\^2, Plus, Heads \[Rule] True]\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Message", "Section"],

Cell[TextData[{
  "In addition to what I present here you might also want to study \
(PackageDesignTutorial.nb) posted at \n",
  ButtonBox["http://library.wolfram.com/infocenter/Conferences/184",
    ButtonData:>{
      URL[ "http://library.wolfram.com/infocenter/Conferences/184"], None},
    ButtonStyle->"Hyperlink"],
  "\nIn that notebook you will find a section on error handling where good \
use of messages is covered.  A non-trivial application of messages is given \
below, but first I define a function in the next cell that computes the \
magnitude of a vector is defined and the function is used to find the \
magnitude of the vector {2, 3, 4}. "
}], "Text",
  CellTags->"Message"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(Mag[v_?VectorQ] := \@Plus @@ \((v . v)\)\), "\n", 
    \(Mag[{2, 3, 4}]\)}], "Input"],

Cell[BoxData[
    \(\@29\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "The next cell demonstrates that when ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " is given invalid input it normally posts a message and returns the \
expression that is undefined."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Sin[\[Pi]/2, \ 0]\)], "Input"],

Cell[BoxData[
    \(Sin[\[Pi]\/2, 0]\)], "Output"]
}, Open  ]],

Cell["\<\
We would like our Mag function to behave like a built in function when given \
an invalid argument.  The next cell defines a message for this purpose.\
\>", "Text"],

Cell[BoxData[
    \(\(Mag::vect = "\<Mag is only defined for vectors.  The expression `1` \
is not a vector.\>";\)\)], "Input"],

Cell["\<\
We could use the definition  Mag[expr_]:=Message[mag::vect,expr].  That would \
cause Mag[expr] with an invalid argument to evaluate to a message and the \
input expression would not be returned.  But we want Mag to work like a \
built-in function so we have it post a message, and return expression passed \
to Mag.  This can be done by putting the message in a condition as in the \
next line.  When this is done the condition will never evaluate to True, so \
the right side of the definition can be almost anything.\
\>", "Text"],

Cell[BoxData[
    \(Mag[expr_] /; 
        Message[Mag::vect, expr] := "\<Never get here.\>"\)], "Input"],

Cell[TextData[{
  "Now when Mag is given an argument that isn't a vector it prints a message \
and returns the input expression since no definition matched.  Here the \
argument given to Mag was  ",
  Cell[BoxData[
      \(TraditionalForm\`{{1, 96\/4 - 5}, {2, 3}}\)]],
  " which evaluated to {{1,19},{2,3}}.  None of the Mag definitions apply, so \
 ",
  Cell[BoxData[
      \(TraditionalForm\`Mag[{{1, 19}, {2, 3}}]\)]],
  "  is returned."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Mag[{{1, 96\/4 - 5}, {2, 3}}]\)], "Input"],

Cell[BoxData[
    \(Mag[{{1, 19}, {2, 3}}]\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Mathematica has an undocumented function called ArgumentCountQ which can \
be useful when making definitions for functions that post a message when the \
function is given an incorrect number of arguments. An explanation of this \
feature can be found by looking up ArgumentCountQ at  ",
  ButtonBox["http://support.wolfram.com/Kernel/Symbols/",
    ButtonData:>{
      URL[ "http://support.wolfram.com/Kernel/Symbols/"], None},
    ButtonStyle->"Hyperlink"]
}], "Text"],

Cell[CellGroupData[{

Cell["Checking for non-options", "Subsection"],

Cell["\<\
We can also account for the possibility that one or more of several arguments \
are not options when only options are allowed in these positions.  This is \
what I do with Func defined below.  At the begining of the next cell I clear \
values assigned to all global variables.\
\>", "Text"],

Cell[BoxData[{
    \(\(\(ClearAll["\<Global`*\>"];\)\(\[IndentingNewLine]\)
    \) (*\ 
      Next\ I\ make\ Func\ do\ something\ when\ the\ arguments\ given\ are\ \
\(\(correct\)\(.\)\)\ *) \), "\[IndentingNewLine]", 
    \(\(Func[expr_, 
          opts___?OptionQ] := {expr};\)\[IndentingNewLine]\[IndentingNewLine] \
(*\ The\ next\ definition\ is\ only\ used\ if\ the\ previous\ definition\ \
didn' t\ \(\(match\)\(.\)\)\ *) \), "\[IndentingNewLine]", 
    \(\(\(Func[\ _, opts__] /; 
          With[{nonOptions = 
                Cases[Flatten[{opts}], _?\((\(! OptionQ[#]\) &)\)]}, \
\[IndentingNewLine]nonOptions =!= {} && 
              If[Length[nonOptions] === 1, \[IndentingNewLine]Message[
                  Func::opt, 
                  StringTake[
                    ToString@
                      nonOptions, {2, \(-2\)}]], \[IndentingNewLine]Message[
                  Func::opts, 
                  StringTake[
                    ToString@
                      nonOptions, {2, \(-2\)}]]\[IndentingNewLine]]\
\[IndentingNewLine]] := "\<Never get here.\>";\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(\(\(Func::opt = "\<`1` was was used in Func as an argument beyond the \
first argument. Func only allows options beyond the first argument.\>";\)\(\n\
\)
    \)\), "\n", 
    \(\(Func::opts = "\<Expressions, `1`, were given beyond the first \
argument in Func. Only options are allowed beyond the first \
argument.\>";\)\)}], "Input"],

Cell["\<\
Next we see Func[__] evaluates whether there are options or not.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(Func[x + y]\), "\[IndentingNewLine]", 
    \(Func[a + b, opt1 \[Rule] val1, opt2 \[RuleDelayed] val2]\)}], "Input"],

Cell[BoxData[
    \({x + y}\)], "Output"],

Cell[BoxData[
    \({a + b}\)], "Output"]
}, Open  ]],

Cell["\<\
When one or more argument beyond the first in Func[__] are not options we get \
messages as below, and the original expression is returned.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Func[a + b, opt1 \[Rule] val1, opt, opt2 \[Rule] val2]\)], "Input"],

Cell[BoxData[
    \(Func[a + b, opt1 \[Rule] val1, opt, opt2 \[Rule] val2]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Func[a + b, opt1 \[Rule] val1, opt, opt2 \[Rule] val2, opt3]\)], "Input"],

Cell[BoxData[
    \(Func[a + b, opt1 \[Rule] val1, opt, opt2 \[Rule] val2, 
      opt3]\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["General Messages", "Subsection"],

Cell[TextData[{
  "Lets take another look at Mag defined above.  We could also define a \
message for the case where Mag gets more that one argument.  However, we \
would be wise to note define a special message for when too many arguments \
are given, because ",
  StyleBox["Mathematica ",
    FontSlant->"Italic"],
  " already has a set of generic messages that can be associated with many \
functions.  All the built-in messages are defined in the file (messages.m).  \
In the next cell the message used is  ",
  Cell[BoxData[
      \(TraditionalForm\`Message[Mag::argx, _, _]\)]],
  ", but no message named ",
  Cell[BoxData[
      \(TraditionalForm\`Mag::argx\)]],
  " has been defined.  When the kernel sees there is no message named ",
  Cell[BoxData[
      \(TraditionalForm\`\((Mag::argx)\)\)]],
  ", it looks for one named ",
  Cell[BoxData[
      \(TraditionalForm\`\((General::argx)\)\)]],
  " in  (messages.m) and it finds one.  ",
  StyleBox["Mathematica ",
    FontSlant->"Italic"],
  "then usees the text for ",
  Cell[BoxData[
      \(TraditionalForm\`\((General::argx)\)\)]],
  " but when the message is displayed its labled ",
  Cell[BoxData[
      \(TraditionalForm\`\((Mag::argx)\)\)]],
  ".  This allows commonly used messages to be shared by many functions.  The \
messages ",
  Cell[BoxData[
      \(TraditionalForm\`\((General::tag)\)\)]],
  " are briefly explained in section ",
  ButtonBox["2.8.21",
    ButtonData:>{"2.8.21", "21.8"},
    ButtonStyle->"MainBookLink"],
  " of the ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " Book"
}], "Text"],

Cell[BoxData[
    \(Mag[arg1_, others__] /; \n\t\ \ \ Message[Mag::argx, Mag, 
          Length[{arg1, others}]] := "\<Never get here.\>"\)], "Input"],

Cell["\<\
Once the rule above is defined, Mag[__] will post a message and return the \
input when it is given more than one argument.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Mag[3, 4, 5, 6]\)], "Input"],

Cell[BoxData[
    \(Mag::"argx" \(\(:\)\(\ \)\) 
      "\!\(Mag\) called with \!\(4\) arguments; 1 argument is expected."\)], \
"Message"],

Cell[BoxData[
    \(Mag[3, 4, 5, 6]\)], "Output"]
}, Open  ]],

Cell["\<\
I tried to pick out the general messages that might have applications in \
packages users write and they are each used in a generic example below.  You \
will find that related messages are arranged in grouped cells.\
\>", "Text"],

Cell[CellGroupData[{

Cell["Number of arguments", "Subsubsection"],

Cell["\<\
Below we have general messages that report an incorrect number of \
arguments.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::argctu, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"argctu" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) called with 1 argument."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::argct, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"argct" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) called with \!\(ARG2\) arguments."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::argmu, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"argmu" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) called with 1 argument; \!\(ARG2\) or more arguments are \
expected."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::argr, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"argr" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) called with 1 argument; \!\(ARG2\) arguments are expected."\
\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::argx, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"argx" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) called with \!\(ARG2\) arguments; 1 argument is \
expected."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::argbu, ARG1, ARG2, ARG3]\)], "Input"],

Cell[BoxData[
    \(General::"argbu" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) called with 1 argument; between \!\(ARG2\) and \!\(ARG3\) \
arguments are expected."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::argf, ARG1, ARG2, ARG3]\)], "Input"],

Cell[BoxData[
    \(General::"argf" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) called with \!\(ARG2\) arguments; \!\(ARG3\) or fewer \
arguments are expected."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::argm, ARG1, ARG2, ARG3]\)], "Input"],

Cell[BoxData[
    \(General::"argm" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) called with \!\(ARG2\) arguments; \!\(ARG3\) or more \
arguments are expected."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::argrx, ARG1, ARG2, ARG3]\)], "Input"],

Cell[BoxData[
    \(General::"argrx" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) called with \!\(ARG2\) arguments; \!\(ARG3\) arguments are \
expected."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::argtu, ARG1, ARG2, ARG3]\)], "Input"],

Cell[BoxData[
    \(General::"argtu" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) called with 1 argument; \!\(ARG2\) or \!\(ARG3\) arguments \
are expected."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::argb, ARG1, ARG2, ARG3, ARG4]\)], "Input"],

Cell[BoxData[
    \(General::"argb" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) called with \!\(ARG2\) arguments; between \!\(ARG3\) and \!\
\(ARG4\) arguments are expected."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::argt, ARG1, ARG2, ARG3, ARG4]\)], "Input"],

Cell[BoxData[
    \(General::"argt" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) called with \!\(ARG2\) arguments; \!\(ARG3\) or \!\(ARG4\) \
arguments are expected."\)], "Message"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Invalid arguments", "Subsubsection"],

Cell["\<\
Below we have general messages that report incorrect type of arguments.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::fnsym, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"fnsym" \(\(:\)\(\ \)\) 
      "First argument in \!\(ARG1\) is not a symbol or a string naming a \
symbol."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::notnorm, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"notnorm" \(\(:\)\(\ \)\) 
      "Argument \!\(ARG1\) must be a nonatomic expression."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::bool, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"bool" \(\(:\)\(\ \)\) 
      "True or False expected at position \!\(ARG2\) in \!\(ARG1\)."\)], \
"Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::ilsm, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"ilsm" \(\(:\)\(\ \)\) 
      "List of machine-size integers expected at position \!\(ARG2\) in \
\!\(ARG1\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::ilsmi, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"ilsmi" \(\(:\)\(\ \)\) 
      "Single or non-empty list of machine-size integers expected at position \
\!\(ARG2\) in \!\(ARG1\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::ilsmn, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"ilsmn" \(\(:\)\(\ \)\) 
      "Single or non-empty list of non-negative machine-size integers \
expected at position \!\(ARG2\) of \!\(ARG1\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::ilsmp, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"ilsmp" \(\(:\)\(\ \)\) 
      "Single or non-empty list of positive machine-size integers expected at \
position \!\(ARG2\) of \!\(ARG1\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::innf, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"innf" \(\(:\)\(\ \)\) 
      "Non-negative integer or Infinity expected at position \!\(ARG2\) in \!\
\(ARG1\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::int, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"int" \(\(:\)\(\ \)\) 
      "Integer expected at position \!\(ARG2\) in \!\(ARG1\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::intm, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"intm" \(\(:\)\(\ \)\) 
      "Machine-size integer expected at position \!\(ARG2\) in \
\!\(ARG1\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::intnm, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"intnm" \(\(:\)\(\ \)\) 
      "Non-negative machine-size integer expected at position \!\(ARG2\) in \
\!\(ARG1\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::intnz, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"intnz" \(\(:\)\(\ \)\) 
      "Non-zero integer expected at position \!\(ARG2\) in \!\(ARG1\)."\)], \
"Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::intpm, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"intpm" \(\(:\)\(\ \)\) 
      "Positive machine-size integer expected at position \!\(ARG2\) in \
\!\(ARG1\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::ipnf, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"ipnf" \(\(:\)\(\ \)\) 
      "Positive integer or Infinity expected at position \!\(ARG2\) in \
\!\(ARG1\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::list, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"list" \(\(:\)\(\ \)\) 
      "List expected at position \!\(ARG2\) in \!\(ARG1\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::normal, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"normal" \(\(:\)\(\ \)\) 
      "Nonatomic expression expected at position \!\(ARG1\) in \
\!\(ARG2\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::seqs, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"seqs" \(\(:\)\(\ \)\) 
      "Sequence specification (+n, -n, {+n}, {-n}, {m, n}, or {m, n, s}) \
expected at position \!\(ARG2\) in \!\(ARG1\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::seqso, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"seqso" \(\(:\)\(\ \)\) 
      "Sequence specification (+n, -n, {+n}, {-n}, or {m, n}) expected at \
position \!\(ARG2\) in \!\(ARG1\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::string, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"string" \(\(:\)\(\ \)\) 
      "String expected at position \!\(ARG1\) in \!\(ARG2\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::strs, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"strs" \(\(:\)\(\ \)\) 
      "String or non-empty list of strings expected at position \!\(ARG1\) in \
\!\(ARG2\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::strse, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"strse" \(\(:\)\(\ \)\) 
      "String or list of strings expected at position \!\(ARG1\) in \
\!\(ARG2\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::sym, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"sym" \(\(:\)\(\ \)\) 
      "Argument \!\(ARG1\) at position \!\(ARG2\) is expected to be a \
symbol."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::zval, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"zval" \(\(:\)\(\ \)\) 
      "Non-numerical value \!\(ARG1\) found at position \!\(ARG2\) in first \
argument."\)], "Message"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Options", "Subsubsection"],

Cell["\<\
Below we have general messages that report problems with options\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::mult, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"mult" \(\(:\)\(\ \)\) 
      "Value of option Multiplicity -> \!\(ARG1\) is not a positive integer."\
\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::estep, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"estep" \(\(:\)\(\ \)\) 
      "Value of option \!\(ARG1\) -> \!\(ARG2\) is not a positive \
integer."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::iopf, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"iopf" \(\(:\)\(\ \)\) 
      "Value of option \!\(ARG1\) -> \!\(ARG2\) should be an integer or \
Infinity."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::iopnf, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"iopnf" \(\(:\)\(\ \)\) 
      "Value of option \!\(ARG1\) -> \!\(ARG2\) should be a non-negative \
integer or Infinity."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::iopnm, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"iopnm" \(\(:\)\(\ \)\) 
      "Value of option \!\(ARG1\) -> \!\(ARG2\) should be a non-negative \
machine-size integer."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::ioppf, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"ioppf" \(\(:\)\(\ \)\) 
      "Value of option \!\(ARG1\) -> \!\(ARG2\) should be a positive integer \
or Infinity."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::modgp, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"modgp" \(\(:\)\(\ \)\) 
      "Value of option \!\(ARG1\) -> \!\(ARG2\) should be a Gaussian prime \
number."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::modn, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"modn" \(\(:\)\(\ \)\) 
      "Value of option \!\(ARG1\) -> \!\(ARG2\) should be an integer."\)], \
"Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::modp, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"modp" \(\(:\)\(\ \)\) 
      "Value of option \!\(ARG1\) -> \!\(ARG2\) should be a prime number or \
zero."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::npt, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"npt" \(\(:\)\(\ \)\) 
      "Value for option \!\(ARG1\) -> \!\(ARG2\) is expected to be a string."\
\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::opset, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"opset" \(\(:\)\(\ \)\) 
      "Option \!\(ARG1\) is not set in \!\(ARG2\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::opstl, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"opstl" \(\(:\)\(\ \)\) 
      "Value of option \!\(ARG1\) -> \!\(ARG2\) should be a string or a list \
of strings."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::optrs, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"optrs" \(\(:\)\(\ \)\) 
      "Option specification \!\(ARG1\) in \!\(ARG2\) is not a rule for a \
symbol."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::opttf, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"opttf" \(\(:\)\(\ \)\) 
      "Value of option \!\(ARG1\) -> \!\(ARG2\) should be True or False."\)], \
"Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::opttfa, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"opttfa" \(\(:\)\(\ \)\) 
      "Value of option \!\(ARG1\) -> \!\(ARG2\) should be True, False, or \
Automatic."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::optx, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"optx" \(\(:\)\(\ \)\) 
      "Unknown option \!\(ARG1\) in \!\(ARG2\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::par, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"par" \(\(:\)\(\ \)\) 
      "Inappropriate parameter: \!\(ARG1\) -> \!\(ARG2\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::nonopt, ARG1, ARG2, ARG3]\)], "Input"],

Cell[BoxData[
    \(General::"nonopt" \(\(:\)\(\ \)\) 
      "Options expected (instead of \!\(ARG1\)) beyond position \!\(ARG2\) in \
\!\(ARG3\). An option must be a rule or a list of rules."\)], "Message"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Matrices", "Subsubsection"],

Cell["\<\
Below we have general messages that report problems with matrices.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::inf]\)], "Input"],

Cell[BoxData[
    \(General::"inf" \(\(:\)\(\ \)\) 
      "Input matrix contains an infinite entry."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::mindet]\)], "Input"],

Cell[BoxData[
    \(General::"mindet" \(\(:\)\(\ \)\) 
      "Input matrix contains an indeterminate entry."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::sing, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"sing" \(\(:\)\(\ \)\) 
      "Matrix \!\(ARG1\) is singular."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::luc, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"luc" \(\(:\)\(\ \)\) 
      "Result for \!\(ARG1\) of badly conditioned matrix \!\(ARG2\) may \
contain significant numerical errors."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::matrix, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"matrix" \(\(:\)\(\ \)\) 
      "Argument \!\(ARG1\) at position \!\(ARG2\) is not a rectangular \
matrix."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::matsq, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"matsq" \(\(:\)\(\ \)\) 
      "Argument \!\(ARG1\) at position \!\(ARG2\) is not a square \
matrix."\)], "Message"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Iterators", "Subsubsection"],

Cell["\<\
Below we have general messages that report problems with iterators.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::iterb]\)], "Input"],

Cell[BoxData[
    \(General::"iterb" \(\(:\)\(\ \)\) 
      "Iterator `1` does not have appropriate bounds."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::itraw, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"itraw" \(\(:\)\(\ \)\) 
      "Raw object \!\(ARG1\) cannot be used as an iterator."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::ittag, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"ittag" \(\(:\)\(\ \)\) 
      "Cannot use \!\(ARG1\) as an iterator, since it contains no assignment \
tag."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::itform, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"itform" \(\(:\)\(\ \)\) 
      "Argument \!\(ARG1\) at position \!\(ARG2\) does not have the correct \
form for an iterator."\)], "Message"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Directories, Files, I/O", "Subsubsection"],

Cell["\<\
Below we have general messages that report problems with directories, files, \
or I/O.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::isdir]\)], "Input"],

Cell[BoxData[
    \(General::"isdir" \(\(:\)\(\ \)\) 
      "Cannot open directory for reading."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::filro, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"filro" \(\(:\)\(\ \)\) 
      "Attempt to modify a read-only file during \!\(ARG1\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::fstr, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"fstr" \(\(:\)\(\ \)\) 
      "File specification \!\(ARG1\) is not a string of one or more \
characters."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::ioarg, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"ioarg" \(\(:\)\(\ \)\) 
      "Argument in \!\(ARG1\) is not valid for I/O operation."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::ioerr, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"ioerr" \(\(:\)\(\ \)\) 
      "I/O error occurred during \!\(ARG1\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::longp, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"longp" \(\(:\)\(\ \)\) 
      "Pathname in \!\(ARG1\) is too long."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::nfdir, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"nfdir" \(\(:\)\(\ \)\) 
      "Directory not found during \!\(ARG1\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::nffil, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"nffil" \(\(:\)\(\ \)\) 
      "File not found during \!\(ARG1\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::noopen, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"noopen" \(\(:\)\(\ \)\) 
      "Cannot open \!\(ARG1\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::openr, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"openr" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) is open for input."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::openw, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"openw" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) is open for output."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::openx, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"openx" \(\(:\)\(\ \)\) "\!\(ARG1\) is not open."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::aofil, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"aofil" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) already open as \!\(ARG2\)."\)], "Message"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Polynomials", "Subsubsection"],

Cell["\<\
Below we have general messages that report problems related to polynomials.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::eival]\)], "Input"],

Cell[BoxData[
    \(General::"eival" \(\(:\)\(\ \)\) 
      "Unable to find all roots of the characteristic polynomial."\)], \
"Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::bmod, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"bmod" \(\(:\)\(\ \)\) 
      "Modulus \!\(ARG1\) must be an integer or an irreducible univariate \
polynomial."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::modint, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"modint" \(\(:\)\(\ \)\) 
      "Modulus \!\(ARG1\) must be an integer."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::modm, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"modm" \(\(:\)\(\ \)\) 
      "Modulus \!\(ARG1\) is too large for this implementation."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::npoly, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"npoly" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) is not a polynomial with rational number coefficients."\)], \
"Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::npolys, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"npolys" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) is not a list of polynomials with rational number \
coefficients."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::poly, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"poly" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) is not a polynomial."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::polyx, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"polyx" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) is not a polynomial with exact coefficients."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::nmod, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"nmod" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) is not valid modulo \!\(ARG2\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::npv, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"npv" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) is not a polynomial in \!\(ARG2\) with rational number \
coefficients."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::nrpi, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"nrpi" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) is not a logical formula consisting of polynomial equations \
and inequalities in \!\(ARG2\) with real number coefficients."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::nrtpi, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"nrtpi" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) is not a logical formula consisting of polynomial equations \
and inequalities in \!\(ARG2\) with rational number coefficients."\)], \
"Message"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Graphics", "Subsubsection"],

Cell["\<\
Below we have general messages that report problems related to graphics.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::pcolor]\)], "Input"],

Cell[BoxData[
    \(General::"pcolor" \(\(:\)\(\ \)\) 
      "The shading function has produced colors of different types."\)], \
"Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::color, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"color" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) is not a valid color or gray-level specification."\)], \
"Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::lspec, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"lspec" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) is not a valid color, thickness, or dashing specification."\
\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::colfun, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"colfun" \(\(:\)\(\ \)\) 
      "The ColorFunction \!\(ARG1\) does not produce a valid color or \
gray-level directive when applied to element \!\(ARG2\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::colfun1, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"colfun1" \(\(:\)\(\ \)\) 
      "The ColorFunction \!\(ARG1\) produces a color incompatible with the \
previous color when applied to element \!\(ARG2\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::gprim, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"gprim" \(\(:\)\(\ \)\) 
      "\!\(ARG2\) was encountered where a \!\(ARG1\) primitive or directive \
was expected."\)], "Message"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Miscellaneous", "Subsubsection"],

Cell["\<\
Below we have general messages that report a variaty of other problems.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(\(Message[General::bktfn, ARG1, ARG2, ARG3, 
      ARG4]\)\(\ \ \)\)\)], "Input"],

Cell[BoxData[
    \(General::"bktfn" \(\(:\)\(\ \)\) 
      "\"\!\(ARG1\)\" should probably be \"\!\(ARG2\)\".\!\(ARG4\)"\)], \
"Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::cfail]\)], "Input"],

Cell[BoxData[
    \(General::"cfail" \(\(:\)\(\ \)\) 
      "Algorithm failed to converge."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::dbyz]\)], "Input"],

Cell[BoxData[
    \(General::"dbyz" \(\(:\)\(\ \)\) "Division by zero."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::fas]\)], "Input"],

Cell[BoxData[
    \(General::"fas" \(\(:\)\(\ \)\) 
      "Warning: self-contradictory assumptions encountered."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::ovfl]\)], "Input"],

Cell[BoxData[
    \(General::"ovfl" \(\(:\)\(\ \)\) 
      "Overflow occurred in computation."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::unpack1]\)], "Input"],

Cell[BoxData[
    \(General::"unpack1" \(\(:\)\(\ \)\) "Unpacking array."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::fmtval, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"fmtval" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) is not a valid format type."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::globn, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"globn" \(\(:\)\(\ \)\) 
      "No matches for \!\(ARG1\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::ifexp, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"ifexp" \(\(:\)\(\ \)\) 
      "The exponent \!\(ARG1\) is not an integer."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::ifpa, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"ifpa" \(\(:\)\(\ \)\) 
      "The precision or accuracy \!\(ARG1\) is not representable as a machine \
number."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::indet, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"indet" \(\(:\)\(\ \)\) 
      "Indeterminate expression \!\(ARG1\) encountered."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::ivar, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"ivar" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) is not a valid variable."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::level, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"level" \(\(:\)\(\ \)\) 
      "Level specification \!\(ARG1\) is not of the form n, {n}, or {m, \
n}."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::nalg, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"nalg" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) is not an algebraic number."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::nlist3, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"nlist3" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) is not a list of three numbers."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::notfound, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"notfound" \(\(:\)\(\ \)\) 
      "Symbol \!\(ARG1\) not found."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::notnorm, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"notnorm" \(\(:\)\(\ \)\) 
      "Argument \!\(ARG1\) must be a nonatomic expression."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::notstr, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"notstr" \(\(:\)\(\ \)\) 
      "The format type \!\(ARG1\) is valid only for string input."\)], \
"Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::primm, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"primm" \(\(:\)\(\ \)\) 
      "Tried \!\(ARG1\) primes, algorithm failed."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::prims, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"prims" \(\(:\)\(\ \)\) 
      "Prime \!\(ARG1\) is too small, algorithm failed."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::punpack1, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"punpack1" \(\(:\)\(\ \)\) 
      "Unpacking array to level \!\(ARG1\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::rep, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"rep" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) is not a valid replacement rule."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::stop, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"stop" \(\(:\)\(\ \)\) 
      "Further output of \!\(ARG1\) will be suppressed during this \
calculation."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::unpack, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"unpack" \(\(:\)\(\ \)\) 
      "Unpacking array in call to \!\(ARG1\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::unuser, ARG1]\)], "Input"],

Cell[BoxData[
    \(General::"unuser" \(\(:\)\(\ \)\) 
      "Unknown user: \!\(ARG1\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::dupv, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"dupv" \(\(:\)\(\ \)\) 
      "Duplicate variable \!\(ARG1\) found in \!\(ARG2\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::globm, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"globm" \(\(:\)\(\ \)\) 
      "Too many matches for \!\(ARG1\): \!\(ARG2\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::par, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"par" \(\(:\)\(\ \)\) 
      "Inappropriate parameter: \!\(ARG1\) -> \!\(ARG2\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::plln, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"plln" \(\(:\)\(\ \)\) 
      "Limiting value \!\(ARG1\) in \!\(ARG2\) is not a machine-size real \
number."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::precw, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"precw" \(\(:\)\(\ \)\) 
      "The precision of the argument function (\!\(ARG1\)) is less than \
WorkingPrecision (\!\(ARG2\))."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::punpack, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"punpack" \(\(:\)\(\ \)\) 
      "Unpacking array to level \!\(ARG2\) in call to \!\(ARG1\)."\)], \
"Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::trace, ARG1, ARG2]\)], "Input"],

Cell[BoxData[
    \(General::"trace" \(\(:\)\(\ \)\) 
      "\!\(ARG1\) --> \!\(ARG2\)."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::mbrpos, ARG1, ARG2, ARG3]\)], "Input"],

Cell[BoxData[
    \(General::"mbrpos" \(\(:\)\(\ \)\) 
      "Position \!\(ARG2\) in \!\(ARG1\) must be one of \!\(ARG3\)."\)], \
"Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::tag, ARG1, ARG2, ARG3]\)], "Input"],

Cell[BoxData[
    \(General::"tag" \(\(:\)\(\ \)\) 
      "Rule for \!\(ARG1\) of \!\(ARG2\) can only be attached to \!\(ARG3\)."\
\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::bktmch, ARG1, ARG2, ARG3, ARG4]\)], "Input"],

Cell[BoxData[
    \(General::"bktmch" \(\(:\)\(\ \)\) 
      "\"\!\(ARG1\)\" must be followed by \"\!\(ARG2\)\", not \"\!\(ARG3\)\".\
\!\(ARG4\)"\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::heads, ARG1, ARG2, ARG3, ARG4]\)], "Input"],

Cell[BoxData[
    \(General::"heads" \(\(:\)\(\ \)\) 
      "Heads \!\(ARG1\) and \!\(ARG2\) at positions \!\(ARG3\) and \!\(ARG4\) \
are expected to be the same."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Message[General::itflrw, ARG1, ARG2, ARG3]\)], "Input"],

Cell[BoxData[
    \(General::"itflrw" \(\(:\)\(\ \)\) 
      "Warning: In evaluating \!\(ARG1\) to find the number of iterations to \
use for \!\(ARG2\), $MaxExtraPrecision = \!\(ARG3\) was encountered. An upper \
estimate will be used for the number of iterations."\)], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
    \( (*\ 
      The\ next\ message\ is\ normally\ turned\ \(\(off\)\(.\)\)\ *) \
\[IndentingNewLine]On[General::newsym]\), "\n", 
    \(Message[General::newsym, ARG1]\), "\n", 
    \(Off[General::newsym]\)}], "Input"],

Cell[BoxData[
    \(General::"newsym" \(\(:\)\(\ \)\) 
      "Symbol \!\(ARG1\) is new."\)], "Message"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["How to tell if a message is On or Off", "Subsection"],

Cell["\<\
The direct answer to this problem is the following:
    If  Head[symbol::tag] === Off
    then  (the message is Off)
    else   (the message is On)\
\>", "Text"],

Cell["\<\
If a message is on and the message is not one of the general messages (which \
are explained in the previous sub-section), then the message has the head \
String.  That is why the next cell returns String.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(On[Show::gtype];\)\), "\[IndentingNewLine]", 
    \(Head[Show::gtype]\)}], "Input"],

Cell[BoxData[
    \(String\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "On the other hand if a message is on and the message is one of the general \
messages, then the message has the head MessageName. That is why the next \
cell returns MessageName.  As explained above ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " defines a message (General::argx) that can be used as a message for any \
function, but the message (Show::gtype) is only associated with Show unless \
you make assignments that associate it with other symbols."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(On[Sin::argx];\)\), "\[IndentingNewLine]", 
    \(Head[Sin::argx]\)}], "Input"],

Cell[BoxData[
    \(MessageName\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell is typical for what (symbol::tag) evaluates to when the message \
is Off, and the message is not one of the general messages.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Off[Show::gtype];\)\), "\[IndentingNewLine]", 
    \(Show::gtype\)}], "Input"],

Cell[BoxData[
    \($Off["`1` is not a type of graphics."]\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell shows what (symbol::tag) evaluates to when the message is Off, \
and the message is one of the general messages.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Off[Sin::argx];\)\), "\[IndentingNewLine]", 
    \(Sin::argx\)}], "Input"],

Cell[BoxData[
    \($Off[]\)], "Output"]
}, Open  ]],

Cell["The next input turns both messages back on.", "Text"],

Cell[BoxData[
    \(On[Show::gtype, Sin::argx]\)], "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["NestList", "Section"],

Cell[TextData[{
  "The documentation for ",
  ButtonBox["NestList",
    ButtonStyle->"RefGuideLink"],
  " is clear, but it isn't immediatly clear when one might want to use \
NestList. I give a usefule example in the next cell which efficiently makes a \
list of the ten smallest prime numbers that are larger than 10^15."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Needs["\<NumberTheory`NumberTheoryFunctions`\>"];\)\), "\n", 
    \(NestList[NextPrime, 10^15, 10] // Rest\)}], "Input"],

Cell[BoxData[
    \({1000000000000037, 1000000000000091, 1000000000000159, 
      1000000000000187, 1000000000000223, 1000000000000241, 1000000000000249, 
      1000000000000259, 1000000000000273, 1000000000000279}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["NHoldAll, NHoldFirst, NHoldRest", "Section"],

Cell["The next cell gives (f) the NHoldRest attribute.", "Text",
  CellTags->"NHoldAll"],

Cell[BoxData[{
    \(\(ClearAll[f];\)\), "\n", 
    \(\(Attributes[f] = {NHoldRest};\)\)}], "Input"],

Cell["\<\
Now only the first argument of (f) can be evaluated numerically.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(N[f[\[Pi]\/2, \[Pi]\/3, \[Pi]\/4]]\)], "Input"],

Cell[BoxData[
    \(f[1.5707963267948966`, \[Pi]\/3, \[Pi]\/4]\)], "Output"]
}, Open  ]],

Cell["\<\
NHoldAll, NHoldRest and NHoldFirst prevent evaluation even deep inside an \
expression as demonstrated in the next cell.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(N[{\[Pi] + {f[\[Pi]\/2, \[Pi]\/3, \[Pi]\/4]}}]\)], "Input"],

Cell[BoxData[
    \({{\(\(3.141592653589793`\)\(\[InvisibleSpace]\)\) + 
          f[1.5707963267948966`, \[Pi]\/3, \[Pi]\/4]}}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Built-in symbols with attributes NHoldAll, NHoldFirst, NHoldRest\
\>", "Subsection"],

Cell["The next cell makes a list of all built-in symbols.", "Text"],

Cell[BoxData[
    \(\(symbs = 
        Cases[ToExpression /@ Names["\<System`*\>"], _Symbol];\)\)], "Input"],

Cell["\<\
The next cell returns all built-in symbols with the NHoldAll attribute.  If \
you understand what C and Root do it's easy to see why they have the \
attribute NHoldAll.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Select[symbs, MemberQ[Attributes[#], NHoldAll] &]\)], "Input"],

Cell[BoxData[
    \({C, Root}\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell returns all built-in symbols with the NHoldRest attribute.  If \
these functions didn't have the NHoldRest attribute they wouldn't work \
correctly in certain cases.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Select[symbs, MemberQ[Attributes[#], NHoldRest] &]\)], "Input"],

Cell[BoxData[
    \({Drop, Extract, HeldPart, Part, Take}\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell returns all built-in symbols with the NHoldFirst attribute.  I \
have no experience with the functions that have the NHoldFirst attribute.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Select[symbs, MemberQ[Attributes[#], NHoldFirst] &]\)], "Input"],

Cell[BoxData[
    \({EllipticTheta, EllipticThetaPrime, MathieuC, MathieuCharacteristicA, 
      MathieuCharacteristicB, MathieuCPrime, MathieuS, MathieuSPrime, 
      PolyGamma, StieltjesGamma}\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["OneIdentity", "Section"],

Cell["\<\
Many users don't understand what the OneIdentiy attribute does.  The cells \
below show how this attribute can effect pattern matching.  OneIdentity can \
have an effect related to the use of optional arguments and another effect on \
functions that also have the Flat attribute.  I was only able to \
understanding many of the subtle ways that OneIdentity works after getting \
Technical Support from Dave Withoff.\
\>", "Text",
  CellTags->"OneIdentity"],

Cell[CellGroupData[{

Cell["OneIdentity and optional arguments", "Subsection"],

Cell["\<\
In the line below we see Default[Power,2] evaluates to (1) and Power has the \
attribute OneIdentity.\
\>", "Text",
  CellTags->"OneIdentity-Default"],

Cell[CellGroupData[{

Cell[BoxData[
    \(?? Power\)], "Input"],

Cell[BoxData[
    RowBox[{"\<\"x^y gives x to the power y.\"\>", " ", 
      ButtonBox[
        StyleBox["More\[Ellipsis]",
          "SR"],
        ButtonData:>"Power",
        Active->True,
        ButtonStyle->"RefGuideLink"]}]], "Print",
  CellTags->"Info3242474880-2863980"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {\(Attributes[Power] = {Listable, NumericFunction, OneIdentity, 
                Protected}\)},
          {" "},
          {GridBox[{
                {\(Power /: Default[Power, 2] := 1\)}
                },
              GridBaseline->{Baseline, {1, 1}},
              ColumnWidths->0.999,
              ColumnAlignments->{Left}]}
          },
        GridBaseline->{Baseline, {1, 1}},
        ColumnAlignments->{Left}],
      Definition[ "Power"],
      Editable->False]], "Print",
  CellTags->"Info3242474880-2863980"]
}, Open  ]],

Cell[TextData[{
  "Since Default[Power,2] evaluates to (1), the pattern matcher treats (x) as \
Power[x,1] when matched with the pattern ( Power[x_,n_.] ).  Using  (n_.)  as \
the exponent in power means the exponent is optional, and the Default should \
be used when an exponent is not explicitly present.  This causes the \
definition in the next cell to work on ( integral[x,x] ).  In addition to \
having a value defined for Default[Power,2], the symbol Power has to have the \
OneIdentity attribute or the example in the next cell would not work.  \
Further details of default values are included in the discussion on ",
  ButtonBox["Default",
    ButtonData:>"Default details",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[integral, \ x];\)\), "\n", 
    \(integral[x_^\((n_. )\), 
          x_] /; \((FreeQ[n, x] && 
            n =!= \(-1\))\) := \(\(x^\((n + 1)\)/\((n + 
            1)\)\)\(\ \)\)\), "\n", 
    \({integral[x, x], integral[x^3, x]}\)}], "Input"],

Cell[BoxData[
    \({x\^2\/2, x\^4\/4}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next output cell we see the rule for integral[x_^(n_.), x_]  isn't \
used for integral[x,x]  when Power doesn't have the OneIdentity attribute.  \
\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Unprotect[Power];\)\), "\n", 
    \(ClearAttributes[Power, OneIdentity]\), "\n", 
    \(ClearAll[integral]\), "\n", 
    \(integral[x_^\((n_. )\), 
          x_] /; \((FreeQ[n, x] && 
            n =!= \(-1\))\) := \(\(x^\((n + 1)\)/\((n + 
            1)\)\)\(\ \ \)\)\), "\n", 
    \({integral[x, x], integral[x^3, x]}\)}], "Input"],

Cell[BoxData[
    \({integral[x, x], x\^4\/4}\)], "Output"]
}, Open  ]],

Cell["\<\
To illustrate how Default[expr]  is used, the attribute OneIdentity is \
returned to Power, and  the value of Default[Power,2] is changed.  Then the \
pattern matcher treats integral[x, x] as integral[Power[x, junk], x].\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(SetAttributes[Power, \ OneIdentity]\), "\n", 
    \(\(Default[Power, 2] = junk;\)\), "\n", 
    \(\(ClearAll[integral, junk];\)\), "\n", 
    \(integral[x_^\((n_. )\), 
          x_] /; \((FreeQ[n, x] && 
            n =!= \(-1\))\) := \(\(x^\((n + 1)\)/\((n + 
            1)\)\)\(\ \)\)\), "\n", 
    \({integral[x, x], integral[x^3, x]}\)}], "Input"],

Cell[BoxData[
    \({x\^\(1 + junk\)\/\(1 + junk\), x\^4\/4}\)], "Output"]
}, Open  ]],

Cell["\<\
Next the value of  Default[Power,2]  is returned to normal, and Power is \
protected again.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Default[Power, 2] = 1;\)\), "\n", 
    \(\(Protect[Power];\)\), "\n", 
    \(?? Power\)}], "Input"],

Cell[BoxData[
    RowBox[{"\<\"x^y gives x to the power y.\"\>", " ", 
      ButtonBox[
        StyleBox["More\[Ellipsis]",
          "SR"],
        ButtonData:>"Power",
        Active->True,
        ButtonStyle->"RefGuideLink"]}]], "Print",
  CellTags->"Info3242474882-9613789"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {\(Attributes[Power] = {Listable, NumericFunction, OneIdentity, 
                Protected}\)},
          {" "},
          {GridBox[{
                {\(Power /: Default[Power, 2] = 1\)}
                },
              GridBaseline->{Baseline, {1, 1}},
              ColumnWidths->0.999,
              ColumnAlignments->{Left}]}
          },
        GridBaseline->{Baseline, {1, 1}},
        ColumnAlignments->{Left}],
      Definition[ "Power"],
      Editable->False]], "Print",
  CellTags->"Info3242474882-9613789"]
}, Open  ]],

Cell["\<\
There are only three functions in the Mathematica kernel (Version 4.2 or \
earlier) that have built-in values for Default[symb, ___].  The functions are \
Times, Plus, and Power with the default values ( Default[Times]=1,  \
Default[Plus]=0,  Default[Power,2]=1 ).\
\>", "Text"],

Cell[TextData[{
  StyleBox["The cells above demonstrated the way OneIdentity and the value \
assigned to Default[Power,2] affects pattern matching.  A similar \
demonstration is given below on a generic function (f).  In the next cell (f) \
has no attributes.  Here ",
    FontWeight->"Plain"],
  "5 doesn't match the pattern f[a_,b_.] and the rule isn't used."
}], "Text",
  CellTags->"OneIdentity-Default"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(ClearAll[f, g]\), "\n", 
    \(\(Default[f] = 0;\)\), "\n", 
    \(5 /. f[a_, b_. ] :> g[a, b]\)}], "Input"],

Cell[BoxData[
    \(5\)], "Output"]
}, Open  ]],

Cell["\<\
Next the same thing is done when (f) has the attribute OneIdentity.  The \
OneIdentity attribute permits the pattern matcher to treat 5 as f[5,0].  A \
zero was used as the second argument of (f) because the second argument in \
the pattern is optional and (f) has a default value of zero.  Once 5 is \
treated as f[5,0] the rule can be used.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Attributes[f] = {OneIdentity};\)\), "\n", 
    \(\(Default[f] = 0;\)\), "\n", 
    \(5 /. f[a_, b_. ] :> g[a, b]\)}], "Input"],

Cell[BoxData[
    \(g[5, 0]\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell Default[f] has no assigned value, but 5 still matches the \
pattern f[a_,b_:t].   Here again the second argument of (f) is optional.  \
Since (f) has the OneIdentity attribute the pattern matcher treats 5 as \
f[5,t] and the rule is applied.  The rule wouldn't be applied if (f) didn't \
have the OneIdentity attribute.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[f, g, t];\)\), "\[IndentingNewLine]", 
    \(\(SetAttributes[f, OneIdentity];\)\), "\[IndentingNewLine]", 
    \(5 /. f[a_, b_:  t] :> g[a, b]\)}], "Input"],

Cell[BoxData[
    \(g[5, t]\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["OneIdentity and the Flat attribute", "Subsection"],

Cell[TextData[{
  "OneIdentity also has an effect (independent of optional arguments) for \
symbols that have the attributes ",
  ButtonBox["Flat",
    ButtonData:>"Flat",
    ButtonStyle->"Hyperlink"],
  " and OneIdentity.  Recall the effect the Flat attribute has on pattern \
matching.  In the line below (f) has the Flat attribute and no other \
attributes.  For the given expression (f) has more than two arguments so the \
rule can't be applied as entered.  However the pattern matcher knows (f) is \
Flat, and it treats f[a1,a2,a3,a4] as the equivalent expression \
f[f[a1],f[a2,a3,a4]] in which case the outer (f) has two arguments.  The rule \
can then be applied and we are left with {f[a1],f[a2,a3,a4]}."
}], "Text",
  CellTags->"OneIdentity-Flat"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll["\<Global`*\>"];\)\), "\n", 
    \(\(Attributes[f] = {Flat};\)\), "\n", 
    \(f[a1, a2, a3, a4] /. f[p_, q_] :> {p, q}\)}], "Input"],

Cell[BoxData[
    \({f[a1], f[a2, a3, a4]}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next example (f) has the attributes Flat and OneIdentity.  The \
OneIdentity attribute prevents the pattern matcher from wrapping (f) around a \
single argument.  As a result the pattern matcher treats f[a1,a2,a3,a4] as \
f[a1,f[a2,a3,a4]] and we are left with {a1,f[a2,a3,a4]} after the rule is \
applied.  Notice how this differs from the previous result.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(ClearAll[f]\), "\n", 
    \(\(Attributes[f] = {Flat, OneIdentity};\)\), "\n", 
    \(f[a1, a2, a3, a4] /. f[p_, q_] :> {p, q}\)}], "Input"],

Cell[BoxData[
    \({a1, f[a2, a3, a4]}\)], "Output"]
}, Open  ]],

Cell["\<\
In the last example the rule f[p_,q_]\[RuleDelayed]{p,q} was used with \
ReplaceAll (expr/.rule).  If ReplaceRepeated (expr//.rule) is used the rule \
is applied as many times as possible. You can try it if you like.\
\>", "Text"],

Cell["\<\
In the next output we see Join has the attributes Flat and OneIdentity, and \
the previous demonstration is repeated using Join instead of (f).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(?? Join\)], "Input"],

Cell[BoxData[
    RowBox[{"\<\"Join[list1, list2, ... ] concatenates lists together. Join \
can be used on any set of expressions that have the same head.\"\>", " ", 
      ButtonBox[
        StyleBox["More\[Ellipsis]",
          "SR"],
        ButtonData:>"Join",
        Active->True,
        ButtonStyle->"RefGuideLink"]}]], "Print",
  CellTags->"Info3242474882-1460760"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {\(Attributes[Join] = {Flat, OneIdentity, Protected}\)}
          },
        GridBaseline->{Baseline, {1, 1}},
        ColumnAlignments->{Left}],
      Definition[ "Join"],
      Editable->False]], "Print",
  CellTags->"Info3242474882-1460760"]
}, Open  ]],

Cell[TextData[{
  "Since Join has the attributes Flat and OneIdentity the pattern matcher \
treats Join[a1,a2,a3,a4] as Join[a1,Join[a2,a3,a4]], and the rule is used.  \
Here use of ",
  ButtonBox["HoldPattern",
    ButtonData:>"HoldPattern",
    ButtonStyle->"Hyperlink"],
  " is required or Join[a_,b_] would evaluate to Pattern[a,_,b,_] before \
pattern matching is finished."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Join[a1, a2, a3, a4] /. HoldPattern[Join[a_, b_]] :> {a, b}\)], "Input"],

Cell[BoxData[
    \({a1, Join[a2, a3, a4]}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell Join doesn't have the OneIdentity attribute, and the pattern \
matcher treats Join[a1,a2,a3,a4] as Join[Join[a1],Join[a2,a3,a4]], and the \
rule is used.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAttributes[Join, OneIdentity];\)\), "\[IndentingNewLine]", 
    \(Join[a1, a2, a3, a4] /. HoldPattern[Join[a_, b_]] :> {a, b}\)}], "Input"],

Cell[BoxData[
    \({Join[a1], Join[a2, a3, a4]}\)], "Output"]
}, Open  ]],

Cell["\<\
Before continuing we should restore the OneIdentity attribute to Join.\
\>", "Text"],

Cell[BoxData[
    \(SetAttributes[Join, OneIdentity]\)], "Input"],

Cell[TextData[{
  "In the cells below we look at other examples where a function (f) has the \
attributes Flat, OneIdentity. Consider the next cell where (f) still has the \
attributes Flat and OneIdentity.  In this case ",
  Cell[BoxData[
      StyleBox[\(f[a1, a2, a3, a4]\),
        FontFamily->"Courier",
        FontWeight->"Bold"]]],
  " evaluates to ",
  Cell[BoxData[
      StyleBox[\({a1, f[a2, a3, a4]}\),
        FontFamily->"Courier",
        FontWeight->"Bold"]]],
  ", and ",
  Cell[BoxData[
      StyleBox[\(f[a2, a3, a4]\),
        FontFamily->"Courier",
        FontWeight->"Bold"]]],
  " evaluates to ",
  Cell[BoxData[
      StyleBox[\({a2, f[a3, a4]}\),
        FontFamily->"Courier",
        FontWeight->"Bold"]]],
  ".  Then ",
  Cell[BoxData[
      StyleBox[\(f[a3, a4]\),
        FontFamily->"Courier",
        FontWeight->"Bold"]]],
  " evaluates to ",
  Cell[BoxData[
      StyleBox[\({a3, a4}\),
        FontFamily->"Courier",
        FontWeight->"Bold"]]],
  ".  When evaluation is complete we have ",
  Cell[BoxData[
      StyleBox[\({a1, {a2, {a3, a4}}}\),
        FontFamily->"Courier",
        FontWeight->"Bold"]]],
  ".  "
}], "Text",
  GeneratedCell->False],

Cell[CellGroupData[{

Cell[BoxData[{
    \(ClearAll[f]\), "\n", 
    \(\(Attributes[f] = {Flat, OneIdentity};\)\), "\[IndentingNewLine]", 
    \(f[p_, q_] := {p, q}\), "\n", 
    \(f[a1, a2, a3, a4]\)}], "Input"],

Cell[BoxData[
    \({a1, {a2, {a3, a4}}}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "The next input is the same as the last input except (f) does not have the \
OneIdentity attribute.  In this case the pattern matcher treats ",
  Cell[BoxData[
      \(f[a1, a2, a3, a4]\)]],
  " as ",
  Cell[BoxData[
      \(f[f[a1], f[a2, a3, a4]]\)]],
  " which evaluates to ",
  Cell[BoxData[
      \({f[a1], f[a2, a3, a4]}\)]],
  ".  Then the pattern matcher treats ",
  Cell[BoxData[
      \(f[a2, a3, a4]\)]],
  " as ",
  Cell[BoxData[
      \(f[f[a2], f[a3, a4]]\)]],
  " which evaluates to ",
  Cell[BoxData[
      \({f[a1], f[a3, a4]}\)]],
  ".  Then the pattern matcher treats ",
  Cell[BoxData[
      \(f[a3, a4]\)]],
  " as ",
  Cell[BoxData[
      \(f[f[a3], f[a4]]\)]],
  " which evaluates to ",
  Cell[BoxData[
      \({f[a3], f[a4]}\)]],
  ".  When evaluation is complete we have ",
  Cell[BoxData[
      \({f[a1], \ {f[a2], \ {f[a3], f[a4]}}}\)]],
  ". Notice how this differs from the previous result."
}], "Text",
  GeneratedCell->False],

Cell[CellGroupData[{

Cell[BoxData[{
    \(ClearAll[f]\), "\n", 
    \(\(Attributes[f] = {Flat};\)\), "\n", 
    \(f[p_, q_] := {p, q}\), "\n", 
    \(f[a1, a2, a3, a4]\)}], "Input"],

Cell[BoxData[
    \({f[a1], {f[a2], {f[a3], f[a4]}}}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell f[a,b,2,c,d] is treated as f[f[a],f[b,2,c,d]] and other \
variations such as f[f[a,b],f[2,c,d]], but none have two arguments under (f) \
where the first argument has the head Integer.  The pattern matcher is unable \
to find a pattern that matches so the rule is not used.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(ClearAll[f]\), "\n", 
    \(\(Attributes[f] = {Flat};\)\), "\n", 
    \(f[x_Integer, y_] := {x, y}\), "\n", 
    \(f[a, b, 2, c, d]\)}], "Input"],

Cell[BoxData[
    \(f[a, b, 2, c, d]\)], "Output"]
}, Open  ]],

Cell["\<\
Below the very same thing is done except (f) now has the attributes Flat and \
OneIdentity.  In this case the pattern matcher treats f[a,b,2,c,d]  as  \
f[a,b,f[2,f[c,d]]]  in which case f[2,f[c,d]] matches the required pattern.  \
Then f[2,f[c,d]] evaluates to {2,f[c,d]} and f[c,d] doesn't evaluate further \
because the first argument isn't an Integer. We then have f[a,b,{2,f[c,d]}].  \
The outer (f) doesn't evaluate further because the pattern matcher can't make \
it match the required pattern.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(ClearAll[f]\), "\n", 
    \(\(Attributes[f] = {Flat, OneIdentity};\)\), "\n", 
    \(f[x_Integer, y_] := {x, y}\), "\n", 
    \(f[a, b, 2, c, d]\)}], "Input"],

Cell[BoxData[
    \(f[a, b, {2, f[c, d]}]\)], "Output"]
}, Open  ]],

Cell["\<\
For the input below the condition was evaluated for different ways of nesting \
layers of (f).  Every possible subexpression matching the pattern was tried \
in the search for a subexpression that matches the pattern f[x_,y_] and makes \
the condition True.  The condition (a print statement) never evaluated to \
True so the rule was not applied.  While searching for a way to make the \
condition True, the expression f[a1, a2, a3, a4] was treated as (in this \
order):
   f[f[a1],f[a2,a3,a4]],
   f[f[a1,a2],f[a3,a4]],
   f[f[a1,a2,a3],f[a4]],
   f[f[f[a1],f[a2,a3]],f[a4]],
   f[f[f[a1,a2],f[a3]],f[a4]],
   f[f[a1],f[f[a2],f[a3,a4]]],
   f[f[f[a1],f[a2]],f[a3,a4]],
   f[f[a1],f[f[a2],f[a3]],f[a4]],
   f[f[a1,a2],f[f[a3],f[a4]]]\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(ClearAll[f]\), "\n", 
    \(\(Attributes[f] = {Flat};\)\), "\n", 
    \(f[a1, a2, a3, a4] /. 
      f[x_, y_] :> 
        1 /; Print[HoldForm[x], "\<,  \>", HoldForm[y]]\)}], "Input"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{
        TagBox[\(f[a1]\),
          HoldForm], "\[InvisibleSpace]", "\<\",  \"\>", "\[InvisibleSpace]", 
        
        TagBox[\(f[a2, a3, a4]\),
          HoldForm]}],
      SequenceForm[ 
        HoldForm[ 
          f[ a1]], ",  ", 
        HoldForm[ 
          f[ a2, a3, a4]]],
      Editable->False]], "Print"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{
        TagBox[\(f[a1, a2]\),
          HoldForm], "\[InvisibleSpace]", "\<\",  \"\>", "\[InvisibleSpace]", 
        
        TagBox[\(f[a3, a4]\),
          HoldForm]}],
      SequenceForm[ 
        HoldForm[ 
          f[ a1, a2]], ",  ", 
        HoldForm[ 
          f[ a3, a4]]],
      Editable->False]], "Print"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{
        TagBox[\(f[a1, a2, a3]\),
          HoldForm], "\[InvisibleSpace]", "\<\",  \"\>", "\[InvisibleSpace]", 
        
        TagBox[\(f[a4]\),
          HoldForm]}],
      SequenceForm[ 
        HoldForm[ 
          f[ a1, a2, a3]], ",  ", 
        HoldForm[ 
          f[ a4]]],
      Editable->False]], "Print"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{
        TagBox[\(f[a1]\),
          HoldForm], "\[InvisibleSpace]", "\<\",  \"\>", "\[InvisibleSpace]", 
        
        TagBox[\(f[a2, a3]\),
          HoldForm]}],
      SequenceForm[ 
        HoldForm[ 
          f[ a1]], ",  ", 
        HoldForm[ 
          f[ a2, a3]]],
      Editable->False]], "Print"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{
        TagBox[\(f[a1, a2]\),
          HoldForm], "\[InvisibleSpace]", "\<\",  \"\>", "\[InvisibleSpace]", 
        
        TagBox[\(f[a3]\),
          HoldForm]}],
      SequenceForm[ 
        HoldForm[ 
          f[ a1, a2]], ",  ", 
        HoldForm[ 
          f[ a3]]],
      Editable->False]], "Print"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{
        TagBox[\(f[a2]\),
          HoldForm], "\[InvisibleSpace]", "\<\",  \"\>", "\[InvisibleSpace]", 
        
        TagBox[\(f[a3, a4]\),
          HoldForm]}],
      SequenceForm[ 
        HoldForm[ 
          f[ a2]], ",  ", 
        HoldForm[ 
          f[ a3, a4]]],
      Editable->False]], "Print"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{
        TagBox[\(f[a2, a3]\),
          HoldForm], "\[InvisibleSpace]", "\<\",  \"\>", "\[InvisibleSpace]", 
        
        TagBox[\(f[a4]\),
          HoldForm]}],
      SequenceForm[ 
        HoldForm[ 
          f[ a2, a3]], ",  ", 
        HoldForm[ 
          f[ a4]]],
      Editable->False]], "Print"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{
        TagBox[\(f[a1]\),
          HoldForm], "\[InvisibleSpace]", "\<\",  \"\>", "\[InvisibleSpace]", 
        
        TagBox[\(f[a2]\),
          HoldForm]}],
      SequenceForm[ 
        HoldForm[ 
          f[ a1]], ",  ", 
        HoldForm[ 
          f[ a2]]],
      Editable->False]], "Print"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{
        TagBox[\(f[a2]\),
          HoldForm], "\[InvisibleSpace]", "\<\",  \"\>", "\[InvisibleSpace]", 
        
        TagBox[\(f[a3]\),
          HoldForm]}],
      SequenceForm[ 
        HoldForm[ 
          f[ a2]], ",  ", 
        HoldForm[ 
          f[ a3]]],
      Editable->False]], "Print"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{
        TagBox[\(f[a3]\),
          HoldForm], "\[InvisibleSpace]", "\<\",  \"\>", "\[InvisibleSpace]", 
        
        TagBox[\(f[a4]\),
          HoldForm]}],
      SequenceForm[ 
        HoldForm[ 
          f[ a3]], ",  ", 
        HoldForm[ 
          f[ a4]]],
      Editable->False]], "Print"],

Cell[BoxData[
    \(f[a1, a2, a3, a4]\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Optional (x_^n_.), (x_+y_.), (x_*y_.)", "Section"],

Cell["\<\
Optional (_.)  is used to indicate that a default value should be used of a \
value isn't provided.  The feature can only be used with heads that have \
assigned values for either Default[h], Default[h, n], or Default[h, n, i].  \
The only heads that have built-in default values are Plus, Times, Power, and \
they are each demonstrated below.\
\>", "Text",
  CellTags->"Optional"],

Cell[CellGroupData[{

Cell["Example using (x_^n_.)", "Subsection"],

Cell["\<\
In the first example (f) tells us the base and exponent of (s^n).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(Clear[f, s]\), "\[IndentingNewLine]", 
    \(f[x_^n_. ] := 
      StringJoin["\<base =\>", ToString[x], "\<,  exponent =\>", 
        ToString[n]]\), "\[IndentingNewLine]", 
    \(f[s^2]\)}], "Input"],

Cell[BoxData[
    \("base =s,  exponent =2"\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell (s) matches the pattern (x_^n_.) and the pattern matcher uses \
the default exponent of (1).  The use of (n_.) instead of (n_) indicates that \
the default value should be used if one is not provided explicitly.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(f[s]\)], "Input"],

Cell[BoxData[
    \("base =s,  exponent =1"\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Example using (x_+y_.)", "Subsection"],

Cell["\<\
In the next example (s) matches the pattern (x_+y_.) and the pattern matcher \
uses the default value of (0) for (y_.) when only a single term is provided.  \
Because Plus has the Flat attribute the pattern matcher recognizez that \
(s1+s2+s3+s4)  is a case of  Plus[s1, Plus[s2,s3,s4] ].\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(f[x_ + y_. ] := Add[x, y]\), "\[IndentingNewLine]", 
    \({f[s], f[s1 + s2], f[s1 + s2 + s3 + s4]}\)}], "Input"],

Cell[BoxData[
    \({Add[s, 0], Add[s2, s1], Add[s2 + s3 + s4, s1]}\)], "Output"]
}, Open  ]],

Cell["\<\
Next we see that the rule is stored as a definition for  f[ y_. + x_ ]  \
instead of a definition for  f[ x_ + y_. ]  as entered.  I suppose that \
explains why (y) is matched with (s1) in (s1+s2+s3+s4).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(?? f\)], "Input"],

Cell["Global`f", "Print",
  CellTags->"Info3285568764-5243668"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {GridBox[{
                {\(f[y_.  + x_] := Add[x, y]\)}
                },
              GridBaseline->{Baseline, {1, 1}},
              ColumnWidths->0.999,
              ColumnAlignments->{Left}]}
          },
        GridBaseline->{Baseline, {1, 1}},
        ColumnAlignments->{Left}],
      Definition[ "f"],
      Editable->False]], "Print",
  CellTags->"Info3285568764-5243668"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Example using (x_*y_.)", "Subsection"],

Cell["\<\
In the next example (s) matches the pattern (x_*y_.) and the pattern matcher \
uses the default value of (1) for (y_.) when only a single factor is \
provided.  Because Times has the Flat attribute the pattern matcher \
recognizez that (s1  s2  s3  s4)  is a case of  Times[s1, Times[s2, s3, s4] \
].\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(f[x_*y_. ] := Multiply[x, y]\), "\[IndentingNewLine]", 
    \({f[s], f[s1\ \ s2], f[s1\ \ s2\ \ s3\ \ s4]}\)}], "Input"],

Cell[BoxData[
    \({Multiply[s, 1], Multiply[s2, s1], 
      Multiply[s2\ s3\ s4, s1]}\)], "Output"]
}, Open  ]],

Cell["\<\
Next we see that the rule is stored as a definition for  f[ (y_.)  x_ ]  \
instead of a definition for  f[ x_ (y_.) ]  as entered.  I suppose that \
explains why (y) is matched with (s1) in 
(s1  s2  s3  s4).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(?? f\)], "Input"],

Cell["Global`f", "Print",
  CellTags->"Info3285569129-8870368"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {GridBox[{
                {\(f[y_. \ x_] := Multiply[x, y]\)}
                },
              GridBaseline->{Baseline, {1, 1}},
              ColumnWidths->0.999,
              ColumnAlignments->{Left}]}
          },
        GridBaseline->{Baseline, {1, 1}},
        ColumnAlignments->{Left}],
      Definition[ "f"],
      Editable->False]], "Print",
  CellTags->"Info3285569129-8870368"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Other applications (rarely used)", "Subsection"],

Cell[TextData[{
  "You can also use arguments like (y_.) as arguments for functions other \
than Power, Plus, Times, but only if you first assign values via Default[f], \
Default[f,i] or Default[f,i,n].  To see examples of this goto the section on \
",
  ButtonBox["Default",
    ButtonData:>"Default details",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text"],

Cell[BoxData[{
    \(\(Clear[f];\)\), "\[IndentingNewLine]", 
    \(\(Default[f] = z;\)\), "\[IndentingNewLine]", 
    \(f[x_, y_. ] := {x, y}\)}], "Input"],

Cell["\<\
In the next cell the default value (z) is used when (f) is give a single \
argument.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(f[a, b]\), "\[IndentingNewLine]", 
    \(f[5]\)}], "Input"],

Cell[BoxData[
    \({a, b}\)], "Output"],

Cell[BoxData[
    \({5, z}\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Options, OptionQ", "Section"],

Cell[CellGroupData[{

Cell["OptionQ details", "Subsection"],

Cell[TextData[{
  "OptionQ isn't documented in The ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " Book or the Help Browser, but it's helpful when defining a function with \
options.  OptionQ does however have the usage message shown below."
}], "Text",
  CellTags->"Options"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?OptionQ\)\)], "Input"],

Cell[BoxData[
    \("OptionQ[e] returns True if e can be considered an option or list of \
options, and False otherwise."\)], "Print",
  CellTags->"Info3242474884-6448585"]
}, Open  ]],

Cell["\<\
In the cells below we see OptionQ is True when it's given a Rule, a \
RuleDelayed or a list of these things. You get an error message if you give \
OptionQ more than one argument.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll["\<Global`*\>"];\)\), "\n", 
    \(OptionQ[opt1 \[Rule] True]\), "\n", 
    \(OptionQ[opt2 \[RuleDelayed] var2]\), "\n", 
    \(OptionQ[{opt1 \[Rule] 15, opt2 \[Rule] Automatic, 
        opt3 \[RuleDelayed] False, opt4 \[Rule] All}]\)}], "Input"],

Cell[BoxData[
    \(True\)], "Output"],

Cell[BoxData[
    \(True\)], "Output"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell["\<\
OptionQ also returns True when it's given nested lists of options.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(OptionQ[{{opt1 \[Rule] 15, {opt2 \[Rule] 10}, 
          opt3 \[RuleDelayed] False, opt4 \[Rule] All}}]\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell["\<\
As indicated in the usage message OptionQ returns False when it's given a \
single argument with any other form.  This is seen in the next cell.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(OptionQ[2]\), "\[IndentingNewLine]", 
    \(OptionQ[h[2]]\), "\[IndentingNewLine]", 
    \(OptionQ[{Opt1 \[Rule] All, 2}]\), "\[IndentingNewLine]", 
    \(OptionQ[{Opt1 \[Rule] All, h[2]}]\), "\[IndentingNewLine]", 
    \(OptionQ[h[Opt1 \[Rule] All]]\)}], "Input"],

Cell[BoxData[
    \(False\)], "Output"],

Cell[BoxData[
    \(False\)], "Output"],

Cell[BoxData[
    \(False\)], "Output"],

Cell[BoxData[
    \(False\)], "Output"],

Cell[BoxData[
    \(False\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Typical use of OptionQ", "Subsection"],

Cell[TextData[{
  "The next cell defines a function that takes options.  This function takes \
one required argument and optional arguments are allowed as long as they all \
pass OptionQ.  The form (opts___?OptionQ) is perhaps the most frequent use of \
",
  ButtonBox["BlankNullSequence",
    ButtonData:>"Blank",
    ButtonStyle->"Hyperlink"],
  " ( ___  ie. \"Tripple Blank\").  Notice this allows for a single option, a \
sequence of options, or no options."
}], "Text"],

Cell[BoxData[
    \(foo[expr_, opts___?OptionQ] := {expr, h @@ Flatten[{opts}]}\)], "Input"],

Cell["\<\
Each usage of foo in the next cell matches the definition of foo above.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(foo[x + y]\), "\[IndentingNewLine]", 
    \(foo[x + y, opt1 \[Rule] 15, opt2 \[Rule] Automatic, 
      opt3 \[Rule] False]\), "\[IndentingNewLine]", 
    \(foo[
      x + y, {opt1 \[Rule] 15, opt2 \[Rule] Automatic, 
        opt3 \[Rule] False}]\), "\[IndentingNewLine]", 
    \(foo[x + y, {opt1 \[Rule] 15, {opt2 \[Rule] Automatic}}, 
      opt3 \[Rule] False]\)}], "Input"],

Cell[BoxData[
    \({x + y, h[]}\)], "Output"],

Cell[BoxData[
    \({x + y, 
      h[opt1 \[Rule] 15, opt2 \[Rule] Automatic, 
        opt3 \[Rule] False]}\)], "Output"],

Cell[BoxData[
    \({x + y, 
      h[opt1 \[Rule] 15, opt2 \[Rule] Automatic, 
        opt3 \[Rule] False]}\)], "Output"],

Cell[BoxData[
    \({x + y, 
      h[opt1 \[Rule] 15, opt2 \[Rule] Automatic, 
        opt3 \[Rule] False]}\)], "Output"]
}, Open  ]],

Cell["\<\
The definition of foo doesn't apply to the next example because 6  isn't an \
option.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(foo[x + y, opt1 \[Rule] True, 6, opt2 \[Rule] False]\)], "Input"],

Cell[BoxData[
    \(foo[x + y, opt1 \[Rule] True, 6, opt2 \[Rule] False]\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Getting the setting of Options", "Subsection"],

Cell[TextData[{
  "Section  ",
  ButtonBox["2.3.10",
    ButtonData:>{"2.3.10", "10.8"},
    ButtonStyle->"MainBookLink"],
  " of The ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " Book suggests using the form \n   ",
  StyleBox[" name/.{opts}/.Options[f]", "InlineInput"],
  "\nto get the setting of an option.  This technique is used below to get \
the PlotStyle and Axes settings for a function. \n"
}], "Text"],

Cell[BoxData[{
    \(\(ClearAll[PlotFunction, x];\)\), "\n", 
    \(\(\(Options[PlotFunction] = {PlotStyle \[Rule] GrayLevel[0], 
          ImageSize \[Rule] Automatic};\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(PlotFunction[expr_, opts___?OptionQ] := 
      Module[{style, 
          size}, \[IndentingNewLine]{style, 
            size} = \({PlotStyle, ImageSize} /. {opts}\) /. 
            Options[PlotFunction]; \[IndentingNewLine]MakeGraphic[
          expr, "\<PlotStyle=\>" <> ToString[style], "\<ImageSize=\>" <> 
            ToString[size]]\[IndentingNewLine]]\)}], "Input"],

Cell["\<\
In the next cell PlotFunction performs as expected when given no options, one \
option, or two options.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(PlotFunction[x^2]\), "\n", 
    \(PlotFunction[x^2, PlotStyle \[Rule] Thickness[0.03]]\), "\n", 
    \(PlotFunction[x^2, PlotStyle \[Rule] Thickness[0.03], 
      ImageSize \[RuleDelayed] {xx, yy}]\)}], "Input"],

Cell[BoxData[
    \(MakeGraphic[x\^2, "PlotStyle=GrayLevel[0]", 
      "ImageSize=Automatic"]\)], "Output"],

Cell[BoxData[
    \(MakeGraphic[x\^2, "PlotStyle=Thickness[0.03]", 
      "ImageSize=Automatic"]\)], "Output"],

Cell[BoxData[
    \(MakeGraphic[x\^2, "PlotStyle=Thickness[0.03]", 
      "ImageSize={xx, yy}"]\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell Plot alows us to provide a list of options rather than a \
sequence of options.  For consistency we would like our PlotFunction to allow \
us to give a list of options as well.\
\>", "Text"],

Cell[BoxData[
    \(\(Plot[
        Sin[x], {x, 0, 12}, {PlotStyle \[Rule] Thickness[0.03], 
          ImageSize \[Rule] {400, 250}}];\)\)], "Input"],

Cell["\<\
Unfortunately our PlotFunction defined above has a problem when a list of \
option is given in the next cell.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(PlotFunction[
      x^2, {PlotStyle \[Rule] Thickness[0.03], 
        ImageSize \[Rule] {400, 250}}]\)], "Input"],

Cell[BoxData[
    \(Set::"shape" \(\(:\)\(\ \)\) 
      "Lists \!\({style$38, size$38}\) and \!\({\({\(\(Thickness[0.03`]\)\), \
\(\({400, 250}\)\)}\)}\) are not the same shape."\)], "Message"],

Cell[BoxData[
    \(MakeGraphic[x\^2, "PlotStyle=style$38", 
      "ImageSize=size$38"]\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "The way to avoid the problem in the last exaple is to use a different \
method for getting the option settings.  Instead the following form should \
normally be used to get option settings.\n\t",
  StyleBox["{var1,var2,var3}={opt1,opt2,opt3}/.Flatten[{opts,Options[f]}]", 
    "InlineInput"],
  "\nThis more robust method is used in the next cell."
}], "Text"],

Cell[BoxData[{
    \(\(ClearAll[PlotFunction];\)\), "\n", 
    \(\(Options[PlotFunction] = {PlotStyle \[Rule] GrayLevel[0], 
          ImageSize \[Rule] Automatic, Ticks -> Automatic, 
          Axes -> True};\)\[IndentingNewLine]\), "\[IndentingNewLine]", 
    \(PlotFunction[expr_, opts___?OptionQ] := 
      Module[{style, 
          size}, \[IndentingNewLine]{style, size} = {PlotStyle, ImageSize} /. 
            Flatten[{opts, 
                Options[PlotFunction]}]; \[IndentingNewLine]MakeGraphic[
          expr, "\<PlotStyle=\>" <> ToString[style], "\<ImageSize=\>" <> 
            ToString[size]]\[IndentingNewLine]]\)}], "Input"],

Cell["\<\
The next cell demonstrates that the new version of PlotFunction can take any \
way of expressing options that passes the OptionQ test.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(PlotFunction[x^2]\), "\n", 
    \(PlotFunction[x^2, PlotStyle \[Rule] Thickness[0.03]]\), "\n", 
    \(PlotFunction[x^2, PlotStyle \[Rule] Thickness[0.03], 
      ImageSize \[RuleDelayed] {xx, yy}]\), "\[IndentingNewLine]", 
    \(PlotFunction[
      x^2, {PlotStyle \[Rule] Thickness[0.03], 
        ImageSize \[Rule] {400, 250}}]\), "\[IndentingNewLine]", 
    \(PlotFunction[
      x^2, \ {PlotStyle \[Rule] GrayLevel[0], {{ImageSize \[Rule] Automatic}, 
          Ticks -> Automatic}, Axes -> True}]\)}], "Input"],

Cell[BoxData[
    \(MakeGraphic[x\^2, "PlotStyle=GrayLevel[0]", 
      "ImageSize=Automatic"]\)], "Output"],

Cell[BoxData[
    \(MakeGraphic[x\^2, "PlotStyle=Thickness[0.03]", 
      "ImageSize=Automatic"]\)], "Output"],

Cell[BoxData[
    \(MakeGraphic[x\^2, "PlotStyle=Thickness[0.03]", 
      "ImageSize={xx, yy}"]\)], "Output"],

Cell[BoxData[
    \(MakeGraphic[x\^2, "PlotStyle=Thickness[0.03]", 
      "ImageSize={400, 250}"]\)], "Output"],

Cell[BoxData[
    \(MakeGraphic[x\^2, "PlotStyle=GrayLevel[0]", 
      "ImageSize=Automatic"]\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Ordering", "Section"],

Cell["The Ordering usage message is shown below.", "Text",
  CellTags->"Ordering"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?Ordering\)\)], "Input"],

Cell[BoxData[
    RowBox[{"\<\"Ordering[list] gives the position at which each element of \
list appears in Sort[list]. Ordering[list, n] gives the positions of the \
first n elements of Sort[list]. Ordering[list, -n] gives the positions of the \
last n elements of Sort[list]. Ordering[list, n, p] uses Sort[list, p].\"\>", 
      " ", 
      ButtonBox[
        StyleBox["More\[Ellipsis]",
          "SR"],
        ButtonData:>"Ordering",
        Active->True,
        ButtonStyle->"RefGuideLink"]}]], "Print",
  CellTags->"Info3276836798-2710999"]
}, Open  ]],

Cell["The next cell gives us the ordering of a list.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(lst = {\(-2\), 4, \(-5\), Sin[2], 4, \[Pi], \(-\[Infinity]\), 
          4, \[Infinity]};\)\), "\[IndentingNewLine]", 
    \(ord = Ordering[lst]\)}], "Input"],

Cell[BoxData[
    \({3, 1, 2, 5, 8, 6, 7, 9, 4}\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell shows how we can take the results of Ordering and get a sorted \
list.  When Ordering is given one or two arguments we get the ordering of a \
cononical sort which may not be the ordering of a numerically sorted list.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(Part[lst, ord]\), "\[IndentingNewLine]", 
    \(Sort[lst]\)}], "Input"],

Cell[BoxData[
    RowBox[{"{", 
      RowBox[{\(-5\), ",", \(-2\), ",", "4", ",", "4", ",", "4", ",", "\[Pi]",
         ",", 
        InterpretationBox[\(-\[Infinity]\),
          DirectedInfinity[ -1]], ",", 
        InterpretationBox["\[Infinity]",
          DirectedInfinity[ 1]], ",", \(Sin[2]\)}], "}"}]], "Output"],

Cell[BoxData[
    RowBox[{"{", 
      RowBox[{\(-5\), ",", \(-2\), ",", "4", ",", "4", ",", "4", ",", "\[Pi]",
         ",", 
        InterpretationBox[\(-\[Infinity]\),
          DirectedInfinity[ -1]], ",", 
        InterpretationBox["\[Infinity]",
          DirectedInfinity[ 1]], ",", \(Sin[2]\)}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
Ordering[lst,4]  gives the first four elements of Ordering[lst].  The second \
argument of Ordering can be (All) or an Integer meeting the condition \
(-Length[list] \[LessEqual] n \[LessEqual] Length[list]).  A few cells after \
this example we use All as a a second argument for Ordering.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Ordering[lst, 4]\)], "Input"],

Cell[BoxData[
    \({3, 1, 2, 5}\)], "Output"]
}, Open  ]],

Cell["The next cell gives the last four elements of Ordering[lst].", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Ordering[lst, \(-4\)]\)], "Input"],

Cell[BoxData[
    \({6, 7, 9, 4}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "The next cell gives the ",
  Cell[BoxData[
      \(TraditionalForm\`2\^nd\)]],
  " through the ",
  Cell[BoxData[
      \(TraditionalForm\`4\^th\)]],
  " elements of  Ordering[lst]. "
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Ordering[lst, {2, 4}]\)], "Input"],

Cell[BoxData[
    \({1, 2, 5}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "The output of the next cell returns with the ",
  Cell[BoxData[
      \(TraditionalForm\`3\^rd\)]],
  " element of Ordering[lst], and ends with the ",
  Cell[BoxData[
      \(TraditionalForm\`2\^nd\)]],
  " from the last element of Ordering[lst]."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Ordering[lst, {3, \(-2\)}]\)], "Input"],

Cell[BoxData[
    \({2, 5, 8, 6, 7, 9}\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell returns every other element of Ordering[lst] starting with the \
first element of (lst) and ending with the last element of (lst).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Ordering[lst, {1, \(-1\), 2}]\)], "Input"],

Cell[BoxData[
    \({3, 2, 8, 7, 4}\)], "Output"]
}, Open  ]],

Cell["\<\
As mentioned above Ordering normally gives the ordering of a cononical sort.  \
We can give Ordering a third argument to get the Ordering of another type of \
sort.  In the next cell we get the ordering of a numeric sort.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(ord2 = Ordering[lst, All, Less]\)], "Input"],

Cell[BoxData[
    \({7, 3, 1, 4, 6, 8, 5, 2, 9}\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell shows how we can take the results of the last Ordering and get \
a numerically sorted list.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(Part[lst, ord2]\), "\[IndentingNewLine]", 
    \(Sort[lst, Less]\)}], "Input"],

Cell[BoxData[
    RowBox[{"{", 
      RowBox[{
        InterpretationBox[\(-\[Infinity]\),
          DirectedInfinity[ -1]], ",", \(-5\), ",", \(-2\), ",", \(Sin[2]\), 
        ",", "\[Pi]", ",", "4", ",", "4", ",", "4", ",", 
        InterpretationBox["\[Infinity]",
          DirectedInfinity[ 1]]}], "}"}]], "Output"],

Cell[BoxData[
    RowBox[{"{", 
      RowBox[{
        InterpretationBox[\(-\[Infinity]\),
          DirectedInfinity[ -1]], ",", \(-5\), ",", \(-2\), ",", \(Sin[2]\), 
        ",", "\[Pi]", ",", "4", ",", "4", ",", "4", ",", 
        InterpretationBox["\[Infinity]",
          DirectedInfinity[ 1]]}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
In all the examples above Ordering was given a list, but Ordering can work \
with expressions having any head as shown in the next cell.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[h];\)\), "\[IndentingNewLine]", 
    \(Ordering[
      h[\(-2\), 4, \(-5\), Sin[2], 4, \[Pi], \(-\[Infinity]\), 
        4, \[Infinity]]]\)}], "Input"],

Cell[BoxData[
    \({3, 1, 2, 5, 8, 6, 7, 9, 4}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Orderless", "Section"],

Cell["\<\
For the input below (f) has the Orderless attribute which causes (f) to sort  \
it's arguments into canonical order.\
\>", "Text",
  CellTags->"Orderless"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll["\<Global`*\>"];\)\), "\n", 
    \(\(Attributes[f] = {Orderless};\)\), "\n", 
    \(f[z, x, c, v, b]\)}], "Input"],

Cell[BoxData[
    \(f[b, c, v, x, z]\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell we see that numeric arguments aren't necessarily sorted in \
numeric order.  Instead they are sorted into canonical order.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(f[\[Pi], 4, 3, 2]\)], "Input"],

Cell[BoxData[
    \(f[2, 3, 4, \[Pi]]\)], "Output"]
}, Open  ]],

Cell["\<\
Functions with the Orderless attribute sort the arguments before definitions \
are applied.  That explains why the result of the input below is not {x, z} \
or {z, x}.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(f[a_, b_, c__] := {a, b}\), "\n", 
    \(f[z, x, c, v, b]\)}], "Input"],

Cell[BoxData[
    \({b, c}\)], "Output"]
}, Open  ]],

Cell["\<\
The Orderless attribute can effect pattern matching in ways many users don't \
understand.  The situation demonstrated in the cells below is one such \
example.  The next input clears the definitions and Orderless attribute from \
(f).  The rule applied in the next cell can only be used when the first \
argument of (f) has the head Real.  For this example the first argument is an \
integer so the rule isn't used.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(ClearAll[f]\), "\n", 
    \(f[5, 4, 3.5, 2, 1.7, \ 1] /. f[x_Real, y__] -> {x, {y}}\)}], "Input"],

Cell[BoxData[
    \(f[5, 4, 3.5`, 2, 1.7`, 1]\)], "Output"]
}, Open  ]],

Cell["\<\
For the next input (f) has the Orderless attribute and same rule is applied \
again.  This time the arguments are sorted in canonical order before the rule \
is used.  Then the pattern matcher finds that the rule matches when \
(x\[Rule]1.7) and (y\[Rule] Sequence[1, 2, 3.5, 4, 5]).  The pattern matcher \
could have used (x \[Rule] 3.5) and the appropriate sequence for (y), but the \
other match was found first.  Once the pattern matcher found a match it \
stopped searching.  Notice the arguments used for (y) in the output are \
sorted in canonical order.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Attributes[f] = {Orderless};\)\), "\n", 
    \(f[5, 4, 3.5, 2, 1.7, \ 1] /. f[x_Real, y__] -> {x, {y}}\)}], "Input"],

Cell[BoxData[
    \({1.7`, {1, 2, 3.5`, 4, 5}}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Outer", "Section"],

Cell["The first two examples demonstrate the basic use of Outer.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Outer[f, {x1, x2}, {y1, y2, y3}]\)], "Input"],

Cell[BoxData[
    \({{f[x1, y1], f[x1, y2], f[x1, y3]}, {f[x2, y1], f[x2, y2], 
        f[x2, y3]}}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Outer[f, {x1, x2}, {y1, y2, y3}, {z1, z2}]\)], "Input"],

Cell[BoxData[
    \({{{f[x1, y1, z1], f[x1, y1, z2]}, {f[x1, y2, z1], 
          f[x1, y2, z2]}, {f[x1, y3, z1], f[x1, y3, z2]}}, {{f[x2, y1, z1], 
          f[x2, y1, z2]}, {f[x2, y2, z1], f[x2, y2, z2]}, {f[x2, y3, z1], 
          f[x2, y3, z2]}}}\)], "Output"]
}, Open  ]],

Cell["\<\
A user asked the MathGroup how to define tables like the one below, but \
having larger dimensions without writing the whole table explicitly? \
\>", "Text",
  CellTags->"Outer"],

Cell[BoxData[
    StyleBox[\(\(\ \)\({{f1[x1], f1[x2], f1[x3], f1[x4]}, \n\ \ \ \ {f2[x1], 
          f2[x2], f2[x3], f2[x4]}, \n\ \ \ {f3[x1], f3[x2], f3[x3], 
          f3[x4]}, \n\ \ \ {f4[x1], f4[x2], f4[x3], f4[x4]}}\)\),
      FontFamily->"Courier New",
      FontSize->10]], "Output"],

Cell["Bob Hanlon provided the following solution.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{\(ClearAll["\<Global`*\>"];\), "\[IndentingNewLine]", 
    StyleBox[\(Outer[#1[#2]\  &, \ {f1, \ f2, \ f3, \ f4}\ , \ {x1, \ x2, \ 
          x3}]\),
      FontFamily->"Courier New",
      FontSize->10]}], "Input"],

Cell[BoxData[
    \({{f1[x1], f1[x2], f1[x3]}, {f2[x1], f2[x2], f2[x3]}, {f3[x1], f3[x2], 
        f3[x3]}, {f4[x1], f4[x2], f4[x3]}}\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell does the same thing, and is based on an example in the Help \
Browser.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    StyleBox[\(Outer[
        MapAll, \ {f1, \ f2, \ f3, \ f4}\ , \ {x1, \ x2, \ x3}]\),
      FontFamily->"Courier New",
      FontSize->10]], "Input"],

Cell[BoxData[
    \({{f1[x1], f1[x2], f1[x3]}, {f2[x1], f2[x2], f2[x3]}, {f3[x1], f3[x2], 
        f3[x3]}, {f4[x1], f4[x2], f4[x3]}}\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell shows what we get for the outer product of two matrices.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Outer[f, {{a11, a12}, {a21, a22}}, {{b11, b12}, {b21, b22}}] // 
      MatrixForm\)], "Input"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {\(f[a11, b11]\), \(f[a11, b12]\)},
                    {\(f[a11, b21]\), \(f[a11, b22]\)}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {\(f[a12, b11]\), \(f[a12, b12]\)},
                    {\(f[a12, b21]\), \(f[a12, b22]\)}
                    }], "\[NoBreak]", ")"}]},
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {\(f[a21, b11]\), \(f[a21, b12]\)},
                    {\(f[a21, b21]\), \(f[a21, b22]\)}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {\(f[a22, b11]\), \(f[a22, b12]\)},
                    {\(f[a22, b21]\), \(f[a22, b22]\)}
                    }], "\[NoBreak]", ")"}]}
            }], "\[NoBreak]", ")"}],
      MatrixForm[ {{{{
        f[ a11, b11], 
        f[ a11, b12]}, {
        f[ a11, b21], 
        f[ a11, b22]}}, {{
        f[ a12, b11], 
        f[ a12, b12]}, {
        f[ a12, b21], 
        f[ a12, b22]}}}, {{{
        f[ a21, b11], 
        f[ a21, b12]}, {
        f[ a21, b21], 
        f[ a21, b22]}}, {{
        f[ a22, b11], 
        f[ a22, b12]}, {
        f[ a22, b21], 
        f[ a22, b22]}}}}]]], "Output"]
}, Open  ]],

Cell["\<\
The next cell flattens what we get from the computing Outer with 4 lists.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Flatten[
      Outer[h, {a1, a2, a3}, {b1, b2, b3}, {c1, c2}, {d1, d2}]]\)], "Input"],

Cell[BoxData[
    \({h[a1, b1, c1, d1], h[a1, b1, c1, d2], h[a1, b1, c2, d1], 
      h[a1, b1, c2, d2], h[a1, b2, c1, d1], h[a1, b2, c1, d2], 
      h[a1, b2, c2, d1], h[a1, b2, c2, d2], h[a1, b3, c1, d1], 
      h[a1, b3, c1, d2], h[a1, b3, c2, d1], h[a1, b3, c2, d2], 
      h[a2, b1, c1, d1], h[a2, b1, c1, d2], h[a2, b1, c2, d1], 
      h[a2, b1, c2, d2], h[a2, b2, c1, d1], h[a2, b2, c1, d2], 
      h[a2, b2, c2, d1], h[a2, b2, c2, d2], h[a2, b3, c1, d1], 
      h[a2, b3, c1, d2], h[a2, b3, c2, d1], h[a2, b3, c2, d2], 
      h[a3, b1, c1, d1], h[a3, b1, c1, d2], h[a3, b1, c2, d1], 
      h[a3, b1, c2, d2], h[a3, b2, c1, d1], h[a3, b2, c1, d2], 
      h[a3, b2, c2, d1], h[a3, b2, c2, d2], h[a3, b3, c1, d1], 
      h[a3, b3, c1, d2], h[a3, b3, c2, d1], h[a3, b3, c2, d2]}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next two examples we provide integers as additional arguments.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Outer[f, {{a11, a12}, {a21, a22}}, {{b11, b12}, {b21, b22}}, 2, 1] // 
      MatrixForm\)], "Input"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {\(f[a11, {b11, b12}]\)},
                    {\(f[a11, {b21, b22}]\)}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {\(f[a12, {b11, b12}]\)},
                    {\(f[a12, {b21, b22}]\)}
                    }], "\[NoBreak]", ")"}]},
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {\(f[a21, {b11, b12}]\)},
                    {\(f[a21, {b21, b22}]\)}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {\(f[a22, {b11, b12}]\)},
                    {\(f[a22, {b21, b22}]\)}
                    }], "\[NoBreak]", ")"}]}
            }], "\[NoBreak]", ")"}],
      MatrixForm[ {{{
        f[ a11, {b11, b12}], 
        f[ a11, {b21, b22}]}, {
        f[ a12, {b11, b12}], 
        f[ a12, {b21, b22}]}}, {{
        f[ a21, {b11, b12}], 
        f[ a21, {b21, b22}]}, {
        f[ a22, {b11, b12}], 
        f[ a22, {b21, b22}]}}}]]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Outer[f, {{a11, a12}, {a21, a22}}, {{b11, b12}, {b21, b22}}, 1, 2] // 
      MatrixForm\)], "Input"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {\(f[{a11, a12}, b11]\)},
                    {\(f[{a11, a12}, b12]\)}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {\(f[{a11, a12}, b21]\)},
                    {\(f[{a11, a12}, b22]\)}
                    }], "\[NoBreak]", ")"}]},
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {\(f[{a21, a22}, b11]\)},
                    {\(f[{a21, a22}, b12]\)}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {\(f[{a21, a22}, b21]\)},
                    {\(f[{a21, a22}, b22]\)}
                    }], "\[NoBreak]", ")"}]}
            }], "\[NoBreak]", ")"}],
      MatrixForm[ {{{
        f[ {a11, a12}, b11], 
        f[ {a11, a12}, b12]}, {
        f[ {a11, a12}, b21], 
        f[ {a11, a12}, b22]}}, {{
        f[ {a21, a22}, b11], 
        f[ {a21, a22}, b12]}, {
        f[ {a21, a22}, b21], 
        f[ {a21, a22}, b22]}}}]]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Part", "Section"],

Cell["\<\
Part[expr,0] is always the same as Head[expr], but Head is a bit faster since \
it doesn't need to determine what part.  For example Part[1+\[Pi], 0] returns \
Plus.\
\>", "Text",
  CellTags->"Part"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Part[1 + \[Pi], 0]\)], "Input"],

Cell[BoxData[
    \(Plus\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell we see the part at position (2,0) of the list {1,1+\[Pi]} is \
Plus.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Part[{1, 1 + \[Pi]}, 2, 0]\)], "Input"],

Cell[BoxData[
    \(Plus\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell a matrix (m) is made and used in some examples below. Of \
course the method demonstrated in the cells that follow can be used on any \
expression not only matrices.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(\(\(m = {{x11, x12, x13, x14, x15}, {x21, x22, x23, x24, x25}, {x31, 
            x32, x33, x34, x35}, {x41, x42, x43, x44, x45}, {x51, x52, x53, 
            x54, x55}};\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(MatrixForm[m]\)}], "Input"],

Cell[BoxData[
    TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {"x11", "x12", "x13", "x14", "x15"},
            {"x21", "x22", "x23", "x24", "x25"},
            {"x31", "x32", "x33", "x34", "x35"},
            {"x41", "x42", "x43", "x44", "x45"},
            {"x51", "x52", "x53", "x54", "x55"}
            }], "\[NoBreak]", ")"}],
      Function[ BoxForm`e$, 
        MatrixForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell["\<\
Part has a powerful feature that many users aren't aware of.  The expression \
m[[list1,list2]] returns the sub-matrix of (m) formed by the intersection of \
the rows given by list1 and the columns given by list2. The next cell gives \
an example. This is probably the quickest way to get such a submatrix of (m).\
\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(m[\([{1, 3, 4}, {2, 5}]\)]\  // MatrixForm\)], "Input"],

Cell[BoxData[
    TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {"x12", "x15"},
            {"x32", "x35"},
            {"x42", "x45"}
            }], "\[NoBreak]", ")"}],
      Function[ BoxForm`e$, 
        MatrixForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell["\<\
m[[n,list2]] returns a list of elements at positions (list2) in row n. The \
next cell gives an example.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(m[\([2, {1, 2, 5}]\)]\)], "Input"],

Cell[BoxData[
    \({x21, x22, x25}\)], "Output"]
}, Open  ]],

Cell["\<\
Likewise m[[list1,n]] returns a list of elements at positions (list1) of \
column n. The next cell gives an example.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(m[\([{1, 2, 5}, 2]\)]\)], "Input"],

Cell[BoxData[
    \({x12, x22, x52}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Use of the forms demonstrated above gives the fastest way to change \
multiple parts of an expression provided the parts can be reached with this \
method. Rob Knapp makes this point in a tutorial on Packed Arrays at   ",
  ButtonBox["http://library.wolfram.com/database/TechNotes/391/",
    ButtonData:>{
      URL[ "http://library.wolfram.com/database/TechNotes/391/"], None},
    ButtonStyle->"Hyperlink"],
  ".  In that tutorial he shows how this method gives a significant speed \
advantage in an implementation of LUDecomposition. This method of changing \
multiple values is demonstrated on simple examples in the cells below where \
elements of the matrix (m) from above are changed.\n\nNotice the use of All \
inside Part is not available in Version 3 or earlier."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(m[\([All, 3]\)] = {a1, a2, a3, a4, a5};\)\), "\[IndentingNewLine]", 
    \(MatrixForm[m]\)}], "Input"],

Cell[BoxData[
    TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {"x11", "x12", "a1", "x14", "x15"},
            {"x21", "x22", "a2", "x24", "x25"},
            {"x31", "x32", "a3", "x34", "x35"},
            {"x41", "x42", "a4", "x44", "x45"},
            {"x51", "x52", "a5", "x54", "x55"}
            }], "\[NoBreak]", ")"}],
      Function[ BoxForm`e$, 
        MatrixForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(m[\([2, All]\)] = {b1, b2, b3, b4, b5};\)\), "\[IndentingNewLine]", 
    \(MatrixForm[m]\)}], "Input"],

Cell[BoxData[
    TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {"x11", "x12", "a1", "x14", "x15"},
            {"b1", "b2", "b3", "b4", "b5"},
            {"x31", "x32", "a3", "x34", "x35"},
            {"x41", "x42", "a4", "x44", "x45"},
            {"x51", "x52", "a5", "x54", "x55"}
            }], "\[NoBreak]", ")"}],
      Function[ BoxForm`e$, 
        MatrixForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell["\<\
In the next cell All is used to access the first, second and fourth columns \
of matrix (m).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Part[m, All, {1, 2, 4}] // MatrixForm\)], "Input"],

Cell[BoxData[
    TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {"x11", "x12", "x14"},
            {"b1", "b2", "b4"},
            {"x31", "x32", "x34"},
            {"x41", "x42", "x44"},
            {"x51", "x52", "x54"}
            }], "\[NoBreak]", ")"}],
      Function[ BoxForm`e$, 
        MatrixForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell["\<\
In the next cell we change elements of (m) where rows (1,3) intersect with \
columns (2,3,5).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(m[\([{1, 3}, {2, 3, 5}]\)] = {{jjj1, jjj2, jjj3}, {kkk1, kkk2, 
            kkk3}};\)\), "\[IndentingNewLine]", 
    \(MatrixForm[m]\)}], "Input"],

Cell[BoxData[
    TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {"x11", "jjj1", "jjj2", "x14", "jjj3"},
            {"b1", "b2", "b3", "b4", "b5"},
            {"x31", "kkk1", "kkk2", "x34", "kkk3"},
            {"x41", "x42", "a4", "x44", "x45"},
            {"x51", "x52", "a5", "x54", "x55"}
            }], "\[NoBreak]", ")"}],
      Function[ BoxForm`e$, 
        MatrixForm[ BoxForm`e$]]]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Partition", "Section"],

Cell[TextData[{
  "Lots of users are not familiar with the Partition function.  Partition is \
well documented under Built-in Functions in the ",
  ButtonBox["Help Browser",
    ButtonData:>{"Partition"},
    ButtonStyle->"RefGuideLink"],
  ".  The usage message for this powerful feature is shown below."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?Partition\)\)], "Input"],

Cell[BoxData[
    RowBox[{"\<\"Partition[list, n] partitions list into non-overlapping \
sublists of length n. Partition[list, n, d] generates sublists with offset d. \
Partition[list, {n1, n2, ... }] partitions a nested list into blocks of size \
n1 \[Cross] n2 \[Cross] \[Ellipsis] . Partition[list, {n1, n2, ... }, {d1, \
d2, ... }] uses offset di at level i in list. Partition[list, n, d, {kL, kR}] \
specifies that the first element of list should appear at position kL in the \
first sublist, and the last element of list should appear at or after \
position kR in the last sublist. If additional elements are needed, Partition \
fills them in by treating list as cyclic. Partition[list, n, d, {kL, kR}, x] \
pads if necessary by repeating the element x. Partition[list, n, d, {kL, kR}, \
{x1, x2, ... }] pads if necessary by cyclically repeating the elements xi. \
Partition[list, n, d, {kL, kR}, {}] uses no padding, and so can yield \
sublists of different lengths. Partition[list, nlist, dlist, {klistL, \
klistR}, padlist] specifies alignments and padding in a nested list.\"\>", 
      " ", 
      ButtonBox[
        StyleBox["More\[Ellipsis]",
          "SR"],
        ButtonData:>"Partition",
        Active->True,
        ButtonStyle->"RefGuideLink"]}]], "Print",
  CellTags->"Info3242474896-7343620"]
}, Open  ]],

Cell["\<\
A simple demonstration of Partition is given in the next cell.  If the third \
argument is not provided the result will be the same as if the a third \
argument equal to the second was provided.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(lst = Range[50];\)\), "\n", 
    \(Partition[lst, 4]\)}], "Input"],

Cell[BoxData[
    \({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}, {17, 
        18, 19, 20}, {21, 22, 23, 24}, {25, 26, 27, 28}, {29, 30, 31, 
        32}, {33, 34, 35, 36}, {37, 38, 39, 40}, {41, 42, 43, 44}, {45, 46, 
        47, 48}}\)], "Output"]
}, Open  ]],

Cell["\<\
The effect of the third argument is demonstrated in the next two examples..\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Partition[lst, 4, 3]\)], "Input"],

Cell[BoxData[
    \({{1, 2, 3, 4}, {4, 5, 6, 7}, {7, 8, 9, 10}, {10, 11, 12, 13}, {13, 14, 
        15, 16}, {16, 17, 18, 19}, {19, 20, 21, 22}, {22, 23, 24, 25}, {25, 
        26, 27, 28}, {28, 29, 30, 31}, {31, 32, 33, 34}, {34, 35, 36, 
        37}, {37, 38, 39, 40}, {40, 41, 42, 43}, {43, 44, 45, 46}, {46, 47, 
        48, 49}}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Partition[lst, 4, 10]\)], "Input"],

Cell[BoxData[
    \({{1, 2, 3, 4}, {11, 12, 13, 14}, {21, 22, 23, 24}, {31, 32, 33, 
        34}, {41, 42, 43, 44}}\)], "Output"]
}, Open  ]],

Cell["\<\
Next we give Partition a fourth argument of 3.  Partition then treats the \
list as if it were periodic and ensures the first element of (lst) is the \
third element of the first sublist.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Partition[lst, 5, 5, 3]\)], "Input"],

Cell[BoxData[
    \({{49, 50, 1, 2, 3}, {4, 5, 6, 7, 8}, {9, 10, 11, 12, 13}, {14, 15, 16, 
        17, 18}, {19, 20, 21, 22, 23}, {24, 25, 26, 27, 28}, {29, 30, 31, 32, 
        33}, {34, 35, 36, 37, 38}, {39, 40, 41, 42, 43}, {44, 45, 46, 47, 
        48}}\)], "Output"]
}, Open  ]],

Cell["\<\
Next the fourth argument of Partition is 7 and we get a partition where the \
first element of (lst) would be the seventh element of the result if it were \
flattened.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Partition[lst, 5, 5, 7]\)], "Input"],

Cell[BoxData[
    \({{45, 46, 47, 48, 49}, {50, 1, 2, 3, 4}, {5, 6, 7, 8, 9}, {10, 11, 12, 
        13, 14}, {15, 16, 17, 18, 19}, {20, 21, 22, 23, 24}, {25, 26, 27, 28, 
        29}, {30, 31, 32, 33, 34}, {35, 36, 37, 38, 39}, {40, 41, 42, 43, 
        44}}\)], "Output"]
}, Open  ]],

Cell["\<\
Partition can work in higher dimensions. In the next example Partition \
seperates a matrix into blocks.\
\>", "Text"],

Cell[BoxData[{
    \(\(Clear["\<Global`*\>"];\)\), "\n", 
    \(\(mtrx = {\[IndentingNewLine]{w1, w2, w3, w4, w5, 
            w6}, \[IndentingNewLine]{x1, x2, x3, x4, x5, 
            x6}, \[IndentingNewLine]{y1, y2, y3, y4, y5, 
            y6}, \[IndentingNewLine]{z1, z2, z3, z4, z5, 
            z6}\[IndentingNewLine]};\)\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Partition[mtrx, {2, 2}, {2, 2}] // MatrixForm\)], "Input"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"w1", "w2"},
                    {"x1", "x2"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"w3", "w4"},
                    {"x3", "x4"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"w5", "w6"},
                    {"x5", "x6"}
                    }], "\[NoBreak]", ")"}]},
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"y1", "y2"},
                    {"z1", "z2"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"y3", "y4"},
                    {"z3", "z4"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"y5", "y6"},
                    {"z5", "z6"}
                    }], "\[NoBreak]", ")"}]}
            }], "\[NoBreak]", ")"}],
      MatrixForm[ {{{{w1, w2}, {x1, x2}}, {{w3, w4}, {x3, x4}}, {{w5, w6}, {
        x5, x6}}}, {{{y1, y2}, {z1, z2}}, {{y3, y4}, {z3, z4}}, {{y5, y6}, {
        z5, z6}}}}]]], "Output"]
}, Open  ]],

Cell["\<\
The next example demonstrates that Partition can work on expressions that \
don't have the head list.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[f];\)\), "\n", 
    \(flst = f @@ Range[1, 20]\)}], "Input"],

Cell[BoxData[
    \(f[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
      20]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Partition[flst, 3]\)], "Input"],

Cell[BoxData[
    \(f[f[1, 2, 3], f[4, 5, 6], f[7, 8, 9], f[10, 11, 12], f[13, 14, 15], 
      f[16, 17, 18]]\)], "Output"]
}, Open  ]],

Cell["\<\
I haven't been able to find ways to clearly demonstrate use of the Partition \
features listed below.  Each of these features are in the Partition usage \
message.

\[Bullet]  Partition[list, n, d, {kL, kR}] specifies that the first element \
of list should appear at position kL in the first sublist, and the last \
element of list should appear at or after position kR in the last sublist.

\[Bullet]  Partition[list, n, d, {kL, kR}, x] pads if necessary by repeating \
the element x. 

\[Bullet]  Partition[list, n, d, {kL, kR}, {x1, x2, ... }] pads if necessary \
by cyclically repeating the elements xi.

\[Bullet]  Partition[list, n, d, {kL, kR}, {}] uses no padding, and so can \
yield sublists of different lengths. 

\[Bullet]  Partition[list, nlist, dlist, {klistL, klistR}, padlist] specifies \
alignments and padding in a nested list.\
\>", "Text",
  CellFrame->{{0, 0}, {0, 0.5}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Position", "Section"],

Cell["\<\
Position is used to determine the where a certain pattern can be found in an \
expression.  In the next cell Position returns a list of all the position of \
all parts of demo that match the pattern (_Plus).  The empty list at the end \
of the output list indicates that (demo) itself matches the pattern Position \
is looking for.\
\>", "Text",
  CellTags->"Position"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[x];\)\), "\[IndentingNewLine]", 
    \(\(demo = 
        x + 1\/\(x - 1\) + Cos[\(\[Pi] \@\( 2 + x/3\)\)\/3] + 
          Sin[\(\[Pi] \@ f[x + y + 1]\)\/6];\)\), "\[IndentingNewLine]", 
    \(posn = Position[demo, _Plus]\)}], "Input"],

Cell[BoxData[
    \({{1, 1}, {3, 1, 3, 1}, {4, 1, 3, 1, 1}, {}}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell we get the subexpression at three of the positions listed in \
the previous result.  Notice each of the sub-expressions is a sum.  The last \
element of the list returned by Position is {}, which indicates that demo \
itself matches the pattern (_Plus).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(Part[demo, 1, 1]\), "\[IndentingNewLine]", 
    \(Part[demo, 3, 1, 3, 1]\), "\[IndentingNewLine]", 
    \(Part[demo, 4, 1, 3, 1, 1]\)}], "Input"],

Cell[BoxData[
    \(x - 1\)], "Output"],

Cell[BoxData[
    \(2 + x\/3\)], "Output"],

Cell[BoxData[
    \(1 + x + y\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell we pass the list Position returned and get a list of all the \
parts of (demo) that match the pattern.  However, if you have no other need \
for the positions, it would be more direct to get the same result using \
Cases[demo,_Plus,{0,\[Infinity]}].  The results returned by Position can also \
be used as arguments of MapAt, and ReplacePart.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Extract[demo, posn]\)], "Input"],

Cell[BoxData[
    \({x - 1, 2 + x\/3, 1 + x + y, 
      1\/\(x - 1\) + x + Cos[1\/3\ \[Pi]\ \@\(2 + x\/3\)] + 
        Sin[1\/6\ \[Pi]\ \@f[1 + x + y]]}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell only the the whole expression matches the pattern and \
Position indicates this by returning {{}}.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Position[h[1, 2, 3], _h]\)], "Input"],

Cell[BoxData[
    \({{}}\)], "Output"]
}, Open  ]],

Cell["\<\
When Position finds no parts that match the pattern an empty list is returned \
as in the next cell.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Position[x + y, _h]\)], "Input"],

Cell[BoxData[
    \({}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "I don't provide further examples, but any combination of pattern matching \
constructs can be used with Position.  Nuances of ",
  ButtonBox["pattern matching",
    ButtonData:>"Pattern-Matching",
    ButtonStyle->"Hyperlink"],
  " are discussed in another section."
}], "Text"],

Cell[CellGroupData[{

Cell["Position[ expr, pattn, levspec ]", "Subsection"],

Cell[TextData[{
  "Position will take a level specification and all the variations I discuss \
under ",
  ButtonBox["Level Specification",
    ButtonData:>"Level Specification",
    ButtonStyle->"Hyperlink"],
  " are supported.  The next cell repeats an earlier example and returns all \
positions of demo with the head Plus."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Position[demo, _Plus]\)], "Input"],

Cell[BoxData[
    \({{1, 1}, {3, 1, 3, 1}, {4, 1, 3, 1, 1}, {}}\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell uses level specification 4 and we get all sub-expressions at \
levels 1 through 4 with the head Plus.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Position[demo, _Plus, 4]\)], "Input"],

Cell[BoxData[
    \({{1, 1}, {3, 1, 3, 1}}\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell uses level specification {4} which means to only look at level \
4.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Position[demo, _Plus, {4}]\)], "Input"],

Cell[BoxData[
    \({{3, 1, 3, 1}}\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell uses level specification {0,4} which means to look at levels 0 \
through 4. Level 0 is the entire (demo) expression.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Position[demo, _Plus, {0, 4}]\)], "Input"],

Cell[BoxData[
    \({{1, 1}, {3, 1, 3, 1}, {}}\)], "Output"]
}, Open  ]],

Cell["\<\
The default level specification for Position is {0,\[Infinity]} as in the \
next cell.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Position[demo, _Plus, {0, \[Infinity]}]\)], "Input"],

Cell[BoxData[
    \({{1, 1}, {3, 1, 3, 1}, {4, 1, 3, 1, 1}, {}}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Position[ expr, pattn, levspec, n] ", "Subsection"],

Cell["\<\
In the next cell we get the position of all integers in (data).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(data = {1.3, {1.3, 10}, 1.3, 11, {{1.3, 1.3, 12, 13}}, 14, 15, 1.3, 
          16, 1.3, 17, 18, 19, 1.3};\)\), "\n", 
    \(posn = Position[data, _Integer]\)}], "Input"],

Cell[BoxData[
    \({{2, 2}, {4}, {5, 1, 3}, {5, 1, 
        4}, {6}, {7}, {9}, {11}, {12}, {13}}\)], "Output"]
}, Open  ]],

Cell["\<\
Next we can use Extract to get the integers at the above positions.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Extract[data, posn]\)], "Input"],

Cell[BoxData[
    \({10, 11, 12, 13, 14, 15, 16, 17, 18, 19}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "We can give position a positive integer as a  ",
  Cell[BoxData[
      \(TraditionalForm\`4\^th\)]],
  " argument to get only the first (n) positions.  In the next cell we get \
the position of the first 4 integers.  Here I am specifying {0,\[Infinity]} \
as the level specification."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(posn = Position[data, _Integer, {0, \[Infinity]}, 4]\)], "Input"],

Cell[BoxData[
    \({{2, 2}, {4}, {5, 1, 3}, {5, 1, 4}}\)], "Output"]
}, Open  ]],

Cell["\<\
Next we ask for the position of the first 50 integers.  There are only 10 \
integers to be found, so we are given all 10 positions.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(posn = Position[data, _Integer, {0, \[Infinity]}, 50]\)], "Input"],

Cell[BoxData[
    \({{2, 2}, {4}, {5, 1, 3}, {5, 1, 
        4}, {6}, {7}, {9}, {11}, {12}, {13}}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Heads option", "Subsection"],

Cell[TextData[{
  "In the next cell Position tells us where the head Plus can be found.  Plus \
is at position 0 (the head of demo).  The head Plus is also at positions ",
  Cell[BoxData[
      \(TraditionalForm\`{1, 1, 0}\)]],
  ", ",
  Cell[BoxData[
      \(TraditionalForm\`{3, 1, 3, 1, 0}\)]],
  " and ",
  Cell[BoxData[
      \(TraditionalForm\`{4, 1, 3, 1, 1, 0}\)]],
  " which are the heads of sub-expressions at positions ",
  Cell[BoxData[
      \(TraditionalForm\`{1, 1}\)]],
  ", ",
  Cell[BoxData[
      \(TraditionalForm\`{3, 1, 3, 1}\)]],
  ", ",
  Cell[BoxData[
      \(TraditionalForm\`{4, 1, 3, 1, 1}\)]],
  "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Position[demo, Plus]\)], "Input"],

Cell[BoxData[
    \({{0}, {1, 1, 0}, {3, 1, 3, 1, 0}, {4, 1, 3, 1, 1, 0}}\)], "Output"]
}, Open  ]],

Cell["\<\
Position has an option Heads with the default setting (Heads\[Rule]True). If \
Position is used with the option setting (Heads\[Rule]False) it doesn't look \
at the heads of an expression or its sub-expressions.  Hence when the last \
example is repeated with the setting (Heads\[Rule]False) an empty list is \
returned.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Position[demo, Plus, Heads -> False]\)], "Input"],

Cell[BoxData[
    \({}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "In the next cell we get the only position of ",
  StyleBox["(2*f[x]+3*f'[x])", "InlineInput"],
  " where the integer 1 can be found.  The only place in this example where \
the integer 1 can be found is in the order of the derivative."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[f];\)\), "\[IndentingNewLine]", 
    \(Position[2*f[x] + 3*\(f'\)[x], 1, Heads -> True]\)}], "Input"],

Cell[BoxData[
    \({{2, 2, 0, 0, 1}}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "The next cell repeats the previous example with the setting \
(Heads\[Rule]False) and an empty list is returned.  An empty list is returned \
because the pattern matcher would have to look in the head of   ",
  StyleBox["f'[x]", "InlineInput"],
  "  to find the integer 1."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Position[2*f[x] + 3*\(f'\)[x], 1, Heads -> False]\)], "Input"],

Cell[BoxData[
    \({}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Also read  \"Further Examples\" at the end of the  ",
  ButtonBox["Position",
    ButtonStyle->"RefGuideLink"],
  "  documentation in the Help Browser."
}], "Subsubsection",
  FontSize->12]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Pattern  (x:pattn)", "Section"],

Cell[TextData[{
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " lets us use (x_Foo) to say that something with the head Foo will be \
called (x).  It also lets us use (x_?Test)  to say something for which Test \
returns True will be called (x).  Now if we want to say that something \
matching a certain pattern is called (x) we use ",
  Cell[BoxData[
      \(TraditionalForm\`\((x : pattn)\)\)]],
  ".  "
}], "Text",
  CellTags->"Pattern"],

Cell["\<\
The next cell gives an example where use of Pattern is helpful.  Here (ff) is \
only defined when it's argument is an Integer raised to a power.  In addition \
the exponent must have the head Plus.\
\>", "Text"],

Cell[BoxData[
    \(ff[x : \((_Integer^_Plus)\)] := Thread[x, Plus]\)], "Input"],

Cell[TextData[{
  "In the example below we get the result of evaluating  ",
  Cell[BoxData[
      \(TraditionalForm\`Thread[2\^\(3\ x - 5  y\), \ Plus]\)]],
  "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(ff[2\^\(3  x - 5  y\)]\)], "Input"],

Cell[BoxData[
    \(2\^\(3\ x\) + 2\^\(\(-5\)\ y\)\)], "Output"]
}, Open  ]],

Cell["\<\
Next we see (ff) is undefined when it's argument isn't an Integer raised to a \
power where the exponent has the head Plus.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(ff[2\^\(3  x\)]\)], "Input"],

Cell[BoxData[
    \(ff[2\^\(3\ x\)]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(ff[x\^\(3  x - 5  y\)]\)], "Input"],

Cell[BoxData[
    \(ff[x\^\(3\ x - 5\ y\)]\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Pattern Test (x_?Positive), (y_Real?Positive)", "Section"],

Cell[TextData[{
  "PatternTest is closely related to ",
  ButtonBox["Condition",
    ButtonData:>"Condition",
    ButtonStyle->"Hyperlink"],
  ".  PatternTest is used to specify that a certain pattern must meet a \
certain condition.  So for example in the next cell (f) is defined when given \
an argument that is a positive number. "
}], "Text",
  CellTags->"PatternTest"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(Clear[f, s]\), "\[IndentingNewLine]", 
    \(f[x_?Positive] := x + 1\), "\[IndentingNewLine]", 
    \({f[2], f[8.3], f[\[Pi]/2], f[\@\(-2\)]}\)}], "Input"],

Cell[BoxData[
    \({3, 9.3`, 1 + \[Pi]\/2, f[\[ImaginaryI]\ \@2]}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next example (f) is only defined when given an argument that is a \
positive integer.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(Clear[f, s]\), "\[IndentingNewLine]", 
    \(f[x_Integer?Positive] := x + 1\), "\[IndentingNewLine]", 
    \({f[2], f[8.3], f[\[Pi]/2], f[\@\(-2\)]}\)}], "Input"],

Cell[BoxData[
    \({3, f[8.3`], f[\[Pi]\/2], f[\[ImaginaryI]\ \@2]}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next example (f) is defined when given an argument that is a positive \
integer or a positive real number.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(Clear[f, s]\), "\[IndentingNewLine]", 
    \(f[x : \((\((_Integer | _Real)\)?Positive)\)] := 
      x + 1\), "\[IndentingNewLine]", 
    \({f[2], f[8.3], f[\[Pi]/2], f[\@\(-2\)]}\)}], "Input"],

Cell[BoxData[
    \({3, 9.3`, f[\[Pi]\/2], f[\[ImaginaryI]\ \@2]}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "In some cases we want to use a test that isn't a built-in unary operator \
(Positive, NumericQ, AtomQ, ...).  In that case we can use a ",
  ButtonBox["pure function",
    ButtonData:>"Function",
    ButtonStyle->"Hyperlink"],
  " as in the next example.  In the next example (f) is only defined when \
given an argument that is an integer between 0 and 10."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(Clear[f, s]\), "\[IndentingNewLine]", 
    \(f[x_Integer?\((0 < # < 10 &)\)] := x + 1\), "\[IndentingNewLine]", 
    \({f[2], f[25], f[8.3], f[\[Pi]/2], f[\@\(-2\)]}\)}], "Input"],

Cell[BoxData[
    \({3, f[25], f[8.3`], f[\[Pi]\/2], f[\[ImaginaryI]\ \@2]}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell (f) is only defined when given an argument of any type \
between 0 and 10.  Can you see why we need the part about (Im[#]===0) ?\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(Clear[f, s]\), "\[IndentingNewLine]", 
    \(f[x_?\((Im[#] === 0 && 0 < # < 10 &)\)] := 
      x + 1\), "\[IndentingNewLine]", 
    \({f[2], f[25], f[8.3], f[\[Pi]/2], f[\@\(-2\)]}\)}], "Input"],

Cell[BoxData[
    \({3, f[25], 9.3`, 1 + \[Pi]\/2, f[\[ImaginaryI]\ \@2]}\)], "Output"]
}, Open  ]],

Cell["\<\
We can't use pattern variables in the test portion of (Pattn/;Test), and that \
is why the definition in the next cell isn't used.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[foo];\)\), "\[IndentingNewLine]", 
    \(foo[x_?\((0 < x < 1)\)] := x^2\), "\[IndentingNewLine]", 
    \(foo[0.4]\)}], "Input"],

Cell[BoxData[
    \(foo[0.4`]\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Random", "Section"],

Cell[TextData[{
  "On 5 May 2000 Daniel Lichtblau of Wolfram Research reported at    \n",
  ButtonBox["http://forums.wolfram.com/mathgroup/archive/2000/May/msg00088.\
html",
    ButtonData:>{
      URL[ 
      "http://forums.wolfram.com/mathgroup/archive/2000/May/msg00088.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "\nthat the numbers produced using to produce rando approximate machine \
numbers are not completely random.  Further more at \n",
  ButtonBox["http://forums.wolfram.com/mathgroup/archive/2004/May/msg00002.\
html",
    ButtonData:>{
      URL[ 
      "http://forums.wolfram.com/mathgroup/archive/2004/May/msg00002.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  " \nAndrzej Kozlowski reported that this is still a problem in ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " 5.0. \nDaniel Lichtblau suggests that instead of using  Random[]  to \
generate random real machine numbers the following should be used.  I believe \
this will give a random number between 1 and 2.\n"
}], "Text",
  CellTags->"Random"],

Cell[BoxData[
    \(Random[Integer, 2^30 - 1]\/2.0^30 + 
      Random[Integer, 2^30 - 1]\/2.0^30\)], "Input"],

Cell["\<\
However, based on Daniel's explanation of the problem, I expect that the \
following also works around the bug in Random, and runs twice as fast as the \
solution above.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(N[Random[Real, {0, 1}, 17]]\)], "Input"],

Cell[BoxData[
    \(0.48062950070069244`\)], "Output"]
}, Open  ]],

Cell["\<\
In the above message Daniel Lichtblau also explained how one can make \
necessary changes to some of the standard packages.\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Rationalize", "Section"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?Rationalize\)\)], "Input"],

Cell[BoxData[
    RowBox[{"\<\"Rationalize[x] takes Real numbers in x that are close to \
rationals, and converts them to exact Rational numbers. Rationalize[x, dx] \
performs the conversion whenever the error made is smaller in magnitude than \
dx.\"\>", " ", 
      ButtonBox[
        StyleBox["More\[Ellipsis]",
          "SR"],
        ButtonData:>"Rationalize",
        Active->True,
        ButtonStyle->"RefGuideLink"]}]], "Print",
  CellTags->"Info3242474897-2101131"]
}, Open  ]],

Cell["\<\
The line below finds a rational number that is very close to the machine \
number approximation of Pi.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(est1 = Rationalize[N[\[Pi]], \ 0]\)], "Input"],

Cell[BoxData[
    \(245850922\/78256779\)], "Output"]
}, Open  ]],

Cell["\<\
Rationalize[N[\[Pi]],0.0]  gives the same number as the line above.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(N[\[Pi] - est1, \ 17]\)], "Input"],

Cell[BoxData[
    \(7.8179366199075435400152113`17*^-17\)], "Output"]
}, Open  ]],

Cell["\<\
The next line gives a rational approximation of \[Pi] that is remarkably \
close to the actual value of \[Pi].\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(est = Rationalize[\[Pi], \ 0.0]\)], "Input"],

Cell[BoxData[
    \(\[Pi]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Block[{$MaxExtraPrecision = 800}, \nN[\[Pi] - est, \ 17]\n]\)], "Input"],

Cell[BoxData[
    \(0\)], "Output"]
}, Open  ]],

Cell["\<\
If you want to quickly convert a Real to a Rational and you don't care about \
large integers in the numerator and denominator the next line should be used. \
It's about 26 times faster than Rationalize!\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(SetPrecision[14.2, \[Infinity]]\)], "Input"],

Cell[BoxData[
    \(3996944669291315\/281474976710656\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Range", "Section"],

Cell["\<\
In the cells that follow we see Range can be used in a lot of cases where \
Table is often used.  One difference  is that Range will normally make a list \
in about half the time Table would need to make the same list.

Range doesn't  have to count over integers.  In the next line Range starts at \
0 and counts in steps of 1/20  up to the last value less than (\[Pi]/3).  \
Notice (1<\[Pi]/3), but (21/20>\[Pi]/3), sot the list stops at 1.\
\>", "Text",
  CellTags->"Range"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Range[0, \[Pi]/3, 1/20]\)], "Input"],

Cell[BoxData[
    \({0, 1\/20, 1\/10, 3\/20, 1\/5, 1\/4, 3\/10, 7\/20, 2\/5, 9\/20, 1\/2, 
      11\/20, 3\/5, 13\/20, 7\/10, 3\/4, 4\/5, 17\/20, 9\/10, 19\/20, 
      1}\)], "Output"]
}, Open  ]],

Cell["The next example is similar to the previous example.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Range[0, 1, \[Pi]/20]\)], "Input"],

Cell[BoxData[
    \({0, \[Pi]\/20, \[Pi]\/10, \(3\ \[Pi]\)\/20, \[Pi]\/5, \[Pi]\/4, \(3\ \
\[Pi]\)\/10}\)], "Output"]
}, Open  ]],

Cell["\<\
In the same line where Range makes a list, a listable function such as Times \
or Power can be applied to the list as in the next line. The same list can be \
made using Table, but Range is almost always faster.  If the function being \
applied to each element of the list isn't listable, you can map it over the \
list, and it will work about as fast as if it was listable.  In the two \
following examples Power is applied to the list returned by Range.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[x, n, a];\)\), "\[IndentingNewLine]", 
    \(x^Range[n, n + 10, 2]\)}], "Input"],

Cell[BoxData[
    \({x\^n, x\^\(2 + n\), x\^\(4 + n\), x\^\(6 + n\), x\^\(8 + n\), 
      x\^\(10 + n\)}\)], "Output"]
}, Open  ]],

Cell["The next line give an interesting example.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Range[a, a + 12  n, \ 2  n]\)], "Input"],

Cell[BoxData[
    \({a, a + 2\ n, a + 4\ n, a + 6\ n, a + 8\ n, a + 10\ n, 
      a + 12\ n}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "In the next line Range is used to make a series expansion for Cos[x].  \
Timing experiments show that this is much faster than using Series, but the \
method below is fairly cryptic.  Also creating the series using Range \
requires knowledge of the general form of each term, while Series doesn't \
need this information.  The fact that Series must determine the coefficients \
for each term is probably the reason why it takes much longer.  The #& \
notation is explained in the discussion of ",
  ButtonBox["Function",
    ButtonData:>"Function",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Plus @@ \((\(\(-\((\(-1\))\)^\((#)\)\) 
              x^\((2  # - 2)\)/\(\((2  # - 2)\)!\) &\)[
          Range[7]])\)\)], "Input"],

Cell[BoxData[
    \(1 - x\^2\/2 + x\^4\/24 - x\^6\/720 + x\^8\/40320 - x\^10\/3628800 + 
      x\^12\/479001600\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Repeated (pattn ..), RepeatedNull (pattn ...)", "Section"],

Cell["\<\
Repeated (pattn ..) is used to represent a sequence of arguments that match a \
certain pattern.  For example in the next cell (f) is defined when given a \
sequence of one or more arguments that have the head Real or Integer.  When \
Repeated (..) is used the definition applies when some of the arguments are \
Real and others are Integer.\
\>", "Text",
  CellTags->"Repeated RepeatedNull"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(Clear[f, s]\), "\[IndentingNewLine]", 
    \(f[x : \((_Real | _Integer)\) .. ] := 
      Join[{x}, {\[Infinity]}]\), "\[IndentingNewLine]", 
    \({f[2], f[2.4], f[2, 4.3], f[], f[2, s]}\)}], "Input"],

Cell[BoxData[
    RowBox[{"{", 
      RowBox[{
        RowBox[{"{", 
          RowBox[{"2", ",", 
            InterpretationBox["\[Infinity]",
              DirectedInfinity[ 1]]}], "}"}], ",", 
        RowBox[{"{", 
          RowBox[{"2.4`", ",", 
            InterpretationBox["\[Infinity]",
              DirectedInfinity[ 1]]}], "}"}], ",", 
        RowBox[{"{", 
          RowBox[{"2", ",", "4.3`", ",", 
            InterpretationBox["\[Infinity]",
              DirectedInfinity[ 1]]}], "}"}], ",", \(f[]\), 
        ",", \(f[2, s]\)}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
In the previous example (f) was only defined when given one or more arguments \
that are Real or Integer.  NullRepeated (...) represents a sequence multiple, \
one, or an empty set of arguments matching a pattern.  So in the next example \
(f) is defined when given no arguments.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(Clear[f, s]\), "\[IndentingNewLine]", 
    \(f[x : \((_Real | _Integer)\) ... ] := 
      Join[{x}, {\[Infinity]}]\), "\[IndentingNewLine]", 
    \({f[2], f[2.4], f[2, 4.3], f[], f[2, s]}\)}], "Input"],

Cell[BoxData[
    RowBox[{"{", 
      RowBox[{
        RowBox[{"{", 
          RowBox[{"2", ",", 
            InterpretationBox["\[Infinity]",
              DirectedInfinity[ 1]]}], "}"}], ",", 
        RowBox[{"{", 
          RowBox[{"2.4`", ",", 
            InterpretationBox["\[Infinity]",
              DirectedInfinity[ 1]]}], "}"}], ",", 
        RowBox[{"{", 
          RowBox[{"2", ",", "4.3`", ",", 
            InterpretationBox["\[Infinity]",
              DirectedInfinity[ 1]]}], "}"}], ",", 
        RowBox[{"{", 
          InterpretationBox["\[Infinity]",
            DirectedInfinity[ 1]], "}"}], ",", \(f[2, s]\)}], "}"}]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Replace", "Section"],

Cell["\<\
The Replace function is greatly under appriciated because the Wolfram \
Research documentation gives very little discussion of what it can do. After \
reading the documentation on Replace you get the impression that it tries to \
use replacement rules on an entire expression and nothing more. 

The cell below demonstrates this basic use of Replace.  In this case the \
expression (demo) matches the form for the replacement rule. The rule is used \
once and that is the end of it.\
\>", "Text",
  CellTags->"Replace"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[a];\)\), "\[IndentingNewLine]", 
    \(\(demo = {0, {1, {2, {3, {4, {5, {6, {7, 7}}}}}}}};\)\), "\n", 
    \(Replace[demo, {x_, y__} \[RuleDelayed] {x, a, y}]\)}], "Input"],

Cell[BoxData[
    \({0, a, {1, {2, {3, {4, {5, {6, {7, 7}}}}}}}}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "The basic use of Replace isn't very useful. The power of Replace lies in \
use of it's third argument where a ",
  ButtonBox["level specification",
    ButtonData:>"Level Specification",
    ButtonStyle->"Hyperlink"],
  " is given. In the next cell the replacement is used at level 1 down to the \
atoms and all levels between."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Replace[demo, {x_, y__} \[RuleDelayed] {x, a, y}, \(-1\)]\)], "Input"],

Cell[BoxData[
    \({0, {1, 
        a, {2, a, {3, a, {4, a, {5, a, {6, a, {7, a, 7}}}}}}}}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next case the replacement is only performed at level 3.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Replace[demo, {x_, y__} \[RuleDelayed] {x, a, y}, {3}]\)], "Input"],

Cell[BoxData[
    \({0, {1, {2, {3, a, {4, {5, {6, {7, 7}}}}}}}}\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell uses the replacement on levels 2, 3, and 4.  As explained below \
the replacements start at the deepest level (level 4 in this case) and works \
up to the higher levels.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Replace[demo, {x_, y__} \[RuleDelayed] {x, a, y}, {2, 4}]\)], "Input"],

Cell[BoxData[
    \({0, {1, {2, a, {3, a, {4, a, {5, {6, {7, 7}}}}}}}}\)], "Output"]
}, Open  ]],

Cell["\<\
When the third argument of Replace is  -6  the replacement start with \
expressions with a depth of 6 and works up to level 1.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Replace[demo, {x_, y__} \[RuleDelayed] {x, a, y}, \(-6\)]\)], "Input"],

Cell[BoxData[
    \({0, {1, a, {2, a, {3, a, {4, {5, {6, {7, 7}}}}}}}}\)], "Output"]
}, Open  ]],

Cell["\<\
When the third argument of Replace is {-7,4} the replacement start at level 4 \
and work up to expressions with a depth of 7.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Replace[
      demo, {x_, y__} \[RuleDelayed] {x, a, y}, {\(-7\), 4}]\)], "Input"],

Cell[BoxData[
    \({0, {1, {2, a, {3, a, {4, a, {5, {6, {7, 7}}}}}}}}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "We can give Replace a list of replacement rules as in the next cell.  We \
could use (lhs\[RuleDelayed]rhs) instead of (lhs\[Rule]rhs) and the \
difference between the two is discussed in the section on ",
  ButtonBox["Rule instead of RuleDelayed",
    ButtonData:>"Rule;RuleDelayed",
    ButtonStyle->"Hyperlink"],
  ". "
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Replace[
      w + x + y + z, {x \[Rule] 2  x, 
        y \[Rule] 3  y}, {0, \[Infinity]}]\)], "Input"],

Cell[BoxData[
    \(w + 2\ x + 3\ y + z\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Once Replace changes a part of an expression no further replacements are \
made on that portion of the expression or any of it's subparts.  For example \
the rule in the next cell is only used once on each logrithm.  Normally \
ReplaceRepeated would be used to fully expand the logrithms, but you could \
use FixedPoint and Replace to fully expand these logrithms (I won't do that \
here).\n\n",
  "I don't provide further examples, but any combination of pattern matching \
constructs can be used on the left side of rules given to Replace.  Nuances \
of ",
  ButtonBox["pattern matching",
    ButtonData:>"Pattern-Matching",
    ButtonStyle->"Hyperlink"],
  " are discussed in another section."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Replace[Log[d\ p\ q\ r] Log[a\ b\ c\ d], \ 
      Log[a_\ \ b_] \[RuleDelayed] 
        Log[a] + Log[b], {0, \[Infinity]}]\)], "Input"],

Cell[BoxData[
    \(\((Log[a] + Log[b\ c\ d])\)\ \((Log[d] + Log[p\ q\ r])\)\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell["The order of matching patterns and making replacements", "Subsection"],

Cell["\<\
I learned from Allan Hayes that Replace attempts replacements starting at the \
deepest level allowed by the level specification and works its way up to \
higher levels. Allan also explained that Replace doesn't evaluate the \
expression between replacements. Replace doesn't have a holding attribute, so \
it's arguments evaluate before doing replacements. The demonstration and \
explanation below is based on an example Allan Hayes once provided.\
\>", "Text"],

Cell[BoxData[{
    \(\(Clear["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(\(rls = {a1 + b2 \[Rule] baab, b1 + b2 \[Rule] b12, 
          a1 \[Rule] b1};\)\), "\[IndentingNewLine]", 
    \(\(a2 = b2;\)\), "\[IndentingNewLine]", 
    \(\(h[b1 + b2] = bb;\)\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Replace[h[a1 + a2], rls, {1, 2}]\)], "Input"],

Cell[BoxData[
    \(h[b12]\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "The important parts of evaluation above are as follows:\nThe first \
argument of Replace evaluates as  h[a1+a2]\[LongRightArrow]h[a1+b2]  since \
(a2=b2).\nNext Replace starts replacements at the deepest level, so the first \
replacement used on  h[a1+b2] is (a1\[Rule]b1) resulting in  h[b1+b2].  No \
evaluation is conducted until Replacements are finished.  Moving up a level \
the replacement (b1+b2\[LongRightArrow]b12) is used and resuts in  h[b12] \
which is the final expression.  Notice we had h[b1+b2] after the first \
replacement, but the definition for h[b1+b2] wasn't used.  Once replacements \
started nothing evaluated until all replacements were finished.\n\n",
  ButtonBox["ReplaceAll and ReplaceRepeated",
    ButtonData:>"ReplaceAll;ReplaceRepeated",
    ButtonStyle->"Hyperlink"],
  " make replacements starting at the top level and work down, but Replace is \
different since it starts replacements at the deeper levels and works it's \
way up.\n\nThe next input shows how you can easily see the order that Replace \
tries replacements on different parts of an expression."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Replace[
      h[f1[a1], \(f2[e]\)[a2]], \((a_ /; Print[a] \[RuleDelayed] 
          0)\), {0, \[Infinity]}]\)], "Input"],

Cell[BoxData[
    \(a1\)], "Print"],

Cell[BoxData[
    \(f1[a1]\)], "Print"],

Cell[BoxData[
    \(b2\)], "Print"],

Cell[BoxData[
    \(\(f2[e]\)[b2]\)], "Print"],

Cell[BoxData[
    \(h[f1[a1], \(f2[e]\)[b2]]\)], "Print"],

Cell[BoxData[
    \(h[f1[a1], \(f2[e]\)[b2]]\)], "Output"]
}, Open  ]],

Cell["\<\
Replace makes replacements starting at the deepest level, so in the next cell \
Log[x] is changed to Log[a x].\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(\(\ \)\(Replace[\@x + 2  x\^3 - Log[x]\/y, {x \[Rule] a\ x, 
        Log[x] \[Rule] Log[x + 1]}, {0, \[Infinity]}]\)\)\)], "Input"],

Cell[BoxData[
    \(2\ a\^3\ x\^3 + \@\(a\ x\) - Log[a\ x]\/y\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Since ",
  ButtonBox["ReplaceAll",
    ButtonData:>"ReplaceAll;ReplaceRepeated",
    ButtonStyle->"Hyperlink"],
  " starts making replacements at the highest level, Log[x] in the next cell \
is changed to Log[x+1]."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(\(\ \)\(\@x + 2  x\^3 - Log[x]\/y /. {x \[Rule] a\ x, 
        Log[x] \[Rule] Log[x + 1]}\)\)\)], "Input"],

Cell[BoxData[
    \(2\ a\^3\ x\^3 + \@\(a\ x\) - Log[1 + x]\/y\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Heads Option", "Subsection"],

Cell["\<\
Replace has a 'Heads' option which controls whether it consideres making \
replacements on the heads of expressions.  The default setting is (Heads\
\[Rule]False).  The next cell shows the order that different parts of the \
expression are considered for replacement when replacing heads is allowed.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Replace[
      h[f1[a1], \(f2[e]\)[a2]], \((a_ /; Print[a] \[RuleDelayed] 
          0)\), {0, \[Infinity]}, Heads \[Rule] True]\)], "Input"],

Cell[BoxData[
    \(h\)], "Print"],

Cell[BoxData[
    \(f1\)], "Print"],

Cell[BoxData[
    \(a1\)], "Print"],

Cell[BoxData[
    \(f1[a1]\)], "Print"],

Cell[BoxData[
    \(f2\)], "Print"],

Cell[BoxData[
    \(e\)], "Print"],

Cell[BoxData[
    \(f2[e]\)], "Print"],

Cell[BoxData[
    \(b2\)], "Print"],

Cell[BoxData[
    \(\(f2[e]\)[b2]\)], "Print"],

Cell[BoxData[
    \(h[f1[a1], \(f2[e]\)[b2]]\)], "Print"],

Cell[BoxData[
    \(h[f1[a1], \(f2[e]\)[b2]]\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["ReplaceAll, ReplaceRepeated", "Section"],

Cell["The next cell demonstrates the basic use of ReplaceAll.", "Text",
  CellTags->"ReplaceAll;ReplaceRepeated"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[x, y];\)\), "\[IndentingNewLine]", 
    \(\(expr = y + Sin[x];\)\), "\[IndentingNewLine]", 
    \(expr /. y \[Rule] 4\)}], "Input"],

Cell[BoxData[
    \(4 + Sin[x]\)], "Output"]
}, Open  ]],

Cell["\<\
Evaluation of the previous cell doesn't change the value of (y) or (expr).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \({y, expr}\)], "Input"],

Cell[BoxData[
    \({y, y + Sin[x]}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "If we provide a list of rules or delayed rules on the right side of \
ReplaceAll several replacements are made.  The difference between \
(lhs\[Rule]rhs) and (lhs\[RuleDelayed]rhs) is covered in the section on ",
  ButtonBox["Rule instead of RuleDelayed",
    ButtonData:>"Rule;RuleDelayed",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(expr /. {x \[Rule] \[Pi]\/4, y \[Rule] 5}\)], "Input"],

Cell[BoxData[
    \(5 + 1\/\@2\)], "Output"]
}, Open  ]],

Cell["\<\
ReplaceAll considers a list of rules starting from the left.  In the next \
cell the rule (y\[Rule]5) is used and the symbol (y) is no longer in the \
expression.  As a result the rules (y\[Rule]3) and (y\[Rule]4) are not \
used.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(expr /. {y \[Rule] 5, y \[Rule] 3, y \[Rule] 4}\)], "Input"],

Cell[BoxData[
    \(5 + Sin[x]\)], "Output"]
}, Open  ]],

Cell["\<\
If we provide a list of lists of replacement rules on the right side of \
ReplaceAll we get a list of results from making several sets of replacements.\
\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(expr /. {{x \[Rule] 1, y \[Rule] 2}, {x \[Rule] 5, 
          y \[Rule] 6}, {x \[Rule] 12, y \[Rule] 13}}\)], "Input"],

Cell[BoxData[
    \({2 + Sin[1], 6 + Sin[5], 13 + Sin[12]}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Any combination of pattern matching constructs can be used on the left \
side of rules.  The next cell gives a non-trivial example.  Nuances of ",
  ButtonBox["pattern matching",
    ButtonData:>"Pattern-Matching",
    ButtonStyle->"Hyperlink"],
  " are discussed in another section."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(\(\ \)\(\@x + 4\ z\^2 + z\^3 - Log[x]\/y\^2 /. 
      c_. *s_Symbol^n_Integer \[RuleDelayed] c*n*s^\((n - 1)\)\)\)\)], "Input"],

Cell[BoxData[
    \(\@x + 8\ z + 3\ z\^2 + \(2\ Log[x]\)\/y\^3\)], "Output"]
}, Open  ]],

Cell["\<\
Once ReplaceAll changes a part of an expression no further replacements are \
made on that portion of the expression or any of it's subparts.  For example \
the rule in the next cell is used once on each logrithm.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Log[d\ p\ q\ r] Log[a\ b\ c\ d] /. 
      Log[x_\ \ y_] \[RuleDelayed] Log[x] + Log[y]\)], "Input"],

Cell[BoxData[
    \(\((Log[a] + Log[b\ c\ d])\)\ \((Log[d] + Log[p\ q\ r])\)\)], "Output"]
}, Open  ]],

Cell["\<\
ReplaceRepeated works just like ReplaceAll except it continues trying the \
rules until the result no longer changes.  In the next cell ReplaceRepeated \
fully expands each logrithm.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Log[d\ p\ q\ r] Log[a\ b\ c\ d] //. 
      Log[x_\ y_] \[RuleDelayed] Log[x] + Log[y]\)], "Input"],

Cell[BoxData[
    \(\((Log[a] + Log[b] + Log[c] + Log[d])\)\ \((Log[d] + Log[p] + Log[q] + 
          Log[r])\)\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell["The order of matching patterns and making replacements", "Subsection"],

Cell["\<\
If we put a Print statment at the right place we can see the order that the \
pattern matcher considers different parts of an expression for replacement.  \
Notice the Print statement never returns True, so nothing can match the \
pattern, but each pattern considered is printed.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(h[f1[a1], \(f2[e]\)[a2]] /. \((a_ /; Print[a] \[RuleDelayed] 
          0)\)\)}], "Input"],

Cell[BoxData[
    \(h[f1[a1], \(f2[e]\)[a2]]\)], "Print"],

Cell[BoxData[
    \(h\)], "Print"],

Cell[BoxData[
    \(f1[a1]\)], "Print"],

Cell[BoxData[
    \(f1\)], "Print"],

Cell[BoxData[
    \(a1\)], "Print"],

Cell[BoxData[
    \(\(f2[e]\)[a2]\)], "Print"],

Cell[BoxData[
    \(f2[e]\)], "Print"],

Cell[BoxData[
    \(f2\)], "Print"],

Cell[BoxData[
    \(e\)], "Print"],

Cell[BoxData[
    \(a2\)], "Print"],

Cell[BoxData[
    \(h[f1[a1], \(f2[e]\)[a2]]\)], "Output"]
}, Open  ]],

Cell["\<\
Since ReplaceAll starts making replacements at the highest level, Log[x] in \
the next cell is changed to Log[x+1].\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(\(\ \)\(\@x + 2  x\^3 - Log[x]\/y /. {x \[Rule] a\ x, 
        Log[x] \[Rule] Log[x + 1]}\)\)\)], "Input"],

Cell[BoxData[
    \(2\ a\^3\ x\^3 + \@\(a\ x\) - Log[1 + x]\/y\)], "Output"]
}, Open  ]],

Cell[TextData[{
  ButtonBox["Replace",
    ButtonData:>"Replace",
    ButtonStyle->"Hyperlink"],
  " makes replacements starting at the deepest level, so in the next cell \
Log[x] is changed to Log[a x]."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(\(\ \)\(Replace[\@x + 2  x\^3 - Log[x]\/y, {x \[Rule] a\ x, 
        Log[x] \[Rule] Log[x + 1]}, {0, \[Infinity]}]\)\)\)], "Input"],

Cell[BoxData[
    \(2\ a\^3\ x\^3 + \@\(a\ x\) - Log[a\ x]\/y\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "In the next cell we can see (expr/.rules) evaluates (expr), then it \
evaluates (rules), it makes the replacements without evaluating the new \
results.  A new expression is returned ",
  Cell[BoxData[
      \(TraditionalForm\`\((2\^2 + 7)\)\)]],
  " in this case, and this new expression is allowed to evaluate to 11."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(expr = x + y; \ 
    rules = {x \[RuleDelayed] 2\^2, 
        y \[RuleDelayed] 7};\), "\[IndentingNewLine]", 
    \(Trace[expr /. rules]\)}], "Input"],

Cell[BoxData[
    RowBox[{"{", 
      RowBox[{
        RowBox[{"{", 
          RowBox[{
            TagBox["expr",
              HoldForm], ",", 
            TagBox[\(x + y\),
              HoldForm]}], "}"}], ",", 
        RowBox[{"{", 
          RowBox[{
            TagBox["rules",
              HoldForm], ",", 
            TagBox[\({x \[RuleDelayed] 2\^2, y \[RuleDelayed] 7}\),
              HoldForm]}], "}"}], ",", 
        TagBox[\(x + y /. \[InvisibleSpace]{x \[RuleDelayed] 2\^2, 
              y \[RuleDelayed] 7}\),
          HoldForm], ",", 
        TagBox[\(2\^2 + 7\),
          HoldForm], ",", 
        RowBox[{"{", 
          RowBox[{
            TagBox[\(2\^2\),
              HoldForm], ",", 
            TagBox["4",
              HoldForm]}], "}"}], ",", 
        TagBox[\(4 + 7\),
          HoldForm], ",", 
        TagBox["11",
          HoldForm]}], "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
  "In the next cell we can see (expr//.rules) evaluates (expr), then it \
evaluates (rules).  The first replacement made is  ",
  Cell[BoxData[
      \(TraditionalForm\`Log[\[ExponentialE]\^5\ a\ b]\ \
\[LongRightArrow]\((Log[\[ExponentialE]\^5] + Log[a\ b]\ )\)\)]],
  "  and ",
  Cell[BoxData[
      \(TraditionalForm\`Log[\[ExponentialE]\^5]\)]],
  " evaluates to 5.  Then the replacement rule is used again to change Log[a \
b] to  (Log[a]+Log[b] )."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(expr = Log[\(\[ExponentialE]\^5\) a\ b] Log[c\ d]; 
    rules = {Log[x_\ \ y_] \[RuleDelayed] 
          Log[x] + Log[y]};\), "\[IndentingNewLine]", 
    \(Trace[expr //. rules]\)}], "Input"],

Cell[BoxData[
    RowBox[{"{", 
      RowBox[{
        RowBox[{"{", 
          RowBox[{
            TagBox["expr",
              HoldForm], ",", 
            TagBox[\(Log[c\ d]\ Log[a\ b\ \[ExponentialE]\^5]\),
              HoldForm]}], "}"}], ",", 
        RowBox[{"{", 
          RowBox[{
            TagBox["rules",
              HoldForm], ",", 
            TagBox[\({Log[x_\ y_] \[RuleDelayed] Log[x] + Log[y]}\),
              HoldForm]}], "}"}], ",", 
        TagBox[\(Log[c\ d]\ Log[
                a\ b\ \[ExponentialE]\^5] //. \[InvisibleSpace]{Log[
                  x_\ y_] \[RuleDelayed] Log[x] + Log[y]}\),
          HoldForm], ",", 
        RowBox[{"{", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"{", 
                      RowBox[{
                        TagBox[\(Log[\[ExponentialE]\^5]\),
                          HoldForm], ",", 
                        TagBox["5",
                          HoldForm]}], "}"}], ",", 
                    TagBox[\(Log[b] + 5\),
                      HoldForm], ",", 
                    TagBox[\(5 + Log[b]\),
                      HoldForm]}], "}"}], ",", 
                TagBox[\(Log[a] + \((5 + Log[b])\)\),
                  HoldForm], ",", 
                TagBox[\(Log[a] + 5 + Log[b]\),
                  HoldForm], ",", 
                TagBox[\(5 + Log[a] + Log[b]\),
                  HoldForm]}], "}"}], ",", 
            TagBox[\(\((Log[c] + Log[d])\)\ \((5 + Log[a] + Log[b])\)\),
              HoldForm], ",", 
            TagBox[\(\((5 + Log[a] + Log[b])\)\ \((Log[c] + Log[d])\)\),
              HoldForm]}], "}"}], ",", 
        TagBox[\(\((5 + Log[a] + Log[b])\)\ \((Log[c] + Log[d])\)\),
          HoldForm]}], "}"}]], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["ReplacePart", "Section"],

Cell[TextData[{
  "The ",
  ButtonBox["ReplacePart",
    ButtonStyle->"RefGuideLink"],
  " function is well documented.  Below I give useful function that uses \
ReplacePart."
}], "Text"],

Cell[BoxData[
    \(SwapParts[expr_, pos1_, 
        pos2_] := \[IndentingNewLine]\(ReplacePart[#, #, {pos1, pos2}, {pos2, 
              pos1}] &\)[expr]\)], "Input"],

Cell["\<\
In the next cell I make a matrix and I swap the parts at positions {1,2} and \
{3,2}.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(\(mtrx = {{11, 12, 13, 14}, {21, 22, 23, 24}, {31, 32, 33, 34}, {41, 
            42, 43, 44}};\)\(\n\)
    \)\ \), "\[IndentingNewLine]", 
    \(SwapParts[mtrx, {1, 2}, {3, 2}]\)}], "Input"],

Cell[BoxData[
    \({{11, 32, 13, 14}, {21, 22, 23, 24}, {31, 12, 33, 34}, {41, 42, 43, 
        44}}\)], "Output"]
}, Open  ]],

Cell["In the next cell I swap the first row with the third row.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(SwapParts[mtrx, {1}, {3}]\)], "Input"],

Cell[BoxData[
    \({{31, 32, 33, 34}, {21, 22, 23, 24}, {11, 12, 13, 14}, {41, 42, 43, 
        44}}\)], "Output"]
}, Open  ]],

Cell["\<\
Next I demonstrate that SwapParts can work with arbitrary expressions as well \
as matrices.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[x, y, z];\)\), "\[IndentingNewLine]", 
    \(demo = \((2  x - Sqrt[3 + y^2])\)/\((\(-4\) + z^2)\)\)}], "Input"],

Cell[BoxData[
    \(\(2\ x - \@\(3 + y\^2\)\)\/\(z\^2 - 4\)\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(SwapParts[demo, {1, 2}, {2, 1, 2}]\)], "Input"],

Cell[BoxData[
    \(\(2\ x + z\^2\)\/\(\(-\@\(3 + y\^2\)\) - 4\)\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["RotateRight, RotateLeft", "Section"],

Cell["\<\
RotateRight and RotateLeft can be used on an expression that doesn't have the \
head List.  In the two cells below the arguments of an expression are rotated \
two places to the right and two places to the left.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll["\<Global`*\>"];\)\), "\n", 
    \(RotateRight[foo[a, b, c, d, e, f, g, h], 2]\)}], "Input"],

Cell[BoxData[
    \(foo[g, h, a, b, c, d, e, f]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(RotateRight[foo[a, b, c, d, e, f, g, h], \(-2\)]\)], "Input"],

Cell[BoxData[
    \(foo[c, d, e, f, g, h, a, b]\)], "Output"]
}, Open  ]],

Cell["\<\
Normally RotateRight and RotateLeft are used on a simple list and the second \
argument (if present) is normally an integer.  However, the second argument \
can be a list of integers.  First consider the tensor (m2) below.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(m2 = {\[IndentingNewLine]{{a1, a2, a3}, {b1, b2, b3}, {c1, c2, 
              c3}}, \[IndentingNewLine]{{d1, d2, d3}, {e1, e2, e3}, {f1, f2, 
              f3}}, \[IndentingNewLine]{{g1, g2, g3}, {h1, h2, h3}, {i1, i2, 
              i3}}\[IndentingNewLine]};\)\), "\n", 
    \(MatrixForm[m2]\)}], "Input"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"a1"},
                    {"a2"},
                    {"a3"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"b1"},
                    {"b2"},
                    {"b3"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"c1"},
                    {"c2"},
                    {"c3"}
                    }], "\[NoBreak]", ")"}]},
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"d1"},
                    {"d2"},
                    {"d3"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"e1"},
                    {"e2"},
                    {"e3"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"f1"},
                    {"f2"},
                    {"f3"}
                    }], "\[NoBreak]", ")"}]},
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"g1"},
                    {"g2"},
                    {"g3"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"h1"},
                    {"h2"},
                    {"h3"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"i1"},
                    {"i2"},
                    {"i3"}
                    }], "\[NoBreak]", ")"}]}
            }], "\[NoBreak]", ")"}],
      MatrixForm[ {{{a1, a2, a3}, {b1, b2, b3}, {c1, c2, c3}}, {{d1, d2, 
        d3}, {e1, e2, e3}, {f1, f2, f3}}, {{g1, g2, g3}, {h1, h2, h3}, {i1, 
        i2, i3}}}]]], "Output"]
}, Open  ]],

Cell["\<\
First the default case for RotateRight is demonstrated on the above tensor.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(\(RotateRight[m2]\)\(//\)\(MatrixForm\)\(\ \)\)\)], "Input"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"g1"},
                    {"g2"},
                    {"g3"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"h1"},
                    {"h2"},
                    {"h3"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"i1"},
                    {"i2"},
                    {"i3"}
                    }], "\[NoBreak]", ")"}]},
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"a1"},
                    {"a2"},
                    {"a3"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"b1"},
                    {"b2"},
                    {"b3"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"c1"},
                    {"c2"},
                    {"c3"}
                    }], "\[NoBreak]", ")"}]},
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"d1"},
                    {"d2"},
                    {"d3"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"e1"},
                    {"e2"},
                    {"e3"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"f1"},
                    {"f2"},
                    {"f3"}
                    }], "\[NoBreak]", ")"}]}
            }], "\[NoBreak]", ")"}],
      MatrixForm[ {{{g1, g2, g3}, {h1, h2, h3}, {i1, i2, i3}}, {{a1, a2, 
        a3}, {b1, b2, b3}, {c1, c2, c3}}, {{d1, d2, d3}, {e1, e2, e3}, {f1, 
        f2, f3}}}]]], "Output"]
}, Open  ]],

Cell["\<\
In the cell below we see the default case is equivalent to a few values for \
the second argument.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(RotateRight[m2] === RotateRight[m2, {1}] === 
      RotateRight[m2, {1, 0}] === \n\tRotateRight[m2, {1, 0, 0}]\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell["\<\
When the second argument is {0,1} or {0,1,0} the second level is rotated one \
place.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(RotateRight[m2, {0, 1}] // MatrixForm\)], "Input"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"c1"},
                    {"c2"},
                    {"c3"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"a1"},
                    {"a2"},
                    {"a3"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"b1"},
                    {"b2"},
                    {"b3"}
                    }], "\[NoBreak]", ")"}]},
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"f1"},
                    {"f2"},
                    {"f3"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"d1"},
                    {"d2"},
                    {"d3"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"e1"},
                    {"e2"},
                    {"e3"}
                    }], "\[NoBreak]", ")"}]},
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"i1"},
                    {"i2"},
                    {"i3"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"g1"},
                    {"g2"},
                    {"g3"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"h1"},
                    {"h2"},
                    {"h3"}
                    }], "\[NoBreak]", ")"}]}
            }], "\[NoBreak]", ")"}],
      MatrixForm[ {{{c1, c2, c3}, {a1, a2, a3}, {b1, b2, b3}}, {{f1, f2, 
        f3}, {d1, d2, d3}, {e1, e2, e3}}, {{i1, i2, i3}, {g1, g2, g3}, {h1, 
        h2, h3}}}]]], "Output"]
}, Open  ]],

Cell["\<\
When the second argument is {0,0,1} the third level is rotated one place.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(RotateRight[m2, {0, 0, 1}] // MatrixForm\)], "Input"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"a3"},
                    {"a1"},
                    {"a2"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"b3"},
                    {"b1"},
                    {"b2"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"c3"},
                    {"c1"},
                    {"c2"}
                    }], "\[NoBreak]", ")"}]},
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"d3"},
                    {"d1"},
                    {"d2"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"e3"},
                    {"e1"},
                    {"e2"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"f3"},
                    {"f1"},
                    {"f2"}
                    }], "\[NoBreak]", ")"}]},
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"g3"},
                    {"g1"},
                    {"g2"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"h3"},
                    {"h1"},
                    {"h2"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"i3"},
                    {"i1"},
                    {"i2"}
                    }], "\[NoBreak]", ")"}]}
            }], "\[NoBreak]", ")"}],
      MatrixForm[ {{{a3, a1, a2}, {b3, b1, b2}, {c3, c1, c2}}, {{d3, d1, 
        d2}, {e3, e1, e2}, {f3, f1, f2}}, {{g3, g1, g2}, {h3, h1, h2}, {i3, 
        i1, i2}}}]]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Rule (\[Rule])  versus  RuleDelayed (\[RuleDelayed])\
\>", "Section"],

Cell["\<\
A good application of RuleDelayed (\[RuleDelayed]) is in the following line. \
Here RuleDelayed (\[RuleDelayed]) must be used instead of Rule (\[Rule]) \
since Factor must not evaluate until it is given the argument of Log.\
\>", "Text",
  CellTags->"Rule;RuleDelayed"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(\((1 + 2\ x + x\^2)\) Log[24 + 26  x + 9  x\^2 + x\^3] /. 
      Log[a_] :> Log[Factor[a]]\)}], "Input"],

Cell[BoxData[
    \(\((1 + 2\ x + 
          x\^2)\)\ Log[\((2 + x)\)\ \((3 + x)\)\ \((4 + x)\)]\)], "Output"]
}, Open  ]],

Cell["\<\
The function below will modify any expression so all approximate numbers that \
are equal to an integer are converted to the equivalent integer.  In this \
case RuleDelayed (\[RuleDelayed]) must be used instead of Rule (\[Rule]) \
since the rule must not evaluate until it has an actual value to operate \
on.\
\>", "Text"],

Cell[BoxData[
    \(RealToInteger[expr_] := 
      expr /. \n\t\tx_Real :> If[Round[x] == x, Round[x], x]\)], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(\(\ \)\(E\^\(5.0\ x\) + 1.34\/\(4.0 + x\) // 
      RealToInteger\)\)\)], "Input"],

Cell[BoxData[
    \(\[ExponentialE]\^\(5\ x\) + 1.34`\/\(4 + x\)\)], "Output"]
}, Open  ]],

Cell["\<\
Another for using (lhs\[RuleDelayed]rhs) instead of (lhs\[Rule]rhs) is when \
(lhs) includes named patterns. Named patterns can include (x_), (x__), \
(opts___), (m_:4) (j_Integer), (t_?Positive), (n_.) and many other forms. To \
demonstrate how use of (lhs\[Rule]rhs) can cause problems consider the input \
in the next cell.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(x = 34;\)\), "\[IndentingNewLine]", 
    \(Log[\((a1 + a2)\) \((b1 + b2\ )\) \((c1 + c2)\)] /. 
      Log[x_\ \ \ y_] -> Log[x] + Log[y]\)}], "Input"],

Cell[BoxData[
    \(Log[34] + Log[\((b1 + b2)\)\ \((c1 + c2)\)]\)], "Output"]
}, Open  ]],

Cell["\<\
In the cell above the global value of (x) was used where we wanted (a1+a2) to \
go.  Most often the problem is much more subtle than in the example above. \
Typically the variable used to name the pattern had a value assigned long \
before you use it in (lhs\[Rule]rhs). One method sure to avoid this problem \
is to clear the values from any variables used to name patterns as in the \
next cell. This of course requires that you don't have values assigned to (x) \
or (y) that you care about.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[x];\)\), "\[IndentingNewLine]", 
    \(Log[\((a1 + a2)\) \((b1 + b2\ )\) \((c1 + c2)\)] /. 
      Log[x_\ \ \ y_] -> Log[x] + Log[y]\)}], "Input"],

Cell[BoxData[
    \(Log[a1 + b2] + Log[\((b1 + b2)\)\ \((c1 + c2)\)]\)], "Output"]
}, Open  ]],

Cell["\<\
Another, often more desirable, method of avoiding the error above is to use \
(lhs\[RuleDelayed]rhs) instead of (lhs\[Rule]rhs).  This is done in the next \
cell, and the value assigned to (x) doesn't prevent us from getting the right \
result.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(x = 34;\)\), "\[IndentingNewLine]", 
    \(Log[\((a1 + a2)\) \((b1 + b2\ )\) \((c1 + c2)\)] /. 
      Log[x_\ \ \ y_] \[RuleDelayed] Log[x] + Log[y]\)}], "Input"],

Cell[BoxData[
    \(Log[a1 + b2] + Log[\((b1 + b2)\)\ \((c1 + c2)\)]\)], "Output"]
}, Open  ]],

Cell["\<\
The only time when using (lhs\[RuleDelayed]rhs) might not work very well is \
when you can save a lot of time by evaluating (rhs) only once.  An example of \
this is given in the next cell where a complicated integral must be evaluated \
each time (g2) is used. It's much more efficient to evaluate the integral \
only once.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(g2 = g[x_] \[RuleDelayed] Integrate[Log[\@x + 1], x]\)], "Input"],

Cell[BoxData[
    \(g[x_] \[RuleDelayed] \[Integral]Log[\@x + 
              1] \[DifferentialD]x\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "In that case you might want to use the next cell where any values assigned \
to (x) are cleared, and the integral is evaluated immediately using (lhs\
\[Rule]rhs). It's also possible to get the best of both worlds where (rhs) \
evaluates immediately as in the next cell, and gives the right result even if \
(x) has an assigned value!  To do that you need to use a package I make \
available at  ",
  ButtonBox["http://library.wolfram.com/database/MathSource/425",
    ButtonData:>{
      URL[ "http://library.wolfram.com/database/MathSource/425"], None},
    ButtonStyle->"Hyperlink"],
  "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[x];\)\), "\[IndentingNewLine]", 
    \(g2 = g[x_] \[Rule] Integrate[Log[\@x + 1], x]\)}], "Input"],

Cell[BoxData[
    \(g[x_] \[Rule] \@x - x\/2 - Log[1 + \@x] + x\ Log[1 + \@x]\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Scan", "Section"],

Cell["\<\
Suppose we have a list of expressions which in the example below is a simple \
list of integers.  Now suppose we need to define a function (f) for each \
element of this list. The best way to make the assignments is using Scan.  A \
first attempt at this is given in the next cell.\
\>", "Text",
  CellTags->"Scan"],

Cell[BoxData[{
    \(\(ClearAll["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(\(lst = {12, 24, 35, 46};\)\), "\n", 
    \(Scan[f[#] = Prime[10^7 + #] &, lst]\)}], "Input"],

Cell["\<\
Next we see that our attempt to make assingments for (f) didn't work, and the \
reason is that assignment (f[#]=Prime[10^7+#]&) evaluated before it was give \
integers.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(?? f\)], "Input"],

Cell["Global`f", "Print",
  CellTags->"Info3242474919-8383725"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {GridBox[{
                {\(f[#1] = Prime[10\^7 + #1] &\)}
                },
              GridBaseline->{Baseline, {1, 1}},
              ColumnWidths->0.999,
              ColumnAlignments->{Left}]}
          },
        GridBaseline->{Baseline, {1, 1}},
        ColumnAlignments->{Left}],
      Definition[ "f"],
      Editable->False]], "Print",
  CellTags->"Info3242474919-8383725"]
}, Open  ]],

Cell["\<\
The solution is to make the assignment a function with the HoldAll or \
HoldFirst attribute as I do in the next cell.\
\>", "Text"],

Cell[BoxData[{
    \(\(ClearAll[f];\)\), "\[IndentingNewLine]", 
    \(Scan[Function[n, f[n] = Prime[10^7 + n], {HoldAll}], lst]\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(?? f\)], "Input"],

Cell["Global`f", "Print",
  CellTags->"Info3242474919-9355181"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {GridBox[{
                {\(f[12] = 179424871\)},
                {" "},
                {\(f[24] = 179425019\)},
                {" "},
                {\(f[35] = 179425261\)},
                {" "},
                {\(f[46] = 179425517\)}
                },
              GridBaseline->{Baseline, {1, 1}},
              ColumnWidths->0.999,
              ColumnAlignments->{Left}]}
          },
        GridBaseline->{Baseline, {1, 1}},
        ColumnAlignments->{Left}],
      Definition[ "f"],
      Editable->False]], "Print",
  CellTags->"Info3242474919-9355181"]
}, Open  ]],

Cell["\<\
We could have made the above assingments using Map as I do in the next cell.  \
In this case Map makes a list of prime numbers that would be returned if it \
were not for the semi-colon at the end.  Using Scan for this task is more \
efficient than using Map because Scan never builds up an expression to \
return.\
\>", "Text"],

Cell[BoxData[{
    \(\(ClearAll[f];\)\), "\[IndentingNewLine]", 
    \(\(Map[Function[n, f[n] = Prime[10^7 + n], {HoldAll}], 
        lst];\)\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(?? f\)], "Input"],

Cell["Global`f", "Print",
  CellTags->"Info3242474920-7316245"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {GridBox[{
                {\(f[12] = 179424871\)},
                {" "},
                {\(f[24] = 179425019\)},
                {" "},
                {\(f[35] = 179425261\)},
                {" "},
                {\(f[46] = 179425517\)}
                },
              GridBaseline->{Baseline, {1, 1}},
              ColumnWidths->0.999,
              ColumnAlignments->{Left}]}
          },
        GridBaseline->{Baseline, {1, 1}},
        ColumnAlignments->{Left}],
      Definition[ "f"],
      Editable->False]], "Print",
  CellTags->"Info3242474920-7316245"]
}, Open  ]],

Cell["\<\
The next example makes assingments for  f[g1[5,3]],  f[g2[8,9]],  and  \
f[g3[12,13]].  \
\>", "Text"],

Cell[BoxData[{
    \(\(expr = h[g1[5, 3], g2[8, 9], g3[12, 13]];\)\), "\n", 
    \(\(ClearAll[f];\)\), "\n", 
    \(Scan[Function[a, f[a] = a\^4, {HoldAll}], expr]\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(?? f\)], "Input"],

Cell["Global`f", "Print",
  CellTags->"Info3242474920-3777955"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {GridBox[{
                {\(f[g1[5, 3]] = g1[5, 3]\^4\)},
                {" "},
                {\(f[g2[8, 9]] = g2[8, 9]\^4\)},
                {" "},
                {\(f[g3[12, 13]] = g3[12, 13]\^4\)}
                },
              GridBaseline->{Baseline, {1, 1}},
              ColumnWidths->0.999,
              ColumnAlignments->{Left}]}
          },
        GridBaseline->{Baseline, {1, 1}},
        ColumnAlignments->{Left}],
      Definition[ "f"],
      Editable->False]], "Print",
  CellTags->"Info3242474920-3777955"]
}, Open  ]],

Cell[TextData[{
  "However, what we got above might not be the desired result. What if you \
wanted to make assignments for f[5], f[3], f[8], etc. In that case we can get \
the desired result by giving Scan the level specification {2}.  Scan then \
makes assingments for all subexpressions of (expr) at level 2.  Scan can work \
with any of the ",
  ButtonBox["level specifications",
    ButtonData:>"Level Specification",
    ButtonStyle->"Hyperlink"],
  " that I exaplain earlier."
}], "Text"],

Cell[BoxData[{
    \(\(ClearAll[f];\)\), "\n", 
    \(Scan[Function[a, f[a] = a\^4, {HoldAll}], expr, {2}]\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(?? f\)], "Input"],

Cell["Global`f", "Print",
  CellTags->"Info3242474920-7649147"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {GridBox[{
                {\(f[3] = 81\)},
                {" "},
                {\(f[5] = 625\)},
                {" "},
                {\(f[8] = 4096\)},
                {" "},
                {\(f[9] = 6561\)},
                {" "},
                {\(f[12] = 20736\)},
                {" "},
                {\(f[13] = 28561\)}
                },
              GridBaseline->{Baseline, {1, 1}},
              ColumnWidths->0.999,
              ColumnAlignments->{Left}]}
          },
        GridBaseline->{Baseline, {1, 1}},
        ColumnAlignments->{Left}],
      Definition[ "f"],
      Editable->False]], "Print",
  CellTags->"Info3242474920-7649147"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Heads Option", "Subsection"],

Cell["\<\
Scan has a Heads option with the default setting (Heads\[Rule]True).  In the \
next example I have Scan work on level {2} of expr with the setting (Heads\
\[Rule]True).  Because of the (Heads\[Rule]True) setting assignments are made \
for f[g1], f[g2], f[g3] where g1, g2, g3 are heads of sub-expressions of \
(expr).\
\>", "Text"],

Cell[BoxData[{
    \(\(ClearAll[f];\)\), "\n", 
    \(Scan[Function[a, f[a] = "\<$\>" <> ToString[a], {HoldAll}], expr, {2}, 
      Heads \[Rule] True]\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(?? f\)], "Input"],

Cell["Global`f", "Print",
  CellTags->"Info3242474920-1486452"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {GridBox[{
                {\(f[3] = "$3"\)},
                {" "},
                {\(f[5] = "$5"\)},
                {" "},
                {\(f[8] = "$8"\)},
                {" "},
                {\(f[9] = "$9"\)},
                {" "},
                {\(f[12] = "$12"\)},
                {" "},
                {\(f[13] = "$13"\)},
                {" "},
                {\(f[g1] = "$g1"\)},
                {" "},
                {\(f[g2] = "$g2"\)},
                {" "},
                {\(f[g3] = "$g3"\)}
                },
              GridBaseline->{Baseline, {1, 1}},
              ColumnWidths->0.999,
              ColumnAlignments->{Left}]}
          },
        GridBaseline->{Baseline, {1, 1}},
        ColumnAlignments->{Left}],
      Definition[ "f"],
      Editable->False]], "Print",
  CellTags->"Info3242474920-1486452"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Sequence", "Section"],

Cell["\<\
The head Sequence is rarely seen in directly.  Consider the function (f) \
below, where the first two arguments are p1,and p2, and all the remaining \
arguments are part of p3.  All the remaining arguments go with p3 because the \
definition of (f) uses BlankSequence (___) for p3.  The only thing the \
function (f) does is return p3.  One might wonder what head is given to p3.  \
It turns out it is given the head Sequence. After (f) is defined, we use it \
to make the Sequence (seq).\
\>", "Text",
  CellTags->"Sequence"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[f, foo, h];\)\), "\[IndentingNewLine]", 
    \(\(f[p1_, p2_, p3__] := p3;\)\), "\[IndentingNewLine]", 
    \(seq = f[9, 10, 11, 12, 13, 14, 15]\)}], "Input"],

Cell[BoxData[
    \(Sequence[11, 12, 13, 14, 15]\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "If you have a number of sequences inside almost any head the sequences are \
automatically flattened, and the fact that the arguments are a sequence is \
not indicated (see the example in the next line).  The only functions that \
don't splice the sequences together are those with the Attribute ",
  ButtonBox["SequenceHold",
    ButtonData:>"SequenceHold",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \({Sequence[2, 3, 4, Sequence[7, 8]]}\)], "Input"],

Cell[BoxData[
    \({2, 3, 4, 7, 8}\)], "Output"]
}, Open  ]],

Cell["\<\
Most useful applications of Sequence are variations of the next cell where \
the head (h) is changed to Sequence and the effect is that h[7,11,13] is \
changed to (7,11,13).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(foo[2, 3, 5, h[7, 11, 13], 17] /. h \[Rule] Sequence\)], "Input"],

Cell[BoxData[
    \(foo[2, 3, 5, 7, 11, 13, 17]\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["SequenceHold", "Section"],

Cell["Question:  What does the Attribute SequenceHold do for you?", "Text",
  CellTags->"SequenceHold"],

Cell["\<\
Answer:  Rule (\[Rule]) has the SequenceHold Attribute.  As a result a rule \
such as the one in the next line can be used.  If Rule didn't have the \
SequenceHold Attribute  Rule[y,Sequence[y1,y2,y3]]
would evaluate to  Rule[y, y1, y2, y3]  which is an invalid expression.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \({x, y, z} /. y -> Sequence[y1, \ y2, \ y3]\)}], "Input"],

Cell[BoxData[
    \({x, y1, y2, y3, z}\)], "Output"]
}, Open  ]],

Cell["\<\
Nine built in commands have the SequenceHold Attribute.  They are:
Rule (\[Rule]), RuleDelayed (\[RuleDelayed]), Set (=), SetDelayed (:=), \
TagSet, TagSetDelayed, Timing, UpSet (:=), UpSetDelayed (^:=)\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Series", "Section"],

Cell[TextData[{
  "The typical method of finding a series expansion is to enter the complete \
expression as in  ",
  StyleBox["Series[(x+2)Sin[x],{x,0,5}]", "Input"],
  ". or  ",
  Cell[BoxData[
      \(TraditionalForm\`Series[Log[x\^2 + x], {x, 1, 3}]\)]],
  ".  A seldom documented trick is to get the same series expansions using \
the cells below."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[x];\)\), "\[IndentingNewLine]", 
    \(\((x + 2)\)\ Sin[\ x] + O[x]\^5\)}], "Input"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{\(2\ x\), "+", \(x\^2\), "-", \(x\^3\/3\), "-", \(x\^4\/6\), 
        "+", 
        InterpretationBox[\(O[x]\^5\),
          SeriesData[ x, 0, {}, 1, 5, 1]]}],
      SeriesData[ x, 0, {2, 1, 
        Rational[ -1, 3], 
        Rational[ -1, 6]}, 1, 5, 1]]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Log[x\^2 + x] + O[x, 1]\^4\)], "Input"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{\(Log[2]\), "+", \(\(3\ \((x - 1)\)\)\/2\), 
        "-", \(5\/8\ \((x - 1)\)\^2\), "+", \(3\/8\ \((x - 1)\)\^3\), "+", 
        InterpretationBox[\(O[x - 1]\^4\),
          SeriesData[ x, 1, {}, 0, 4, 1]]}],
      SeriesData[ x, 1, {
        Log[ 2], 
        Rational[ 3, 2], 
        Rational[ -5, 8], 
        Rational[ 3, 8]}, 0, 4, 1]]], "Output"]
}, Open  ]],

Cell["\<\
You can often use Series to find an asymptotic expansion provided one exists \
for the function in question.  An asymptotic expansion is one where the error \
gets smaller as the argument approaches infinity.  Series will try to find an \
asthmatic expansion if you ask for a series about infinity.  The next cell \
gives an asthmatic expansion of Erfc[x].\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Series[Erfc[x], {x, \[Infinity], 6}]\)], "Input"],

Cell[BoxData[
    RowBox[{\(\[ExponentialE]\^\(-x\^2\)\), " ", 
      RowBox[{"(", 
        InterpretationBox[
          
          RowBox[{\(1\/\(\@\[Pi]\ x\)\), 
            "-", \(\((1\/x)\)\^3\/\(2\ \@\[Pi]\)\), 
            "+", \(\(3\ \((1\/x)\)\^5\)\/\(4\ \@\[Pi]\)\), "+", 
            InterpretationBox[\(O[1\/x]\^7\),
              SeriesData[ x, 
                DirectedInfinity[ 1], {}, 1, 7, 1]]}],
          SeriesData[ x, 
            DirectedInfinity[ 1], {
            Power[ Pi, 
              Rational[ -1, 2]], 0, 
            Times[ 
              Rational[ -1, 2], 
              Power[ Pi, 
                Rational[ -1, 2]]], 0, 
            Times[ 
              Rational[ 3, 4], 
              Power[ Pi, 
                Rational[ -1, 2]]]}, 1, 7, 1]], ")"}]}]], "Output"]
}, Open  ]],

Cell["The next cell gives an asthmatic expansion of ArcTan[x]. ", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Series[ArcTan[x], {x, \[Infinity], 6}]\)], "Input"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{\(\[Pi]\/2\), "-", \(1\/x\), "+", \(1\/3\ \((1\/x)\)\^3\), 
        "-", \(1\/5\ \((1\/x)\)\^5\), "+", 
        InterpretationBox[\(O[1\/x]\^7\),
          SeriesData[ x, 
            DirectedInfinity[ 1], {}, 0, 7, 1]]}],
      SeriesData[ x, 
        DirectedInfinity[ 1], {
        Times[ 
          Rational[ 1, 2], Pi], -1, 0, 
        Rational[ 1, 3], 0, 
        Rational[ -1, 5]}, 0, 7, 1]]], "Output"]
}, Open  ]],

Cell["\<\
It turns out you must first use TrigToExp  to get an asymptotic expansion of \
ArcSinnh[x].\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Series[TrigToExp[ArcSinh[x]], {x, \[Infinity], 6}]\)], "Input"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{\((Log[2] - Log[1\/x])\), "+", \(1\/4\ \((1\/x)\)\^2\), 
        "-", \(3\/32\ \((1\/x)\)\^4\), "+", \(5\/96\ \((1\/x)\)\^6\), "+", 
        InterpretationBox[\(O[1\/x]\^7\),
          SeriesData[ x, 
            DirectedInfinity[ 1], {}, 0, 7, 1]]}],
      SeriesData[ x, 
        DirectedInfinity[ 1], {
        Plus[ 
          Log[ 2], 
          Times[ -1, 
            Log[ 
              Power[ x, -1]]]], 0, 
        Rational[ 1, 4], 0, 
        Rational[ -3, 32], 0, 
        Rational[ 5, 96]}, 0, 7, 1]]], "Output"]
}, Open  ]],

Cell[TextData[{
  "You may need to make a power series in two or three variables and truncate \
it such that the sum of all exponents in each term is less than or equal to a \
certain integer.  If that is the case download a package I have posted at  ",
  ButtonBox["http://library.wolfram.com/infocenter/MathSource/4950/",
    ButtonData:>{
      URL[ "http://library.wolfram.com/infocenter/MathSource/4950/"], None},
    ButtonStyle->"Hyperlink"]
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Set (=)  versus  SetDelayed (:=)", "Section"],

Cell["\<\
Alan Hayes provided an example where (  func[x_]=  ) instead of  
( func[x]:=  ) should be used.  If ( func[x_]:=  ) was used in this example
the least squares fit would be computed  again for every value of (x).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(\(data = 
        Table[{x, Cos[x] + Random[]/10}, {x, 0, \[Pi]/3, 0.025}];\)\), "\n", 
    \(curve[x_] = Fit[data, {1, x, x\^2}, x]\)}], "Input"],

Cell[BoxData[
    \(\(\(1.0407147343273468`\)\(\[InvisibleSpace]\)\) - 
      0.050835041799088786`\ x - 0.3970583602652394`\ x\^2\)], "Output"]
}, Open  ]],

Cell["\<\
In the following line Alan uses \"Epilog->Point/@data\"  to ensure the data \
points
are drawn along with a Plot of the curve.  For this application it makes 
little difference whether Epilog or Prolog is used.\
\>", "Text"],

Cell[BoxData[
    \(\(Plot[curve[t], {t, 0, \[Pi]/3}, 
        Epilog -> Point /@ data];\)\)], "Input"],

Cell["\<\
In the following example (expr) is not a polynomial in (x) until (expr) is \
evaluated.  So we have to use Set (=) to have the function perform as \
intended. \
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(expr = 1 + x + x\^2;\)\), "\n", 
    \(fun1[x_] := expr\), "\n", 
    \(fun1[E]\)}], "Input"],

Cell[BoxData[
    \(1 + x + x\^2\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[x];\)\), "\[IndentingNewLine]", 
    \(\(fun2[x_] = expr;\)\), "\n", 
    \(fun2[E]\)}], "Input"],

Cell[BoxData[
    \(1 + \[ExponentialE] + \[ExponentialE]\^2\)], "Output"]
}, Open  ]],

Cell["\<\
In the next example the right hand side can't evaluate until x is given a \
numeric value, so we have to use Set (=).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(area[x_?NumericQ] /; \((x > 0)\) := 
      NIntegrate[Log[t]/\((Exp[t] + 1)\), {t, 1, x}]\), "\n", 
    \({area[1], area[2], area[3], area[4]}\)}], "Input"],

Cell[BoxData[
    \({0.`, 0.06341880240374535`, 0.13226976495416617`, 
      0.16959898132979162`}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next example evaluation of (deriv1[expr]) starts with substituting the \
value of (expr) for (x) in the definition of deriv1[x_].  Next the Derivative \
is evaluated, and all is well as (expr) does not have a numeric value.  When \
the argument of ( deriv1 )  is a numeric value the value is substituted for \
(x) in the definition of (deriv1), and a Derivative with respect to a \
constant is not defined.  As a result (deriv1) doesn't work for numeric \
arguments.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(deriv1[x_] := D[x\^3, x]\), "\n", 
    \({deriv1[a], deriv1[\[Pi]]}\)}], "Input"],

Cell[BoxData[
    \({3\ a\^2, \[PartialD]\_\[Pi] \[Pi]\^3}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell the definition of (deriv2) differs from the definition of \
(deriv1) in that Set (=) is used rather than SetDelayed (:=).  Here the \
Derivative is only evaluated  when (deriv2) is defined.  The new function  \
(deriv2) gives the expected result for symbolic or numeric arguments.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[x];\)\), "\[IndentingNewLine]", 
    \(\(deriv2[x_] = D[x\^3, x];\)\), "\n", 
    \({deriv2[b], deriv2[\[Pi]]}\)}], "Input"],

Cell[BoxData[
    \({3\ b\^2, 3\ \[Pi]\^2}\)], "Output"]
}, Open  ]],

Cell["\<\
Notice the definition of (deriv1) involves the Derivative operation, but the \
definition of (deriv2) does not.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?deriv1\)\)], "Input"],

Cell["Global`deriv1", "Print",
  CellTags->"Info3242474922-7671367"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {GridBox[{
                {\(deriv1[x_] := \[PartialD]\_x x\^3\)}
                },
              GridBaseline->{Baseline, {1, 1}},
              ColumnWidths->0.999,
              ColumnAlignments->{Left}]}
          },
        GridBaseline->{Baseline, {1, 1}},
        ColumnAlignments->{Left}],
      Definition[ "deriv1"],
      Editable->False]], "Print",
  CellTags->"Info3242474922-7671367"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?deriv2\)\)], "Input"],

Cell["Global`deriv2", "Print",
  CellTags->"Info3242474922-1117472"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {GridBox[{
                {\(deriv2[x_] = 3\ x\^2\)}
                },
              GridBaseline->{Baseline, {1, 1}},
              ColumnWidths->0.999,
              ColumnAlignments->{Left}]}
          },
        GridBaseline->{Baseline, {1, 1}},
        ColumnAlignments->{Left}],
      Definition[ "deriv2"],
      Editable->False]], "Print",
  CellTags->"Info3242474922-1117472"]
}, Open  ]],

Cell["\<\
In the next two lines a Cumulative Distribution Function is defined.  For  \
CDF1 SetDelayed (:=) must be used because NIntegrate can not evaluate until \
we have a numerical value for both limits (upper and lower).  On the other \
hand CDF2 is defined using Set (=).  In this case SetDelayed (:=) could have \
been used but this would be far less efficient.  When CDF2 is defined using \
Set (=) the symbolic integration is only performed when CDF2 is defined.  If \
CDF2 was defined using SetDelayed (:=) the symbolic integration would be \
performed every time CDF2[_] is evaluated.\
\>", "Text"],

Cell[BoxData[
    \(CDF1[a_?NumericQ] := \n
      NIntegrate[\((\(\(-2\)\ E\^\(\(-2\)\ x\)\)\/\(EulerGamma + Log[2]\))\) 
          Log[x], {x, 0, a}]\)], "Input"],

Cell[BoxData[{
    \(\(Clear[a];\)\), "\[IndentingNewLine]", 
    \(\(CDF2[a_] = 
        Integrate[\((\(\(-2\)\ E\^\(\(-2\)\ x\)\)\/\(EulerGamma + Log[2]\))\) 
            Log[x], {x, 0, a}];\)\)}], "Input"],

Cell["\<\
The next example is from the FAQ section of the Wolfram Research web page.  \
When ( f1[n_] ) is defined using Set (=)  Expand has no effect because Expand \
makes no change if the exponent is not a positive integer.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[n];\)\), "\[IndentingNewLine]", 
    \(\(f1[n_Integer] = Expand[\((x + 1)\)\^n];\)\), "\n", 
    \(f1[5]\)}], "Input"],

Cell[BoxData[
    \(\((1 + x)\)\^5\)], "Output"]
}, Open  ]],

Cell["\<\
On the other hand ( f2[n_] ) is defined using SetDelayed (:=), and
Expand does not evaluate until the exponent has an integer value.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(f2[n_Integer] := Expand[\((x + 1)\)\^n]\), "\n", 
    \(f2[5]\)}], "Input"],

Cell[BoxData[
    \(1 + 5\ x + 10\ x\^2 + 10\ x\^3 + 5\ x\^4 + x\^5\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "A different perspective on explaining Set versus SetDelayed is give in the \
notebook posted at  ",
  ButtonBox["http://library.wolfram.com/infocenter/MathSource/425/",
    ButtonData:>{
      URL[ "http://library.wolfram.com/infocenter/MathSource/425/"], None},
    ButtonStyle->"Hyperlink"]
}], "Text"],

Cell[CellGroupData[{

Cell["A warning about named patterns in lhs when using (lhs=rhs)", \
"Subsection"],

Cell["\<\
One must be careful about using (lhs=rhs) when (lhs) includes named patterns \
and the pattern name is needed in (rhs).  Named patterns can include (x_), \
(x__), (opts___), (m_:4) (j_Integer), (t_?Positive), (n_.) and many other \
forms. When the variable used to name the pattern is used in (rhs) the global \
value of the variable is used in (rhs).  The next two cells demonstrate the \
problem.\
\>", "Text"],

Cell[BoxData[{
    \(\(x = 47;\)\), "\[IndentingNewLine]", 
    \(\(ClearAll[f];\)\), "\[IndentingNewLine]", 
    \(\(f[x_] = x + Log[x];\)\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(f[1/6]\)], "Input"],

Cell[BoxData[
    \(47 + Log[47]\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Above we see the global value of (x) is used instead of 0.125 to compute \
f[x].  An easy way to avoid the problem is to clear any symbols used to name \
patterns when the patterns are needed on the left side.  Below we can be sure \
that the definition will work as intended because any Global values were \
cleared from x.  This obviously requires that the variables used to name \
patterns have no variables that you care about.  Another solution that \
doesn't have this limitation is available from my ",
  StyleBox["MathSource",
    FontSlant->"Italic"],
  " item at  ",
  ButtonBox["http://library.wolfram.com/database/MathSource/425",
    ButtonData:>{
      URL[ "http://library.wolfram.com/database/MathSource/425"], None},
    ButtonStyle->"Hyperlink"],
  "."
}], "Text"],

Cell[BoxData[{
    \(\(ClearAll[f, x];\)\), "\[IndentingNewLine]", 
    \(\(f[x_] = x + Log[x];\)\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(f[1/6]\)], "Input"],

Cell[BoxData[
    \(1\/6 - Log[6]\)], "Output"]
}, Open  ]],

Cell["\<\
However, you can use the symbol used to name a pattern variable on the left \
side of (=) with out problems.  Below the global value of (x) doesn't prevent \
us from getting the intended result.\
\>", "Text"],

Cell[BoxData[{
    \(\(ClearAll[f];\)\), "\n", 
    \(\(x = 47;\)\), "\n", 
    \(\(f[x_] /; \((x < 0)\) = \(-1\);\)\), "\n", 
    \(\(f[0] = 0;\)\), "\n", 
    \(\(f[x_] /; \((x > 0)\) = 1;\)\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \({f[\(-4\)], f[0], f[5], f[50]}\)], "Input"],

Cell[BoxData[
    \({\(-1\), 0, 1, 1}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Evaluation of (lhs=rhs)", "Subsection"],

Cell["\<\
The next cell causes (g) to evaluate to (h) and causes (h) to evaluate to 9. \
As a result both (g) and (h) evaluate to 9.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(g = h;\)\), "\[IndentingNewLine]", 
    \(\(h = 9;\)\), "\[IndentingNewLine]", 
    \({g, h}\)}], "Input"],

Cell[BoxData[
    \({9, 9}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell (g=0) is evaluated and the value of zero is assigned to (g) \
without letting (g) evaluate.  As a result (g) evaluates 0 but (h) still \
evaluates to 9.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(g = 0;\)\), "\[IndentingNewLine]", 
    \({g, h}\)}], "Input"],

Cell[BoxData[
    \({0, 9}\)], "Output"]
}, Open  ]],

Cell["\<\
From the examples above it appears (lhs) in (lhs=rhs) doesn't evaluate and \
that is the case if MatchQ[Unevaluated[lhs],_Symbol] would return True. \
However, it isn't that simple if Unevaluated[lhs] isn't a Symbol. To \
demonstrate this consider the next cell where both (h[2]) and (g[2]) return \
9.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[g, h];\)\), "\n", 
    \(\(g = h;\)\), "\n", 
    \(\(h[2] := 9;\)\), "\n", 
    \({g[2], h[2]}\)}], "Input"],

Cell[BoxData[
    \({9, 9}\)], "Output"]
}, Open  ]],

Cell["\<\
Now when the next cell is evaluated (g[1+Tan[\[Pi]/2]]) partially evaluates \
prior to assigning the value 0 to something. First (g) evaluates to (h). Then \
(1+Tan[\[Pi]/4]) evaluates to (2). The last thing to happen is that 0 is \
assigned to h[2].  The first argument is held in the sense that h[2] doesn't \
evaluate to 9. If that happened this example would end up with 9=0 which is \
nonsense. A user defined function with the (HoldFirst) attribute will not \
work this way unless complicated definitions are used to ensure that it does.\
\
\>", "Text"],

Cell[BoxData[
    \(\(g[1 + Tan[\[Pi]/4]] = 0;\)\)], "Input"],

Cell["\<\
Now when g[2] is evaluated (g) evaluates to (h) and h[2] evaluates to 0.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(g[2]\)], "Input"],

Cell[BoxData[
    \(0\)], "Output"]
}, Open  ]],

Cell["\<\
Below we see that the new assignment is associated with (h) not with (g).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?g\)\)], "Input"],

Cell["Global`g", "Print",
  CellTags->"Info3284968730-3180209"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {GridBox[{
                {\(g = h\)}
                },
              GridBaseline->{Baseline, {1, 1}},
              ColumnWidths->0.999,
              ColumnAlignments->{Left}]}
          },
        GridBaseline->{Baseline, {1, 1}},
        ColumnAlignments->{Left}],
      Definition[ "g"],
      Editable->False]], "Print",
  CellTags->"Info3284968730-3180209"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?h\)\)], "Input"],

Cell["Global`h", "Print",
  CellTags->"Info3284968732-8841380"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {GridBox[{
                {\(h[2] = 0\)}
                },
              GridBaseline->{Baseline, {1, 1}},
              ColumnWidths->0.999,
              ColumnAlignments->{Left}]}
          },
        GridBaseline->{Baseline, {1, 1}},
        ColumnAlignments->{Left}],
      Definition[ "h"],
      Editable->False]], "Print",
  CellTags->"Info3284968732-8841380"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Simplify & FullSimplify", "Section"],

Cell[CellGroupData[{

Cell["Consider a special ComplexityFunction", "Subsection"],

Cell["\<\
One might like the following to simplify to 1-Exp[-x], and we would like \
FullSimplify[Log[10^20]] to return (20 Log[10]) which FullSimplify does by \
default.\
\>", "Text",
  CellTags->"Simplify_FullSimplify"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[x, a];\)\), "\[IndentingNewLine]", 
    \(FullSimplify[1 - Cosh[x] + Sinh[x]]\)}], "Input"],

Cell[BoxData[
    \(1 - Cosh[x] + Sinh[x]\)], "Output"]
}, Open  ]],

Cell["\<\
The definitions in the next cell define a new setting for the \
ComplexityFunction that does the trick.\
\>", "Text"],

Cell[BoxData[{
    \(\(ClearAll[DigitsLength, Digits1, Digits2, VariableCount];\)\), "\n", 
    \(\(DigitsLength[0 | 1] = 1/10;\)\), "\n", 
    \(\(DigitsLength[\(-1\)] = 1/8;\)\), "\n", 
    \(\(DigitsLength[n_] := Length[IntegerDigits[n]]*2;\)\), "\n", 
    \(\(Digits1[expr_] := 
        Plus @@ \((\(DigitsLength[#] &\) /@ 
              Cases[expr, _Integer, \(-1\)])\);\)\), "\n", 
    \(\(Digits2[expr_] := 
        Plus @@ Flatten[\[IndentingNewLine]Map[
              DigitsLength[#] &, \((\({Numerator[#], Denominator[#]} &\)\  /@ 
                  Cases[expr, _Rational, {\(-1\)}])\), {\(-1\)}\
\[IndentingNewLine]]\[IndentingNewLine]];\)\), "\n", 
    \(\(\(VariableCount[expr_] := 
      Count[expr, _Symbol?\((Not[
                NumericQ[#]] &)\), {\(-1\)}]\)\(\[IndentingNewLine]\)
    \)\), "\n", 
    \(\(SetOptions[FullSimplify, 
        ComplexityFunction \[Rule] \((LeafCount[#] + Digits1[#] + 
                Digits2[#] + \((33/10)\)*
                  VariableCount[#] &)\)];\)\)}], "Input"],

Cell["\<\
In the next cell we see that using the new setting for ComplexityFunction \
FullSimplify does what we want.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(FullSimplify[1 - Cosh[x] + Sinh[x]]\)], "Input"],

Cell[BoxData[
    \(1 - \[ExponentialE]\^\(-x\)\)], "Output"]
}, Open  ]],

Cell["\<\
The next example is taken from the Help Browser. In this case the new setting \
for ComplexityFunction gives the same result we get using ComplexityFunction\
\[Rule]Automatic.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(n = 
        70017833065954769132658110933808716053755043900310001;\)\), "\n", 
    \(FullSimplify[Log[n]]\)}], "Input"],

Cell[BoxData[
    \(5\ Log[20001] + 7\ Log[30001]\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell we see that when using the new setting for \
ComplexityFunction FullSimplify still does a nice job of simplifying a \
complicated algebraic expression.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(FullSimplify[
      x\^3\ Cot[a\^2] - 
        1\/4\ Csc[
            a\^2]\ \((4\ \[ExponentialE]\^\(\[ImaginaryI]\ a\^2\)\ x\^3 + 
              Sin[a\^2]\ \((2\ \[ImaginaryI]\ \((2\ a\^2 - \[Pi])\)\ x + \(4\ \
\[ImaginaryI]\ \[ExponentialE]\^\(\(-2\)\ \[ImaginaryI]\ x\^2\)\ \[Pi]\ x\)\/\
\(1 + \[ExponentialE]\^\(\(-2\)\ \[ImaginaryI]\ x\^2\)\) + \(8\ \[ImaginaryI]\
\ \[ExponentialE]\^\(2\ \[ImaginaryI]\ \((a\^2 + x\^2)\)\)\ x\ \((a\^2 + \
x\^2)\)\)\/\(1 - \[ExponentialE]\^\(2\ \[ImaginaryI]\ \((a\^2 + x\^2)\)\)\) + 
                    4\ a\^2\ x\ Cot[a\^2 + x\^2] - 
                    2\ \[Pi]\ x\ Tan[
                        x\^2])\))\)\[IndentingNewLine]]\)], "Input"],

Cell[BoxData[
    \(x\^3\ Cot[a\^2 + x\^2]\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["A simple problem Simplify & FullSimplify can't handle", "Subsection"],

Cell["\<\
J\[UDoubleDot]rgen Tischer sent a problem to the MathGroup that Simplify \
couldn't simplify very well.  Simplify has trouble with the example in the \
next cell for the same reason as the more complicated example \
J\[UDoubleDot]rgen Tischer provided.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[n];\)\), "\[IndentingNewLine]", 
    \(Simplify[5 \((20\^n)\) + 7 \((20\^n)\)]\)}], "Input"],

Cell[BoxData[
    \(4\^n\ 5\^\(1 + n\) + 7\ 20\^n\)], "Output"]
}, Open  ]],

Cell["\<\
The code in the next cell forces Simplify to make the appropriate \
simplification.  This is based on a very clever solution Allan Hayes sent to \
the MathGroup.\
\>", "Text"],

Cell[BoxData[{
    \(\(Unprotect[Simplify];\)\), "\n", 
    \(\(\(HiddenSymbols`ModifySimplify = True;\)\(\[IndentingNewLine]\)
    \)\), "\n", 
    \(\(\(Simplify[expr_] /; HiddenSymbols`ModifySimplify := 
      Block[{HiddenSymbols`ModifySimplify}, \[IndentingNewLine]Module[{temp}, \
\[IndentingNewLine]Simplify[\[IndentingNewLine]Factor[
                expr /. \((n_Integer)\)^\((k_)\) \[RuleDelayed] \
\[IndentingNewLine]\((Times @@ \(\((temp[First[#]]^\((k*Last[\ #])\) &)\) /@ 
                          FactorInteger[n]\))\)\[IndentingNewLine]] /. 
              temp[a_] \[RuleDelayed] 
                a\[IndentingNewLine]]\[IndentingNewLine]]\[IndentingNewLine]]\
\)\(\[IndentingNewLine]\)
    \)\), "\n", 
    \(\(Protect[Simplify];\)\)}], "Input"],

Cell["\<\
After evaluating the previous cell Simplify does better with the example \
above.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Simplify[5 \((20\^n)\) + 7 \((20\^n)\)]\)], "Input"],

Cell[BoxData[
    \(3\ 4\^\(1 + n\)\ 5\^n\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "One might wonder why ",
  Cell[BoxData[
      \(\((12\ \((20\^n)\))\)\)]],
  " isn't returned in the output above.  The reason is that the kernel \
insists on changing ",
  Cell[BoxData[
      \(\((12\ \((20\^n)\))\)\)]],
  " into ",
  Cell[BoxData[
      \(\((3\ \(4\^\(1 + n\)\) 5\^n)\)\)]],
  ".  You can use a function I defined called HoldTemporary which prevents \
further evaluation of an expression, but does not have to have a hold \
released when used in the future. Through use of HoldTemporary one can have \
the output above displayed as ",
  Cell[BoxData[
      \(\((12\ \ 20\^n\ )\)\)]],
  ".  I have a package which defines HoldTemporary posted at  ",
  ButtonBox["http://library.wolfram.com/infocenter/MathSource/705",
    ButtonData:>{
      URL[ "http://library.wolfram.com/infocenter/MathSource/705"], None},
    ButtonStyle->"Hyperlink"]
}], "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Slot, SlotSequence  (#, #n, ##, ##n)", "Section"],

Cell[TextData[{
  "The discussion of (#, #n, ##, ##n) was expanded and moved to the section \
on ",
  ButtonBox["Function",
    ButtonData:>"Function",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text",
  CellTags->"Pure Functions"]
}, Closed]],

Cell[CellGroupData[{

Cell["Sort", "Section"],

Cell["\<\
By default Sort arranges items in cannonical order rather than numerical \
order. This is reasonable because some or all of the elements may not have a \
numeric value. If all elements of a list have the heads Integer, Rational, or \
Real the cannanocal ordering is a numerical ordering. In the next cell some \
elements of the list don't have the head Integer, Rational or Real and the \
elements aren't sorted numerically even though they could be sorted \
numerically.\
\>", "Text",
  CellTags->"Sort"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Sort[{\(-2\), 4, \(-5\), 
        Sin[2], \[Pi], \(-\[Infinity]\), \[Infinity]}]\)], "Input"],

Cell[BoxData[
    RowBox[{"{", 
      RowBox[{\(-5\), ",", \(-2\), ",", "4", ",", "\[Pi]", ",", 
        InterpretationBox[\(-\[Infinity]\),
          DirectedInfinity[ -1]], ",", 
        InterpretationBox["\[Infinity]",
          DirectedInfinity[ 1]], ",", \(Sin[2]\)}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
You can provide Sort a second argument which specifies how elements should be \
compared when they are sorted. In the next cell Less is used as an ordering \
function and the list is sorted numerically. Of course you would get the list \
in opposite order if the ordering function Greater was used. However, Allan \
Hayes has pointed out in the MathGroup that Sort is much slower when an \
ordering function is specified. \
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Sort[{\(-2\), 4, \(-5\), Sin[2], \[Pi], \(-\[Infinity]\), \[Infinity]}, 
      Less]\)], "Input"],

Cell[BoxData[
    RowBox[{"{", 
      RowBox[{
        InterpretationBox[\(-\[Infinity]\),
          DirectedInfinity[ -1]], ",", \(-5\), ",", \(-2\), ",", \(Sin[2]\), 
        ",", "\[Pi]", ",", "4", ",", 
        InterpretationBox["\[Infinity]",
          DirectedInfinity[ 1]]}], "}"}]], "Output"]
}, Open  ]],

Cell[TextData[{
  "The ordering function (#1<#2&) has the same effect as the ordering \
function Less, but is more cryptic. In this case there isn't a good reason to \
use the more cryptic ordering function, but in more complicated cases the \
cryptic notation is harder to avoid. If you aren't familiar with the #& \
notation see the section on ",
  ButtonBox["Function",
    ButtonData:>"Function",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Sort[{\(-2\), 4, \(-5\), 
        Sin[2], \[Pi], \(-\[Infinity]\), \[Infinity]}, #1 < #2 &]\)], "Input"],

Cell[BoxData[
    RowBox[{"{", 
      RowBox[{
        InterpretationBox[\(-\[Infinity]\),
          DirectedInfinity[ -1]], ",", \(-5\), ",", \(-2\), ",", \(Sin[2]\), 
        ",", "\[Pi]", ",", "4", ",", 
        InterpretationBox["\[Infinity]",
          DirectedInfinity[ 1]]}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
Suppose you have the matrix created by the next cell and you want to sort the \
rows according to the value in a certain row of the matrix. The next cell \
makes such a matrix we can use as an example.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(mtrx = 
        Table[{Random[Integer, {0, 10}], \n\tRandom[Integer, {50, 60}], \n\t
            Random[Integer, {\(-10\), 0}]}, {i, 8}];\)\), "\n", 
    \(TableForm[mtrx]\)}], "Input",
  FontSize->12],

Cell[BoxData[
    TagBox[GridBox[{
          {"6", "52", \(-9\)},
          {"6", "53", \(-2\)},
          {"9", "57", \(-3\)},
          {"4", "50", \(-7\)},
          {"8", "53", \(-7\)},
          {"3", "56", \(-7\)},
          {"7", "55", \(-8\)},
          {"10", "56", \(-5\)}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      Function[ BoxForm`e$, 
        TableForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell["\<\
In the next cell the matrix is sorted according to the value in the first \
column.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(m2 = Sort[mtrx];\)\), "\[IndentingNewLine]", 
    \(TableForm[m2]\)}], "Input"],

Cell[BoxData[
    TagBox[GridBox[{
          {"3", "56", \(-7\)},
          {"4", "50", \(-7\)},
          {"6", "52", \(-9\)},
          {"6", "53", \(-2\)},
          {"7", "55", \(-8\)},
          {"8", "53", \(-7\)},
          {"9", "57", \(-3\)},
          {"10", "56", \(-5\)}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      Function[ BoxForm`e$, 
        TableForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell["\<\
If we want to sort the matrix according to the value in the second column we \
can use the ordering function  (#1[[2]]<#2[[2]]&) as in the next cell.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(m2 = 
        Sort[mtrx, #1[\([2]\)] < #2[\([2]\)] &];\)\), "\[IndentingNewLine]", 
    \(TableForm[m2]\)}], "Input"],

Cell[BoxData[
    TagBox[GridBox[{
          {"4", "50", \(-7\)},
          {"6", "52", \(-9\)},
          {"8", "53", \(-7\)},
          {"6", "53", \(-2\)},
          {"7", "55", \(-8\)},
          {"10", "56", \(-5\)},
          {"3", "56", \(-7\)},
          {"9", "57", \(-3\)}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      Function[ BoxForm`e$, 
        TableForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell[TextData[{
  "The code in the next cell effectively sorts the matrix on the second \
column. In this case each row is rotated before using Sort. Then Sort can be \
used without an ordering function. After the matrix is sorted the columns are \
put back in the original order. Sort evaluates ",
  StyleBox["much faster",
    FontWeight->"Bold"],
  " this time because an ordering function wasn't specified. When given a \
matrix with thousands of rows this method is about 18 times faster even after \
accounting for the time to rotate each column before and after sorting."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(m2 = 
        Sort[\(RotateLeft[#, 1] &\) /@ mtrx];\)\), "\[IndentingNewLine]", 
    \(\(m2 = \(RotateRight[#, 1] &\) /@ m2;\)\), "\[IndentingNewLine]", 
    \(TableForm[m2]\)}], "Input"],

Cell[BoxData[
    TagBox[GridBox[{
          {"4", "50", \(-7\)},
          {"6", "52", \(-9\)},
          {"8", "53", \(-7\)},
          {"6", "53", \(-2\)},
          {"7", "55", \(-8\)},
          {"3", "56", \(-7\)},
          {"10", "56", \(-5\)},
          {"9", "57", \(-3\)}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      Function[ BoxForm`e$, 
        TableForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell["\<\
Sort can work with any expression. In the next cell Sort takes an expression \
with the head (h).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[h];\)\), "\[IndentingNewLine]", 
    \(Sort[h[2, 6, 3, 8, 5, 6, 8, 1, 0, 3]]\)}], "Input"],

Cell[BoxData[
    \(h[0, 1, 2, 3, 3, 5, 6, 6, 8, 8]\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Split", "Section"],

Cell["\<\
The usage message for Split and demonstrations of it are shown in the next \
few cells.\
\>", "Text",
  CellTags->"Split"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?Split\)\)], "Input"],

Cell[BoxData[
    RowBox[{"\<\"Split[list] splits list into sublists consisting of runs of \
identical elements. Split[list, test] treats pairs of adjacent elements as \
identical whenever applying the function test to them yields True.\"\>", " ", 
      
      ButtonBox[
        StyleBox["More\[Ellipsis]",
          "SR"],
        ButtonData:>"Split",
        Active->True,
        ButtonStyle->"RefGuideLink"]}]], "Print",
  CellTags->"Info3242474961-5860318"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(Split[{a, a, b, b, b, b, a, b, a, a, b, b, b, a}]\)}], "Input"],

Cell[BoxData[
    \({{a, a}, {b, b, b, b}, {a}, {b}, {a, a}, {b, b, b}, {a}}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Many of the most useful applications of Split require providing Split a \
test function as a second argument. In the next cell Slit Split considers two \
adjacent elements of (lst) \"identical\" if they are both less than 100 or if \
they are both greater or equal to 100. For an explanation of the # & notation \
see the discussion of ",
  ButtonBox["Function",
    ButtonData:>"Function",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(\(lst = {10, 11, 100, 234, 648, 467, 12, 13, 14, 356, 15, 16, 
          457};\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(Split[lst, #1 < 100 === #2 < 100 &]\)}], "Input"],

Cell[BoxData[
    \({{10, 11}, {100, 234, 648, 467}, {12, 13, 14}, {356}, {15, 
        16}, {457}}\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell sorts (lst) and returns a list of lists where the first sublist \
is the elements between 0, 10. The second sublist is the elements between 10 \
and 20. The third and fourth sublists are the elements from 20 to 30 and from \
30 to 40.\
\>", "Text"],

Cell[CellGroupData[{

Cell["\<\
lst={8.06833, 32.1809, 20.357, 22.7313, 38.2098, 48.3307, 
 34.9967, 13.2429, 24.3229, 1.89359, 41.7259, 10.4685, 
 26.4448, 41.3348, 46.9688};
 
Split[Sort[lst],Floor[#1/10]===Floor[#2/10]&]\
\>", "Input"],

Cell[BoxData[
    \({{1.89359`, 8.06833`}, {10.4685`, 13.2429`}, {20.357`, 22.7313`, 
        24.3229`, 26.4448`}, {32.1809`, 34.9967`, 38.2098`}, {41.3348`, 
        41.7259`, 46.9688`, 48.3307`}}\)], "Output"]
}, Open  ]],

Cell["\<\
Finally Split can be used on expressions that don't have the head List.  This \
is demonstrated in the next cell.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Split[h[a, a, b, b, b, b, a, b, a, a, b, b, b, a]]\)], "Input"],

Cell[BoxData[
    \(h[h[a, a], h[b, b, b, b], h[a], h[b], h[a, a], h[b, b, b], 
      h[a]]\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Subscript (using subscripted symbols)", "Section"],

Cell[TextData[{
  "I wrote a package that makes it very easy to do switch back an forth \
between treating subscripts as symbols and not.  The package is largely based \
on code samples discussed here and the package can be downloaded from  ",
  ButtonBox["http://library.wolfram.com/database/MathSource/4268",
    ButtonData:>{
      URL[ "http://library.wolfram.com/database/MathSource/4268"], None},
    ButtonStyle->"Hyperlink"],
  ". \n\nThe next line is a slight variation of a tip David Bailey sent to \
the MathGroup.  Using this code an 'a' with a non-negative integer subscript \
evaluates to a symbol where the character 'a' is concatenated with the \
symbol."
}], "Text",
  Hyphenation->False],

Cell[BoxData[{
    \(\(Clear["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(a\_\(i_?\((IntegerQ[#] && NonNegative[#] &)\)\) := 
      Symbol[ToString[a] <> ToString[i]]\)}], "Input"],

Cell["\<\
Now in the next line the first three in the list are symbols, and all the \
rest are subscript expressions.  \
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Head /@ \ {a\_0, \ a\_1, \ a\_2, \ a\_b, \ a\_\(1/2\)}\)], "Input"],

Cell[BoxData[
    \({Symbol, Symbol, Symbol, Subscript, Subscript}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "If this approach is used you must avoid using both ",
  Cell[BoxData[
      \(TraditionalForm\`{a\_1, \ a\_2, \ a\_3}\)]],
  " and {a1, a2, a3} as symbols, since the former will evaluate to the \
latter.  This is demonstrated in the next cell."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \({a\_1, \ a\_1 === a1}\)], "Input"],

Cell[BoxData[
    \({a1, True}\)], "Output"]
}, Open  ]],

Cell["\<\
The next line shows that the rule above is stored in DownValues[Subscript].\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(DownValues[Subscript]\)], "Input"],

Cell[BoxData[
    \({HoldPattern[
          a\_\(i_?\((IntegerQ[#1] && NonNegative[#1] &)\)\)] \[RuleDelayed] 
        Symbol[ToString[a] <> ToString[i]]}\)], "Output"]
}, Open  ]],

Cell["Before continuing the above DownValue is cleared.", "Text"],

Cell[BoxData[
    \(\(DownValues[Subscript] = {};\)\)], "Input"],

Cell[CellGroupData[{

Cell[TextData[{
  "Colin Rose gave the following examples where Subscripts can be used in ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " Version 4 without using the notation palette."
}], "Subsection",
  Hyphenation->False],

Cell[CellGroupData[{

Cell[BoxData[
    \(z = Thread[Subscript[y, Range[12]]]\)], "Input"],

Cell[BoxData[
    \({y\_1, y\_2, y\_3, y\_4, y\_5, y\_6, y\_7, y\_8, y\_9, y\_10, y\_11, 
      y\_12}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(z /. Subscript[y, x_] \[RuleDelayed] y^x\)], "Input"],

Cell[BoxData[
    \({y, y\^2, y\^3, y\^4, y\^5, y\^6, y\^7, y\^8, y\^9, y\^10, y\^11, 
      y\^12}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(% /. y^x_. \  \[RuleDelayed] Subscript[y, x]\)], "Input"],

Cell[BoxData[
    \({y\_1, y\_2, y\_3, y\_4, y\_5, y\_6, y\_7, y\_8, y\_9, y\_10, y\_11, 
      y\_12}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(z /. Subscript[y, t_] \[RuleDelayed] Subscript[y, t - 1]\)], "Input"],

Cell[BoxData[
    \({y\_0, y\_1, y\_2, y\_3, y\_4, y\_5, y\_6, y\_7, y\_8, y\_9, y\_10, 
      y\_11}\)], "Output"]
}, Open  ]],

Cell["\<\
In v4, you can generally use subscripted \"variables\" as if they were \
symbols.  The examples below work fine.\
\>", "Text",
  Hyphenation->False],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(expr = y\_1 + y\_2;\)\), "\n", 
    \(Solve[expr \[Equal] 2, y\_\(\(1\)\(\ \)\)]\)}], "Input"],

Cell[BoxData[
    \({{y\_1 \[Rule] 2 - y\_2}}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Integrate[expr, y\_1]\)], "Input"],

Cell[BoxData[
    \(y\_1\%2\/2 + y\_1\ y\_2\)], "Output"]
}, Open  ]],

Cell[BoxData[
    \(\(Plot3D[Sin[y\_1 + y\_2], {y\_1, 0, 3}, {y\_2, 0, 3}];\)\)], "Input"],

Cell[TextData[{
  "The most common problem occurs when people simultaneously try to use \n(x) \
and ",
  Cell[BoxData[
      \(TraditionalForm\`x\_1, \ x\_2, \ \(\(etc\)\(.\)\)\)]],
  "  In that case if one uses (x=7) then  ",
  Cell[BoxData[
      \(TraditionalForm\`x\_1\  \[Rule] \ 7\_1\ , \ 
      x\_2\  \[Rule] \ 7\_2\)]],
  " .  This sort of problem is easily avoided by NOT simultaneously using x \
with ",
  Cell[BoxData[
      \(TraditionalForm\`x\_1, x\_2, \  ... \)]]
}], "Text",
  Hyphenation->False]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Carl Woll indicated we can give Subscript the attribute HoldFirst. As in the \
example below.\
\>", "Subsection",
  Hyphenation->False],

Cell[BoxData[{
    \(\(ClearAll[Subscript];\)\), "\n", 
    \(\(SetAttributes[Subscript, HoldFirst];\)\)}], "Input"],

Cell[TextData[{
  "Now we can have symbols  t,  ",
  Cell[BoxData[
      \(TraditionalForm\`t\_1\)],
    SingleLetterItalics->False],
  " without conflict."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(t = 34;\)\), "\[IndentingNewLine]", 
    \(t\_1\)}], "Input"],

Cell[BoxData[
    \(t\_1\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Table[t\_1, {t\_1, 5}]\)], "Input"],

Cell[BoxData[
    \({1, 2, 3, 4, 5}\)], "Output"]
}, Open  ]],

Cell[BoxData[
    \(ClearAll[Subscript]\)], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Collin Rose also indicated use of Symbolize button in the notation palette \
can result in problems as in the following example.\
\>", "Subsection"],

Cell[BoxData[
    \(Needs["\<Utilities`Notation`\>"]\)], "Input"],

Cell[BoxData[{
    RowBox[{
      RowBox[{"Symbolize", "[", 
        TagBox[\(m\_1\),
          NotationBoxTag,
          TagStyle->"NotationTemplateStyle"], "]"}], ";"}], "\n", 
    RowBox[{
      RowBox[{"Symbolize", "[", 
        TagBox[\(m\_2\),
          NotationBoxTag,
          TagStyle->"NotationTemplateStyle"], "]"}], ";"}], "\n", 
    RowBox[{
      RowBox[{"Symbolize", "[", 
        TagBox[\(m\_3\),
          NotationBoxTag,
          TagStyle->"NotationTemplateStyle"], "]"}], ";"}]}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(z1 = {m\_1, m\_2, m\_3};\)\), "\[IndentingNewLine]", 
    \(Head /@ z1\)}], "Input"],

Cell[BoxData[
    \({Symbol, Symbol, Symbol}\)], "Output"]
}, Open  ]],

Cell["So far we don't have a problem.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(z2 = Table[m\_i, {i, 3}]\)], "Input"],

Cell[BoxData[
    \({m\_1, m\_2, m\_3}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Head /@ z2\)], "Input"],

Cell[BoxData[
    \({Subscript, Subscript, Subscript}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "We now have two sets of \"identical\" notation in use.  We have ",
  Cell[BoxData[
      \(TraditionalForm\`m\_2\)]],
  " as a Symbol in z1, and  ",
  Cell[BoxData[
      \(TraditionalForm\`m\_2\)]],
  " as subscript expression in z2.  However, the elements in z1 and z2 look \
the same on screen.  One must be careful to make sure this doesn't happen.\n\n\
The steps used above to make ",
  Cell[BoxData[
      \(TraditionalForm\`{m\_1, \ m\_2, \ m\_3}\)]],
  " symbols can be undone by using the RemoveSymbolize button in the \
FullNotation palette.  It's under Symbolizations, StandardForm Symbolize."
}], "Text",
  Hyphenation->False],

Cell[BoxData[{
    RowBox[{
      RowBox[{"RemoveSymbolize", "[", 
        TagBox[\(m\_1\),
          NotationBoxTag,
          TagStyle->"NotationTemplateStyle"], " ", "]"}], 
      ";"}], "\[IndentingNewLine]", 
    RowBox[{
      RowBox[{"RemoveSymbolize", "[", 
        TagBox[\(m\_2\),
          NotationBoxTag,
          TagStyle->"NotationTemplateStyle"], " ", "]"}], 
      ";"}], "\[IndentingNewLine]", 
    RowBox[{
      RowBox[{"RemoveSymbolize", "[", 
        TagBox[\(m\_3\),
          NotationBoxTag,
          TagStyle->"NotationTemplateStyle"], " ", "]"}], ";"}]}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
  "Allan Hayes suggested the following to symbolize ALL subscript objects.  \
Below we see that this will cause even ",
  Cell[BoxData[
      \(TraditionalForm\`\(Log[3]\)\_\(\(\ \)\(a\)\)\)]],
  " to have the head Symbol.  It's hard to imagine why one would use such a \
form, so this may be of little concern."
}], "Subsection",
  Hyphenation->False],

Cell[BoxData[
    \(Needs["\<Utilities`Notation`\>"]\)], "Input"],

Cell[BoxData[
    RowBox[{"Symbolize", "[", 
      TagBox[\(\(\(_\)\(\ \)\)\__\),
        NotationBoxTag,
        TagStyle->"NotationTemplateStyle"], "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Head /@ \ {a\_b, \ t\_2, \ \(Log[3]\)\_a}\)], "Input"],

Cell[BoxData[
    \({Symbol, Symbol, Symbol}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "After using the code above to treat anything with any type of a subscript \
as a Symbol the use of Table below doesn't return the list ",
  Cell[BoxData[
      \(TraditionalForm\`{x\_\(\(1\)\(\ \)\), \ x\_\(\(2\)\(\ \)\), \ 
        x\_\(\(3\)\(\ \)\), \ x\_4}\)]],
  "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Table[x\_i, {i, 4}]\)], "Input"],

Cell[BoxData[
    \({x\_i, x\_i, x\_i, x\_i}\)], "Output"]
}, Open  ]],

Cell["\<\
Before we continue we might want to remove the rule that makes anything with \
a subscript a symbol.  The line after RemoveSymbolize demonstrates that the \
rule was in fact removed.\
\>", "Text"],

Cell[BoxData[
    RowBox[{"RemoveSymbolize", "[", 
      TagBox[\(\(\(_\)\(\ \)\)\__\),
        NotationBoxTag,
        TagStyle->"NotationTemplateStyle"], "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Head /@ Table[a\_i, {i, 4}]\)], "Input"],

Cell[BoxData[
    \({Subscript, Subscript, Subscript, Subscript}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
A modification of code Jason Harris sent to the MathGroup is given below. \
\>", "Subsection"],

Cell[TextData[{
  "One variation of code Jason Harris sent to the MathGroup is shown below.  \
The version below will treat (i) with a non-negative integer subscript as a \
symbol, but (i) with any other subscript is treated as a Subscript \
expression.  This requires the use of some advanced features of the Notation \
palette.  Documentation can be found at ",
  ButtonBox["Notation:Definition:NotationPatternTag",
    ButtonStyle->"AddOnsLink"],
  " under Add-ons in the Help Browser."
}], "Text",
  Hyphenation->False],

Cell[BoxData[
    \(Needs["\<Utilities`Notation`\>"]\)], "Input"],

Cell[BoxData[{
    RowBox[{\(i\_\(n_?\((IntegerQ[#] && NonNegative[#] &)\)\) := 
        ToExpression[MakeBoxes[i\_n]]\), "\[IndentingNewLine]", " "}], "\n", 
    RowBox[{\(IntegerTest[n_] := 
        ToExpression[n, StandardForm, IntegerQ[#] && NonNegative[#] &]\), 
      "\[IndentingNewLine]", " "}], "\n", 
    RowBox[{
      RowBox[{"Symbolize", "[", 
        TagBox[
          SubscriptBox["i", 
            TagBox[\(_?IntegerTest\),
              NotationPatternTag,
              TagStyle->"NotationPatternWrapperStyle"]],
          NotationBoxTag,
          TagStyle->"NotationTemplateStyle"], "]"}], "\[IndentingNewLine]", 
      " "}], "\n", \(i\_\(n_?\((IntegerQ[#] && NonNegative[#] &)\)\) := 
      ToExpression[MakeBoxes[i\_n]]\)}], "Input"],

Cell["\<\
Now (i) with a positive integer subscript is an symbol, while (i) with any \
other subscript is a subscript expression.\
\>", "Text",
  Hyphenation->False],

Cell[CellGroupData[{

Cell[BoxData[
    \(Head /@ {i\_2, i\_\(-3\), i\_a, i\_1.2, i\_\[Pi], 
        i\_\(2/3\)}\)], "Input"],

Cell[BoxData[
    \({Symbol, Subscript, Subscript, Subscript, Subscript, 
      Subscript}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Below ",
  Cell[BoxData[
      \(TraditionalForm\`i\_n\)]],
  " is an expression rather than a Symbol, so the list ",
  Cell[BoxData[
      \(TraditionalForm\`{\ i\_\(\(0\)\(\ \)\), \ i\_\(\(1\)\(\ \)\), \ 
        i\_\(\(2\)\(\ \ \)\), \ i\_\(\(3\)\(\ \)\)}\)]],
  "  is returned."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(lst = Table[i\_n, {n, 0, 3}]\)], "Input"],

Cell[BoxData[
    \({i\_0, i\_1, i\_2, i\_3}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Head /@ lst\)], "Input"],

Cell[BoxData[
    \({Symbol, Symbol, Symbol, Symbol}\)], "Output"]
}, Open  ]],

Cell[BoxData[
    RowBox[{"\[FilledSquare]", "  ", 
      StyleBox["How",
        FontFamily->"Times New Roman",
        FontWeight->"Plain",
        FontSlant->"Plain",
        FontTracking->"Plain",
        FontVariations->{"Underline"->False,
        "Outline"->False,
        "Shadow"->False,
        "StrikeThrough"->False,
        "Masked"->False,
        "CompatibilityType"->0,
        "RotationAngle"->0}], 
      StyleBox[" ",
        FontFamily->"Times New Roman",
        FontWeight->"Plain",
        FontSlant->"Plain",
        FontTracking->"Plain",
        FontVariations->{"Underline"->False,
        "Outline"->False,
        "Shadow"->False,
        "StrikeThrough"->False,
        "Masked"->False,
        "CompatibilityType"->0,
        "RotationAngle"->0}], 
      StyleBox[
        RowBox[{"t", 
          StyleBox["o",
            FontFamily->"Times New Roman",
            FontWeight->"Plain",
            FontSlant->"Plain",
            FontTracking->"Plain",
            FontVariations->{"Underline"->False,
            "Outline"->False,
            "Shadow"->False,
            "StrikeThrough"->False,
            "Masked"->False,
            "CompatibilityType"->0,
            "RotationAngle"->0}]}]], 
      StyleBox[" ",
        FontFamily->"Times New Roman",
        FontWeight->"Plain",
        FontSlant->"Plain",
        FontTracking->"Plain",
        FontVariations->{"Underline"->False,
        "Outline"->False,
        "Shadow"->False,
        "StrikeThrough"->False,
        "Masked"->False,
        "CompatibilityType"->0,
        "RotationAngle"->0}], 
      StyleBox["make",
        FontFamily->"Times New Roman",
        FontWeight->"Plain",
        FontSlant->"Plain",
        FontTracking->"Plain",
        FontVariations->{"Underline"->False,
        "Outline"->False,
        "Shadow"->False,
        "StrikeThrough"->False,
        "Masked"->False,
        "CompatibilityType"->0,
        "RotationAngle"->0}], 
      StyleBox[" ",
        FontFamily->"Times New Roman",
        FontWeight->"Plain",
        FontSlant->"Plain",
        FontTracking->"Plain",
        FontVariations->{"Underline"->False,
        "Outline"->False,
        "Shadow"->False,
        "StrikeThrough"->False,
        "Masked"->False,
        "CompatibilityType"->0,
        "RotationAngle"->0}], 
      StyleBox["the",
        FontFamily->"Times New Roman",
        FontWeight->"Plain",
        FontSlant->"Plain",
        FontTracking->"Plain",
        FontVariations->{"Underline"->False,
        "Outline"->False,
        "Shadow"->False,
        "StrikeThrough"->False,
        "Masked"->False,
        "CompatibilityType"->0,
        "RotationAngle"->0}], 
      StyleBox[" ",
        FontFamily->"Times New Roman",
        FontVariations->{"CompatibilityType"->0}], 
      RowBox[{
        StyleBox["expression",
          FontFamily->"Times New Roman",
          FontVariations->{"CompatibilityType"->0}], 
        StyleBox[":",
          FontFamily->"Times New Roman",
          FontVariations->{"CompatibilityType"->0}], "\[IndentingNewLine]", 
        StyleBox[
          RowBox[{"Symbolize", "[", 
            TagBox[
              SubscriptBox["i", 
                TagBox[\(_?IntegerTest\),
                  NotationPatternTag,
                  TagStyle->"NotationPatternWrapperStyle"]],
              NotationBoxTag,
              TagStyle->"NotationTemplateStyle"], "]"}],
          FontWeight->"Bold"]}]}]], "Text"],

Cell["\<\
Short of manually entering the necessary cell expression there are two ways \
to make the Symbolize expression above.  Both are explained below.\
\>", "Text"],

Cell[TextData[StyleBox["\[FilledSmallSquare]  Use keyboard shortcuts:",
  FontVariations->{"CompatibilityType"->0}]], "Text"],

Cell["Type \[EscapeKey]symb\[EscapeKey]\[TabKey]i", "Text"],

Cell[BoxData[
    RowBox[{"Symbolize", "[", 
      TagBox["i",
        NotationBoxTag,
        TagStyle->"NotationTemplateStyle"], "]"}]], "Input",
  Editable->False,
  Evaluatable->False],

Cell["Depress \[ControlKey]- ", "Text"],

Cell[BoxData[
    RowBox[{"Symbolize", "[", 
      TagBox[\(i\_\[SelectionPlaceholder]\),
        NotationBoxTag,
        TagStyle->"NotationTemplateStyle"], "]"}]], "Input",
  Editable->False,
  Evaluatable->False],

Cell["\<\
Type  \[EscapeKey]pattwraper\[EscapeKey]\[TabKey]_?IntegerTest\
\>", "Text"],

Cell[BoxData[
    RowBox[{"Symbolize", "[", 
      TagBox[
        SubscriptBox["i", 
          TagBox[\(_?IntegerTest\),
            NotationPatternTag,
            TagStyle->"NotationPatternWrapperStyle"]],
        NotationBoxTag,
        TagStyle->"NotationTemplateStyle"], "]"}]], "Input",
  Editable->False,
  Evaluatable->False],

Cell[TextData[StyleBox["\[FilledSmallSquare]  Use the Notation palette:",
  FontVariations->{"CompatibilityType"->0}]], "Text"],

Cell["\<\
\[WarningSign] You may need to patch a bug before this will work.\
\>", "Text"],

Cell[TextData[{
  "In some versions of the Notation package one of the needed buttons needs \
to be fixed before the code below will work.To fix the problem use an ASC \
text editor (MS-Word will work on a PC) to edit the file \
(FullNotationPalette.nb).  The file is normally in the directory \n     \
WolframResearch\\Mathematica\\AddOns\\ExtraPackages\\Utilities.\nOnce you \
have the file open with a test editor delete the line shortly after the \
introductory comments containing the word CacheID.  Then use the Find feature \
to locate \"InsertPatternWrapper\" which will bring you to the code segment \
below.  Shortly after \n     ",
  StyleBox["StyleBox[\"InsertPatternWrapper\", ...\n     ",
    FontFamily->"Terminal"],
  "\nChange the code  \n   ",
  StyleBox["ButtonData:>TagBox[\"",
    FontFamily->"Terminal"],
  StyleBox["\\[PlaceHolder]",
    FontFamily->"Terminal",
    FontVariations->{"CompatibilityType"->0}],
  StyleBox["\", NotationPatternTag,  ...\n   ",
    FontFamily->"Terminal"],
  "\nto\n ",
  StyleBox[" ButtonData:>TagBox[\"",
    FontFamily->"Terminal"],
  StyleBox["\\[SelectionPlaceHolder]",
    FontFamily->"Terminal",
    FontVariations->{"CompatibilityType"->0}],
  StyleBox["\", NotationPatternTag, ...\n  \nAfter making these minor edits \
save the file.\n",
    FontFamily->"Terminal"]
}], "Text"],

Cell["Enter the input cell below.", "Text"],

Cell[BoxData[
    \(i\_\(_?IntegerTest\)\)], "Input",
  Editable->False,
  Evaluatable->False],

Cell["\<\
Select the entered expression, and depress the Symbolize[\
\[SelectionPlaceholder]] button in the Notation palette.\
\>", "Text"],

Cell[BoxData[
    RowBox[{"Symbolize", "[", 
      TagBox[\(i\_\(_?IntegerTest\)\),
        NotationBoxTag,
        TagStyle->"NotationTemplateStyle"], "]"}]], "Input",
  Editable->False,
  Evaluatable->False],

Cell["\<\
Select the subscript 
    _?IntegerTest
Depress the button for \"Full Notation Palette\".
When the Full Notation Palette comes up select \"InsertPatternWrapper\" under \
\"Wrapper Boxes\".\
\>", "Text"],

Cell[BoxData[
    RowBox[{"Symbolize", "[", 
      TagBox[
        SubscriptBox["i", 
          TagBox[\(_?IntegerTest\),
            NotationPatternTag,
            TagStyle->"NotationPatternWrapperStyle"]],
        NotationBoxTag,
        TagStyle->"NotationTemplateStyle"], "]"}]], "Input",
  Editable->False,
  Evaluatable->False],

Cell["\<\
Unfortunately it's rather difficult to use the RemoveSymbolize button to \
remove the definition above.\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Another modification of code Jason Harris provided is given below. \
\>", "Subsection"],

Cell["\<\
Once the Notation package is loaded evaluating the next cell will define a \
function (SubscriptSymbols) that takes a symbol as an argument, set up things \
so that if one evaluates SubscriptSymbols[vari], then (vari) with a \
non-negative integer subscript will be treated as a symbol.\
\>", "Text"],

Cell[BoxData[{
    \(\(\(IntegerTest[n_] := 
      ToExpression[n, StandardForm, IntegerQ[#] && NonNegative[#] &]\)\(\n\)
    \)\), "\[IndentingNewLine]", 
    \(\(Needs["\<Utilities`Notation`\>"];\)\), "\[IndentingNewLine]", 
    \(SubscriptSymbols[
        x_Symbol] := \((Symbolize[
          NotationBoxTag[
            SubscriptBox[ToString\ @\ x, 
              TagBox[RowBox[{"\<i_\>", "\<?\>", "\<IntegerTest\>"}], 
                NotationPatternTag]]]]; \
\[IndentingNewLine]\[IndentingNewLine]x\_\(i_?IntegerQ\) := 
          ToExpression\ @\ MakeBoxes[\ x\_i])\)\)}], "Input"],

Cell["\<\
The next cell causes (v) with non-negative integer subscript to be treated as \
a Symbol.\
\>", "Text"],

Cell[BoxData[
    \(SubscriptSymbols[v]\)], "Input"],

Cell[TextData[{
  "In the next cell only ",
  Cell[BoxData[
      \(TraditionalForm\`v\_2\)],
    SingleLetterItalics->False],
  " has the Head Symbol."
}], "Text"],

Cell[BoxData[
    \(\(v\_2 = 5;\)\)], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Head /@ {v\_2, v\_a, v\_1.5, v\_\(2/3\)}\)], "Input"],

Cell[BoxData[
    \({Integer, Subscript, Subscript, Subscript}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Still another modification of code Jason Harris provided is given below.\
\>", "Subsection"],

Cell[BoxData[{
    \(\(Needs["\<Utilities`Notation`\>"];\)\), "\n", 
    \(\(\(IntegerTest[n_] := 
      ToExpression[n, StandardForm, IntegerQ[#] && NonNegative[#] &]\)\(\n\)
    \)\ \), "\n", 
    \(\(\(SymbolTest[n_] := 
      ToExpression[n, 
        StandardForm, \((Head[#] === 
                Symbol && \(! NumericQ[#]\))\) &]\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(VariableQ[_Symbol?\((\(! NumericQ[#]\) &)\)] := True\), "\n", 
    \(\(\(VariableQ[__] := False\)\(\[IndentingNewLine]\)
    \)\), "\n", 
    \(\(\(Symbolize[
        NotationBoxTag[
          SubscriptBox[
            TagBox[RowBox\ @\ {"\<_\>", "\<?\>", "\<SymbolTest\>"}, 
              NotationPatternTag], 
            TagBox[RowBox\ @\ {"\<_\>", "\<?\>", "\<IntegerTest\>"}, 
              NotationPatternTag]]]];\)\(\n\)
    \)\), "\n", 
    \(\((symb_?VariableQ)\)\_\(i_?IntegerQ\) := 
      ToExpression\ @\ MakeBoxes[\ symb\_i]\)}], "Input"],

Cell["\<\
After evaluating the cells above the first three symbols below have the head \
Symbol while the others have the head Subscript.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Head /@ {a\_0, b\_1, \[Gamma]\_0, a\_d, b\_1.5, 
        c\_\(2/3\), \[Pi]\_2}\)], "Input"],

Cell[BoxData[
    \({Symbol, Symbol, Symbol, Subscript, Subscript, Subscript, 
      Subscript}\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Remove", "Section"],

Cell[TextData[{
  "Remove is discussed in the section on ",
  ButtonBox["Clear, ClearAll, Remove",
    ButtonData:>"Clear",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["TagBox", "Section"],

Cell[TextData[{
  " The feature named TagBox is essential to an improved Units package I \
wrote and have posted at  \n",
  ButtonBox["http://library.wolfram.com/database/MathSource/4283",
    ButtonData:>{
      URL[ "http://library.wolfram.com/database/MathSource/4283"], None},
    ButtonStyle->"Hyperlink"],
  "  \nThe usage message for TagBox is given below."
}], "Text",
  CellTags->"TagBox"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?TagBox\)\)], "Input"],

Cell[BoxData[
    RowBox[{"\<\"TagBox[boxes, tag] displays as boxes but maintains tag to \
guide the interpretation of boxes on input.\"\>", " ", 
      ButtonBox[
        StyleBox["More\[Ellipsis]",
          "SR"],
        ButtonData:>"TagBox",
        Active->True,
        ButtonStyle->"RefGuideLink"]}]], "Print",
  CellTags->"Info3242475074-9991669"]
}, Open  ]],

Cell["\<\
The second argument in TagBox is the head the should have rather than the \
head normally used for the boxes displayed.  Only one line of code is needed \
to demonstrateTagBox.\
\>", "Text"],

Cell[BoxData[
    \(MakeBoxes[UnitsWrapper[expr_, u_], 
        form : \((StandardForm | TraditionalForm)\)] := 
      TagBox[RowBox[{MakeBoxes[expr, form], "\< \>", MakeBoxes[u, form]}], 
        UnitsWrapper]\)], "Input"],

Cell["\<\
After evaluating the cell above the output of the next cell looks like \
Times[0,Second] which would evaluate to 0, but the fullform of the expression \
is actually UnitsWrapper[0, Second].\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(expr = UnitsWrapper[0, Second]\)], "Input"],

Cell[BoxData[
    TagBox[\(0\ Second\),
      UnitsWrapper]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(FullForm[expr]\)], "Input"],

Cell[BoxData[
    TagBox[
      StyleBox[\(UnitsWrapper[0, Second]\),
        ShowStringCharacters->True,
        NumberMarks->True],
      FullForm]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Table", "Section"],

Cell["\<\
When we use Table[expr, {i,imin,imax,di}] (imax-imin) doesn't have to be a \
multiple of di.  See the following example.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[a, x];\)\), "\[IndentingNewLine]", 
    \(Table[a + dx, {dx, 0, 3, \[Pi]/8}]\)}], "Input"],

Cell[BoxData[
    \({a, a + \[Pi]\/8, a + \[Pi]\/4, a + \(3\ \[Pi]\)\/8, a + \[Pi]\/2, 
      a + \(5\ \[Pi]\)\/8, a + \(3\ \[Pi]\)\/4, 
      a + \(7\ \[Pi]\)\/8}\)], "Output"]
}, Open  ]],

Cell["\<\
You can also give Table (imax, imin,di) that are not numeric as in the next \
line.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Table[i, {i, \(-x\), x, x/5}]\)], "Input"],

Cell[BoxData[
    \({\(-x\), \(-\(\(4\ x\)\/5\)\), \(-\(\(3\ x\)\/5\)\), \(-\(\(2\ x\)\/5\)\
\), \(-\(x\/5\)\), 0, x\/5, \(2\ x\)\/5, \(3\ x\)\/5, \(4\ x\)\/5, 
      x}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "However, if you want to make a long list ",
  ButtonBox["Range",
    ButtonData:>"Range",
    ButtonStyle->"Hyperlink"],
  ", can usually make in about half the time it takes Table to do the same.  \
In the lines below Range is used to make the lists in two examples above."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(a + Range[0, 3, \[Pi]/8]\)], "Input"],

Cell[BoxData[
    \({a, a + \[Pi]\/8, a + \[Pi]\/4, a + \(3\ \[Pi]\)\/8, a + \[Pi]\/2, 
      a + \(5\ \[Pi]\)\/8, a + \(3\ \[Pi]\)\/4, 
      a + \(7\ \[Pi]\)\/8}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(x\ Range[\(-1\), 1, 1/5]\)], "Input"],

Cell[BoxData[
    \({\(-x\), \(-\(\(4\ x\)\/5\)\), \(-\(\(3\ x\)\/5\)\), \(-\(\(2\ x\)\/5\)\
\), \(-\(x\/5\)\), 0, x\/5, \(2\ x\)\/5, \(3\ x\)\/5, \(4\ x\)\/5, 
      x}\)], "Output"]
}, Open  ]],

Cell["\<\
The iterator in Table can be omitted if it isn't used.  The next line makes a \
4x4 matrix of real numbers.  This can save considerable time.  For example \
Table[Random[],{1000},{100}] evaluates in less than half the time it takes to \
evaluate Table[Random[],{i,1000},{j,100}].\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Table[Random[], {4}, {4}]\)], "Input"],

Cell[BoxData[
    \({{0.846124395215748`, 0.20553058959405235`, 0.7259478461146106`, 
        0.31195897331650646`}, {0.651909519968063`, 0.17944590693890725`, 
        0.04179052766249576`, 0.12943515881329415`}, {0.11863007617499129`, 
        0.5355906901208307`, 0.35998880260491156`, 
        0.4470712907949094`}, {0.652190398570263`, 0.5527451600397344`, 
        0.8346696733450342`, 0.18532167799639657`}}\)], "Output"]
}, Open  ]],

Cell["\<\
The following construct can be used to make a list of lists that grow in \
length.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Table[1/\((x + y)\), {x, 6}, {y, x}] // TableForm\)], "Input"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {\(1\/2\), "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", \
"\<\"\"\>"},
          {\(1\/3\), \(1\/4\), "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", \
"\<\"\"\>"},
          {\(1\/4\), \(1\/5\), \(1\/6\), "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
          {\(1\/5\), \(1\/6\), \(1\/7\), \(1\/8\), "\<\"\"\>", "\<\"\"\>"},
          {\(1\/6\), \(1\/7\), \(1\/8\), \(1\/9\), \(1\/10\), "\<\"\"\>"},
          {\(1\/7\), \(1\/8\), \(1\/9\), \(1\/10\), \(1\/11\), \(1\/12\)}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      TableForm[ {{
        Rational[ 1, 2]}, {
        Rational[ 1, 3], 
        Rational[ 1, 4]}, {
        Rational[ 1, 4], 
        Rational[ 1, 5], 
        Rational[ 1, 6]}, {
        Rational[ 1, 5], 
        Rational[ 1, 6], 
        Rational[ 1, 7], 
        Rational[ 1, 8]}, {
        Rational[ 1, 6], 
        Rational[ 1, 7], 
        Rational[ 1, 8], 
        Rational[ 1, 9], 
        Rational[ 1, 10]}, {
        Rational[ 1, 7], 
        Rational[ 1, 8], 
        Rational[ 1, 9], 
        Rational[ 1, 10], 
        Rational[ 1, 11], 
        Rational[ 1, 12]}}]]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Thread", "Section"],

Cell["\<\
First an example of Thread is given in it's simplest form.  When used in this \
simple form Thread takes an expression with arguments that are all lists of \
equal length. \
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(Thread[f[{x1, y1}, {x2, y2}, {x3, y3}]]\)}], "Input"],

Cell[BoxData[
    \({f[x1, x2, x3], f[y1, y2, y3]}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell we see Thread automatically adapts if one or more elements \
aren't lists.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Thread[f[a, {y1, y2, y3}, {z1, z2, z3}, d]]\)], "Input"],

Cell[BoxData[
    \({f[a, y1, z1, d], f[a, y2, z2, d], f[a, y3, z3, d]}\)], "Output"]
}, Open  ]],

Cell["\<\
The next three examples have frequent applications.  They have the same form \
an example above but it may not look that way because infix operators \
(\[Rule], \[Equal]) are used.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Thread[{opt1, opt2, opt3, opt4} \[Rule] False]\)], "Input"],

Cell[BoxData[
    \({opt1 \[Rule] False, opt2 \[Rule] False, opt3 \[Rule] False, 
      opt4 \[Rule] False}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Thread[{w, x, y, z} \[Rule] {1.2, 3.2, 4.2, 5.2}]\)], "Input"],

Cell[BoxData[
    \({w \[Rule] 1.2`, x \[Rule] 3.2`, y \[Rule] 4.2`, 
      z \[Rule] 5.2`}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Thread[{w, x, y, z} \[Equal] {1.2, 3.2, 4.2, 5.2}]\)], "Input"],

Cell[BoxData[
    \({w == 1.2`, x == 3.2`, y == 4.2`, z == 5.2`}\)], "Output"]
}, Open  ]],

Cell["\<\
As indicated above Thread works over lists by default.  In the next example \
some of the expressions at level 1 of (lst1) aren't lists.  In a case such as \
this the expressions that aren't lists are copied.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(lst1 = 
        f[{x1, y1}, {x2, y2}, {x3, y3}, \n\t\tg[x4, y4], g[x5, y5], 
          g[x6, y6]];\)\), "\n", 
    \(Thread[lst1]\)}], "Input"],

Cell[BoxData[
    \({f[x1, x2, x3, g[x4, y4], g[x5, y5], g[x6, y6]], 
      f[y1, y2, y3, g[x4, y4], g[x5, y5], g[x6, y6]]}\)], "Output"]
}, Open  ]],

Cell["\<\
Thread will work over a different head if one is provided as a second \
argument.  The next line threads the same expression as the last one, but \
this time it threads over (g) instead of threading over list.  Similar to the \
last example expressions that didn't have the head (g) were copied.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Thread[lst1, g]\)], "Input"],

Cell[BoxData[
    \(g[f[{x1, y1}, {x2, y2}, {x3, y3}, x4, x5, x6], 
      f[{x1, y1}, {x2, y2}, {x3, y3}, y4, y5, y6]]\)], "Output"]
}, Open  ]],

Cell["\<\
In the next line Thread is provided a second and third argument.  The third \
argument tells Thread to only thread across the first three arguments.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(lst2 = 
        f[g[x1, y1], \ g[x2, y2], \ \n\t\tg[x3, y3], g[x4, y4], 
          g[x5, y5]];\)\), "\n", 
    \(Thread[lst2, g, 3]\)}], "Input"],

Cell[BoxData[
    \(g[f[x1, x2, x3, g[x4, y4], g[x5, y5]], 
      f[y1, y2, y3, g[x4, y4], g[x5, y5]]]\)], "Output"]
}, Open  ]],

Cell["\<\
In the next line Thread is given a third argument which says to only thread \
over arguments 2 through 4.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Thread[lst2, g, {2, 4}]\)], "Input"],

Cell[BoxData[
    \(g[f[g[x1, y1], x2, x3, x4, g[x5, y5]], 
      f[g[x1, y1], y2, y3, y4, g[x5, y5]]]\)], "Output"]
}, Open  ]],

Cell["\<\
Finally Thread is given (-3) as a third argument.  This means to only thread \
over the last three arguments.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Thread[lst2, g, \(-3\)]\)], "Input"],

Cell[BoxData[
    \(g[f[g[x1, y1], g[x2, y2], x3, x4, x5], 
      f[g[x1, y1], g[x2, y2], y3, y4, y5]]\)], "Output"]
}, Open  ]],

Cell["\<\
Roman Meader give the elegant program below which automatically threads \
listable functions across the head Equal.  The program is posted in \
MathSource under Enhancements, Algebraic, 0202-204.  The code for this \
enhancement is shown in the next cell.\
\>", "Text"],

Cell[BoxData[{
    \(\(Unprotect[Equal];\)\ \), "\n", 
    \(\(listableQ[f_]\  := \ MemberQ[Attributes[f], \ Listable];\)\), "\n", 
    \(\(Equal /: \ 
        lhs : \((f_Symbol)\)?
              listableQ[___, \ _Equal, \ ___]\  := \ \n\ \ \ Thread[
          Unevaluated[lhs], \ Equal];\)\), "\n", 
    \(\(Protect[Equal];\)\)}], "Input"],

Cell["\<\
The program above allows one to 'add' two equations in the next cell.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[x];\)\), "\n", 
    \(\(eqn1 = \((4 - 2  x + x\^2 == 0)\);\)\), "\n", 
    \(\(eqn2 = \((5 + 6  x == 0)\);\)\), "\n", 
    \(eqn1 + eqn2\)}], "Input"],

Cell[BoxData[
    \(9 + 4\ x + x\^2 == 0\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Trig option", "Section"],

Cell["\<\
The usage message for the built-in symbol Trig is shown below.\
\>", "Text",
  CellTags->"Trig option"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?Trig\)\)], "Input"],

Cell[BoxData[
    \("Trig is an option for algebraic manipulation functions which specifies \
whether trigonometric functions should be treated as rational functions of \
exponentials."\)], "Print",
  CellTags->"Info3242475074-3476455"]
}, Open  ]],

Cell["\<\
The built-in functions that have the Trig option are 
Apart, ApartSquareFree, Cancel, Coefficient, CoefficientList, Collect, \
Denominator, Expand, ExpandAll, ExpandDenominator, ExpandNumerator, Exponent, \
Factor, FactorList, FactorSquareFree, FactorSquareFreeList, FactorTerms, \
FactorTermsList, FullSimplify, Numerator, PolynomialGCD, PolynomialLCM, \
PolynomialMod, Resultant, Simplify, Together.

Simplify and FullSimplify have the default setting (Trig\[Rule]True) and all \
other functions above have the default setting (Trig\[Rule]False).  I \
searched through all available documentation and couldn't find a single \
example to demonstrate this option. The examples using the Trig option below \
were provided by Allan Hayes and Andrzej Kozlowski.  In each case the \
original expression would be returned if it were not for the use of (Trig\
\[Rule]True).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[x];\)\), "\[IndentingNewLine]", 
    \(Expand[Sin[2  x], Trig \[Rule] True]\)}], "Input"],

Cell[BoxData[
    \(2\ Cos[x]\ Sin[x]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Apart[Csc[2  x], Trig \[Rule] True]\)], "Input"],

Cell[BoxData[
    \(Cot[x]\/2 + Tan[x]\/2\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Cancel[Csc[x] Sin[2  x], Trig \[Rule] True]\)], "Input"],

Cell[BoxData[
    \(2\ Cos[x]\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["ToString", "Section"],

Cell["\<\
ToString has several options that I won't address here because I never became \
familiar with them. However, there is an interesting problem with converting \
a symbol to a string.  How can we convert a symbol to a string without \
letting the symbol evaluate?  ToString2 below does the job. Notice evaluation \
has to be prevented in two places here.\
\>", "Text",
  CellTags->"ToString"],

Cell[BoxData[{
    \(\(mass = 56;\)\), "\n", 
    \(ClearAll[ToString2]\), "\n", 
    \(\(Attributes[ToString2] = {HoldAll};\)\), "\n", 
    \(ToString2[a_] := ToString[Unevaluated[a]]\)}], "Input"],

Cell["\<\
In the next cell we get the characters used to make the Symbol mass without \
letting the symbol evaluate.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(InputForm[ToString2[mass]]\)], "Input"],

Cell["\"mass\"", "Output"]
}, Open  ]],

Cell["\<\
Sometimes you might want a function to convert one of it's arguments to a \
string before the argument evaluates. Then you might want your function to do \
something with the resulting string. In this case a pure function can be used \
to do the string conversion. The next cell defines a function Letters that \
returns the characters used to make the argument before the argument has a \
chance to evaluate.\
\>", "Text"],

Cell[BoxData[{
    \(\(ClearAll[Letters];\)\), "\[IndentingNewLine]", 
    \(\(Attributes[Letters] = {HoldAll};\)\), "\[IndentingNewLine]", 
    \(Letters[s_] := 
      Characters[\(Function[
            a, \ \ ToString[Unevaluated[a]], \ \ {HoldAll}]\)\ [
          s]\ \ \ \ ]\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Letters[mass]\)], "Input"],

Cell[BoxData[
    \({"m", "a", "s", "s"}\)], "Output"]
}, Open  ]],

Cell["Notice mass still has the value that was assigned above.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(mass\)], "Input"],

Cell[BoxData[
    \(56\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Tr", "Section"],

Cell["\<\
Tr computes the trace of a rectangular matrix.  Some examples are given in \
the next two cells.\
\>", "Text",
  CellTags->"Tr"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(Tr[{{a, b, c, d, e}, {v, w, x, y, z}}]\)}], "Input"],

Cell[BoxData[
    \(a + w\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(mtrx = {\[IndentingNewLine]{a1, a2, a3}, \[IndentingNewLine]{b1, b2, 
            b3}, \[IndentingNewLine]{c1, c2, 
            c3}\[IndentingNewLine]};\)\), "\[IndentingNewLine]", 
    \(Tr[mtrx, Max]\)}], "Input"],

Cell[BoxData[
    \(Max[a1, b2, c3]\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Computing the trace of a matrix is a common operation in linear algebra.  \
",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " generalizes the notion of trace to make it so we can compute Tr[vector].  \
When Tr is given a vector we get the sum of the elements.  The use of (Tr) in \
the next cell does the same thing as ",
  Cell[BoxData[
      \(TraditionalForm\`Plus @@ {a, b, c, d}\)]],
  ".  Rob Knapp showed us that when a vector is a packed array  ",
  Cell[BoxData[
      \(TraditionalForm\`\((Tr[vector]\ )\)\)]],
  " is much faster than ",
  Cell[BoxData[
      \(TraditionalForm\`\((Plus @@ vector)\)\)]],
  ".  My timing tests vary, but I found Tr to be at least 25 times faster \
when given a packed array."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Tr[{a, b, c, d, e}]\)], "Input"],

Cell[BoxData[
    \(a + b + c + d + e\)], "Output"]
}, Open  ]],

Cell["\<\
Next I give some examples that go down to different levels of a tensor.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(t1 = {{{{a1, b1}, {a2, b2}, {a3, b3}}, {{c1, d1}, {c2, d2}, {c3, 
                d3}}}, \[IndentingNewLine]{{{e1, f1}, {e2, f2}, {e3, 
                f3}}, {{g1, h1}, {g2, h2}, {g3, h3}}}};\)\), "\n", 
    \(Dimensions[t1]\)}], "Input"],

Cell[BoxData[
    \({2, 2, 3, 2}\)], "Output"]
}, Open  ]],

Cell["\<\
By default Tr works at the deepest level, which is level 4 in this example.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Tr[t1]\)], "Input"],

Cell[BoxData[
    \(a1 + h2\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Tr[t1, Plus, 4]\)], "Input"],

Cell[BoxData[
    \(a1 + h2\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(t1[\([1, 1, 1, 1]\)]\  + t1[\([2, 2, 2, 2]\)]\)], "Input"],

Cell[BoxData[
    \(a1 + h2\)], "Output"]
}, Open  ]],

Cell["Next Tr is used at level 3.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Tr[t1, Plus, 3]\)], "Input"],

Cell[BoxData[
    \({a1 + g2, b1 + h2}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(t1[\([1, 1, 1]\)] + t1[\([2, 2, 2]\)]\)], "Input"],

Cell[BoxData[
    \({a1 + g2, b1 + h2}\)], "Output"]
}, Open  ]],

Cell["Next Tr is used at level 2.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Tr[t1, Plus, 2]\)], "Input"],

Cell[BoxData[
    \({{a1 + g1, b1 + h1}, {a2 + g2, b2 + h2}, {a3 + g3, 
        b3 + h3}}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(t1[\([1, 1]\)] + t1[\([2, 2]\)]\)], "Input"],

Cell[BoxData[
    \({{a1 + g1, b1 + h1}, {a2 + g2, b2 + h2}, {a3 + g3, 
        b3 + h3}}\)], "Output"]
}, Open  ]],

Cell["Finally Tr is used at level 1.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Tr[t1, Plus, 1]\)], "Input"],

Cell[BoxData[
    \({{{a1 + e1, b1 + f1}, {a2 + e2, b2 + f2}, {a3 + e3, 
          b3 + f3}}, {{c1 + g1, d1 + h1}, {c2 + g2, d2 + h2}, {c3 + g3, 
          d3 + h3}}}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(t1[\([1]\)] + t1[\([2]\)]\)], "Input"],

Cell[BoxData[
    \({{{a1 + e1, b1 + f1}, {a2 + e2, b2 + f2}, {a3 + e3, 
          b3 + f3}}, {{c1 + g1, d1 + h1}, {c2 + g2, d2 + h2}, {c3 + g3, 
          d3 + h3}}}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Transpose", "Section"],

Cell["\<\
Transpose can be used on tensors as well as on matrices and the expressions \
don't have to be nested lists either.
By using the second argument of Transpose you can control the levels that are \
transposed.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[a, b, c, d, e, f, g, h];\)\), "\[IndentingNewLine]", 
    \(\(\(tt = {{{{1, a}, {2, b}}, {{3, c}, {4, d}}}, {{{5, e}, {6, f}}, {{7, 
                g}, {8, h}}}};\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(MatrixForm[tt]\)}], "Input"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"1", "a"},
                    {"2", "b"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"3", "c"},
                    {"4", "d"}
                    }], "\[NoBreak]", ")"}]},
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"5", "e"},
                    {"6", "f"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"7", "g"},
                    {"8", "h"}
                    }], "\[NoBreak]", ")"}]}
            }], "\[NoBreak]", ")"}],
      MatrixForm[ {{{{1, a}, {2, b}}, {{3, c}, {4, d}}}, {{{5, e}, {6, f}}, {{
        7, g}, {8, h}}}}]]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(\(Transpose[tt]\)\(//\)\(MatrixForm\)\(\ \ \)\)\)], "Input"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"1", "a"},
                    {"2", "b"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"5", "e"},
                    {"6", "f"}
                    }], "\[NoBreak]", ")"}]},
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"3", "c"},
                    {"4", "d"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"7", "g"},
                    {"8", "h"}
                    }], "\[NoBreak]", ")"}]}
            }], "\[NoBreak]", ")"}],
      MatrixForm[ {{{{1, a}, {2, b}}, {{5, e}, {6, f}}}, {{{3, c}, {4, d}}, {{
        7, g}, {8, h}}}}]]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(\(Transpose[
        tt, {1, 2, 4, 3}]\)\(//\)\(MatrixForm\)\(\ \ \)\)\)], "Input"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"1", "2"},
                    {"a", "b"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"3", "4"},
                    {"c", "d"}
                    }], "\[NoBreak]", ")"}]},
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"5", "6"},
                    {"e", "f"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"7", "8"},
                    {"g", "h"}
                    }], "\[NoBreak]", ")"}]}
            }], "\[NoBreak]", ")"}],
      MatrixForm[ {{{{1, 2}, {a, b}}, {{3, 4}, {c, d}}}, {{{5, 6}, {e, f}}, {{
        7, 8}, {g, h}}}}]]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(Transpose[tt, {2, 1, 4, 3}] // MatrixForm\)], "Input"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"1", "2"},
                    {"a", "b"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"5", "6"},
                    {"e", "f"}
                    }], "\[NoBreak]", ")"}]},
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"3", "4"},
                    {"c", "d"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"7", "8"},
                    {"g", "h"}
                    }], "\[NoBreak]", ")"}]}
            }], "\[NoBreak]", ")"}],
      MatrixForm[ {{{{1, 2}, {a, b}}, {{5, 6}, {e, f}}}, {{{3, 4}, {c, d}}, {{
        7, 8}, {g, h}}}}]]], "Output"]
}, Open  ]],

Cell["\<\
Tr will do the same as the following, but faster when done with a large \
expression.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Transpose[tt, {1, 1}] // MatrixForm\)], "Input"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"1"},
                    {"a"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"2"},
                    {"b"}
                    }], "\[NoBreak]", ")"}]},
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"7"},
                    {"g"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"8"},
                    {"h"}
                    }], "\[NoBreak]", ")"}]}
            }], "\[NoBreak]", ")"}],
      MatrixForm[ {{{1, a}, {2, b}}, {{7, g}, {8, h}}}]]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Unevaluated", "Section"],

Cell["\<\
When Unevaluated[expr] is an argument of a function (expr) is given to the \
function it is an argument of without evaluating.  Consider the example in \
the next cell.  If it were not for the use of Unevaluated the sum would \
evaluate to 30 which has the head Integer.  Instead the head Plus is \
returned.\
\>", "Text",
  CellTags->"Unevaluated"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Head[Unevaluated[2 + 3 + 5\^2]]\)], "Input"],

Cell[BoxData[
    \(Plus\)], "Output",
  GeneratedCell->False,
  CellAutoOverwrite->False]
}, Open  ]],

Cell["\<\
Often times when we make a function with a holding attribute (e.g.  HoldAll, \
HoldRest, HoldFirst) we have to use Unevaluated in the definition of the \
function.  Consider the function in the next cell that converts it's argument \
to a string before the string can evaluate.

Here the HoldAll attribute prevents MakeString from evaluating it's argument. \
 However, we also need to use Unevaluated to ensure ToString doesn't evaluate \
it's argument.\
\>", "Text"],

Cell[BoxData[{
    \(ClearAll[MakeString]\), "\n", 
    \(\(Attributes[MakeString] = {HoldAll};\)\), "\n", 
    \(MakeString[a_] := 
      ToString[Unevaluated[a]] <> "\< is a string\>"\)}], "Input"],

Cell["\<\
The next cell demonstrates the MakeString function.  We see that (mass) is \
converted to a string even though the symbol has a numeric value assigned to \
it.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(mass = 56;\)\), "\[IndentingNewLine]", 
    \({mass, MakeString[mass]}\)}], "Input"],

Cell[BoxData[
    \({56, "mass is a string"}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "For more understanding of Unevaluated see examples in my explanation of \
the ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " ",
  ButtonBox["evaluation process",
    ButtonData:>"Unevaluated-Advanced",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Update", "Section"],

Cell[TextData[{
  "To see a situation where use of Update is needed see the section on ",
  ButtonBox["Condition",
    ButtonData:>"Condition",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text",
  CellTags->"Update"]
}, Closed]],

Cell[CellGroupData[{

Cell["UpValues", "Section"],

Cell["\<\
Normally Cosh[x]+Sinh[x] doesn't evaluate to Exp[x] but there are different \
ways of making the kernel automatically perform this simplification.  A few \
ways to do this are discussed in the cells below.  Before we begin the next \
cell should be evaluated to unprotect the functions that will be modified.\
\>", "Text",
  CellTags->"Upvalues"],

Cell[BoxData[{
    \(\(Unprotect[Plus, Cosh, Sinh];\)\), "\[IndentingNewLine]", 
    \(Clear[Plus, Cosh, Sinh, t, x]\)}], "Input"],

Cell[TextData[{
  "Once Plus is unprotected evaluating the next cell will cause an expression \
such as ",
  Cell[BoxData[
      \(StandardlForm\`Cosh[x] + Sinh[x]\)]],
  " to evaluate to Exp[z]."
}], "Text"],

Cell[BoxData[
    \(Cosh[z_] + Sinh[z_] := Exp[z]\)], "Input"],

Cell["The rule above has the desired effect in the cell below.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(1\/\(1 + Cosh[t + 1.5] + Sinh[t + 1.5]\)\)], "Input"],

Cell[BoxData[
    \(1\/\(1 + \[ExponentialE]\^\(\(\(1.5`\)\(\[InvisibleSpace]\)\) + \
t\)\)\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "However, Plus is a function that's used very often, and the code above \
will slow down evaluation of Plus.  Actually it doesn't slow down Plus as \
much as one might think.  In  ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " versions 3 and 4 the functions Plus and Times apply built in rules before \
user defined rules.  So when the next cell evaluates the kernel uses a \
built-in rule to compute (2+3) before it checks for the above user defined \
identity.  Likewise built-in rules are used for (3+2/3), and (x+2 x), so here \
too the kernel never gets a chance to see if the user defined rule above \
should be used.  As a result the user defined rule had no effect on the speed \
of evaluating the cell below."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(\@\(2 + 3\)\) Exp[3 + 2/3] \((x + 2\ x)\)\)], "Input"],

Cell[BoxData[
    \(3\ \@5\ \[ExponentialE]\^\(11/3\)\ x\)], "Output"]
}, Open  ]],

Cell["\<\
On the other hand consider evaluation of the next cell after the above \
identity for Cosh[z_]+Sinh[z_] is in the kernel.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Exp[3 + 2/3 + x] \(\@\(2 + 3 + x\)\) Sin[x + 2\ x + y]\)], "Input"],

Cell[BoxData[
    \(\[ExponentialE]\^\(11\/3 + x\)\ \@\(5 + x\)\ Sin[3\ x + y]\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "When evaluating the cell above the kernel uses a built-in rule to evaluate \
 ",
  Cell[BoxData[
      \(TraditionalForm\`\((3 + 2/3 + x\[LongRightArrow]11/3 + x\ )\)\)]],
  ", then it checks to see if the user defined rule for ",
  Cell[BoxData[
      \(TraditionalForm\`Sinh[z_] + Cosh[z_]\)]],
  " applies to ",
  Cell[BoxData[
      \(TraditionalForm\`\((11/3 + x)\)\)]],
  ".  Later in the evaluation the kernel uses a built-in rule to evaluate ",
  Cell[BoxData[
      \(TraditionalForm\`\((2 + 3 + x\ \[LongRightArrow]5 + x)\)\)]],
  " and it checks to see if the user defined rule for ",
  Cell[BoxData[
      \(TraditionalForm\`Cosh[z_] + Sinh[z_]\)]],
  " applies to ",
  Cell[BoxData[
      \(TraditionalForm\`\((5 + x)\)\)]],
  ".  Still later in the evaluation the kernel uses a built-in rule to \
evaluate ",
  Cell[BoxData[
      \(TraditionalForm\`\((x + 2\ x + y\ \[LongRightArrow]3\ x + y)\)\)]],
  " and it checks to see if the user defined rule for ",
  Cell[BoxData[
      \(TraditionalForm\`Cosh[z_] + Sinh[z_]\)]],
  " applies to ",
  Cell[BoxData[
      \(TraditionalForm\`\((3\ x + y)\)\)]],
  ".  In this case the user defined rule for ",
  Cell[BoxData[
      \(TraditionalForm\`Cosh[z_] + Sinh[z_]\)]],
  " causes degradation in the time it takes to evaluate the last example even \
though the functions Cosh, Sinh appear nowhere in the expression.\n\nThe user \
defined rule above was a \"DownValue\" for Plus as can be seen from the next \
cell.  When the rule was entered above the kernel determined that Plus is the \
head of ",
  Cell[BoxData[
      \(StandardlForm\`Cosh[z_] + Sinh[z_]\)]],
  " and that is why it was associated with Plus."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(DownValues[Plus]\)], "Input"],

Cell[BoxData[
    \({HoldPattern[
          Cosh[z_] + Sinh[z_]] \[RuleDelayed] \[ExponentialE]\^z}\)], "Output"]
}, Open  ]],

Cell["\<\
Instead of associating the above identity with Plus (an often used function) \
we can associate the identity with a head one level deeper than Plus.  In \
this case we can associate the identity with Cosh and/or Sinh as an UpValue.  \
Before proceeding we should do away with the above definition.\
\>", "Text"],

Cell[BoxData[
    \(Clear[Plus, Cosh, Sinh]\)], "Input"],

Cell[TextData[{
  "Evaluating the next cell will associate the identity with Sinh as an \
UpValue.  For more on UpValues see The ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " Book section ",
  ButtonBox["2.4.10",
    ButtonStyle->"MainBookLink"],
  "."
}], "Text"],

Cell[BoxData[
    \(Sinh /: Cosh[z_] + Sinh[z_] := Exp[z]\)], "Input"],

Cell["\<\
By starting the line above with Sinh/:  the kernel knows to associate the \
identity with Sinh.  Once the previous cell is evaluated the next cell can be \
used to see that the identity is associated with Sinh.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(UpValues[Sinh]\)], "Input"],

Cell[BoxData[
    \({HoldPattern[
          Cosh[z_] + Sinh[z_]] \[RuleDelayed] \[ExponentialE]\^z}\)], "Output"]
}, Open  ]],

Cell["\<\
At first one might guess that the above Identity would cause the next cell to \
change into Exp[3.5] which then evaluates to 33.1155.  However Cosh[3.5] \
evaluates to 16.5728, and Sinh[3.5] evaluates to 16.5426 before the kernel \
checks for the above identity.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Cosh[3.5] + Sinh[3.5]\)], "Input"],

Cell[BoxData[
    \(33.11545195869231`\)], "Output"]
}, Open  ]],

Cell["\<\
Now when the next line evaluates the above identity is used, but only after \
the kernel finds it can't do anything with Cosh[3] or Sinh[3].\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Cosh[3] + Sinh[3]\)], "Input"],

Cell[BoxData[
    \(\[ExponentialE]\^3\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Now consider evaluation of the expression below.  Here the above identity \
is still stored in UpValues[Sinh] and not  in DownValues[Plus] or anywhere \
else.  Since the identity isn't stored with Plus there is no impact on the \
evaluation of ",
  Cell[BoxData[
      \(StandardlForm\`\((x + 1)\)\)]],
  ", ",
  Cell[BoxData[
      \(StandardlForm\`\(\(Cosh[x + 1]\)\(\ \)\)\)]],
  ", ",
  Cell[BoxData[
      \(StandardlForm\`\((3 + Cosh[x + 1]\ )\)\)]],
  " or ",
  Cell[BoxData[
      \(StandardlForm\`\((3 + Cosh[x + 1]\ )\)\^\(-1\)\)]],
  ".  In fact the above identity has no impact on the evaluation of  Sinh[3]. \
 However, when the kernel evaluates (2 x Sinh[3]) it checks for user defined \
UpValues of Integer (the head of 2), but there are none.  Then the kernel \
checks for user defined UpValues of (x), but there are none.  Then the kernel \
checks the for user defined UpValues of Sinh, and there is an UpValue.  At \
that point the kernel must see if the UpValue for Sinh can be used, but finds \
that it can't.  Then the kernel checks for built in UpValues for Integer, x, \
Sinh and either finds none or none that apply to  ",
  Cell[BoxData[
      \(StandardlForm\`\((2\ x\ Sinh[3]\ )\)\)]],
  ".  Then the kernel checks for user defined DownValues for Times and finds \
none.  Finally the kernel checks for built in DownValues for Times, and \
either finds none or none that apply to ",
  Cell[BoxData[
      \(TraditionalForm\`\((2\ x\ Sinh[3])\)\)]],
  ".  At that point evaluation is complete."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(2\ x\ Sinh[3]\)\/\(3 + Cosh[x + 1]\)\)], "Input"],

Cell[BoxData[
    \(\(2\ x\ Sinh[3]\)\/\(3 + Cosh[1 + x]\)\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Storing the identity for ",
  Cell[BoxData[
      \(TraditionalForm\`Cosh[z_] + Sinh[z_]\)]],
  " with UpValues[Sinh] should have much less impact on the evaluation of \
typical expressions than storing it with DownValues[Plus].  However, this \
identity will have an impact on the evaluation of many expressions that \
include Sinh, and this is likely the reason why Wolfram Research didn't \
include it as part of the default evaluation process.\n\nEvaluating the next \
cell will remove any the above definitions."
}], "Text"],

Cell[BoxData[
    \(Clear[Plus, Cosh, Sinh]\)], "Input"],

Cell[TextData[{
  "Instead of storing the above identity with UpValues[Sinh] one could store \
it with UpValues[Cosh] using the next cell.  The only difference this will \
make is that it will slow down evaluation some ",
  Cell[BoxData[
      \(TraditionalForm\`Cosh[z_]\)]],
  " expressions, but never slow down evaluation of ",
  Cell[BoxData[
      \(TraditionalForm\`Sinh[_]\)]],
  " expressions.  Starting the next line with Cosh/:  tells the kernel to \
store the identity with UpValues[Cosh]."
}], "Text"],

Cell[BoxData[
    \(Cosh /: Cosh[z_] + Sinh[z_] := Exp[z]\)], "Input"],

Cell[TextData[{
  "Still another way to store this identity is to use the next line.  That \
will store the identity with UpValues for each symbol at level 1 of ",
  Cell[BoxData[
      \(StandardlForm\`\((Cosh[z_] + Sinh[z_]\ )\)\)]],
  ".  In this case Plus is at level 0 and Sinh, Cosh are the only symbols at \
level 1.  This approach will slow down evaluation of Sinh[_] and Cosh[_] \
expressions with no advantage over storing the identity only with \
UpValues[Sinh], or only with UpValues[Cosh]."
}], "Text"],

Cell[BoxData[
    \(Cosh[z_] + Sinh[z_] ^:= Exp[z]\)], "Input"],

Cell[TextData[{
  " All example above used UpValues with delayed assignment.  ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " provides ways to make UpValues with immediate assignment, but one should \
",
  StyleBox["be very cautious",
    FontWeight->"Bold"],
  " of them.  This is done in the cells below.  In each case then variable \
(z) is used for the named pattern on the left side, but when (z) has a global \
value this global value will be used on the right side."
}], "Text"],

Cell[BoxData[{
    \(\(z = 7 + 5\ I;\)\), "\[IndentingNewLine]", 
    \(Clear[Plus, \ Sinh, \ Cosh]\), "\[IndentingNewLine]", 
    \(\(Sinh /: Cosh[z_] + Sinh[z_] = Exp[z];\)\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\@x + Cosh[3] + Sinh[z]\)], "Input"],

Cell[BoxData[
    \(\@x + Cosh[3] + Sinh[7 + 5\ \[ImaginaryI]]\)], "Output"]
}, Open  ]],

Cell["\<\
Instead a definition such as the one above should be stored as an UpValue \
with delayed assignment as I do in the next cell.  When delayed assignment is \
used a global value assigned to (z) will not affect the results.\
\>", "Text"],

Cell[BoxData[{
    \(\(Clear[Plus, \ Sinh, Cosh];\)\), "\[IndentingNewLine]", 
    \(Sinh /: Cosh[z_] + Sinh[z_] := Exp[z]\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\@x + Cosh[3] + Sinh[3]\)], "Input"],

Cell[BoxData[
    \(\[ExponentialE]\^3 + \@x\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
We can't assign a definition with a symbol that's too deep inside an \
expression.\
\>", "Subsection"],

Cell[TextData[{
  "We can use UpValues to store the identity ",
  Cell[BoxData[
      \(StandardlForm\`\((Sin[z_]\^\(\(\ \)\(2\)\) + 
            Cos[z_]\^\(\(\ \)\(2\)\) = 1)\)\)]],
  ".  However, this identity can't be stored with the UpValues[Sin] or \
UpValues[Cos] because Sin, Cos are too deep in the expression ",
  Cell[BoxData[
      \(StandardlForm\`\((\ 
        Sin[z_]\^\(\(\ \)\(2\)\) + Cos[z_]\^\(\(\ \)\(2\)\)\ )\)\)]],
  ".  UpValues must be stored with a symbol that appears at level 1.  In this \
case Plus is at level 0, Power is at level 1, Sin, Cos, Integer are at level \
2.  The identity can be stored in  UpValues[Power] as in the next cell."
}], "Text"],

Cell[BoxData[{
    \(\(Unprotect[Plus, Power];\)\), "\[IndentingNewLine]", 
    \(\(Clear[Plus, Power, b];\)\), "\[IndentingNewLine]", 
    \(\(Power /: Sin[z_]\^2 + Cos[z_]\^2 = 1;\)\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Sin[b + \[Pi]/6]\^2 + Cos[b + \[Pi]/6]\^2\)], "Input"],

Cell[BoxData[
    \(1\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(UpValues[Power]\)], "Input"],

Cell[BoxData[
    \({HoldPattern[Cos[z_]\^2 + Sin[z_]\^2] \[RuleDelayed] 1}\)], "Output"]
}, Open  ]],

Cell["\<\
We can also store the identity with DownValues[Plus] using the next cell.\
\>", "Text"],

Cell[BoxData[{
    \(\(Unprotect[Power, Plus];\)\), "\n", 
    \(Clear[Plus, Power, a]\), "\n", 
    \(\(Sin[z_]\^2 + Cos[z_]\^2 = 1;\)\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Sin[a + \[Pi]/3]\^2 + Cos[a + \[Pi]/3]\^2\)], "Input"],

Cell[BoxData[
    \(1\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(DownValues[Plus]\)], "Input"],

Cell[BoxData[
    \({HoldPattern[Cos[z_]\^2 + Sin[z_]\^2] \[RuleDelayed] 1}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Before continuing you might want to evaluate the following to remove all \
definitions made above.\
\>", "Subsection"],

Cell[BoxData[{
    \(\(Unprotect[Plus, Cosh, Sinh, Power];\)\), "\[IndentingNewLine]", 
    \(\(Clear[Plus, Cosh, Sinh, Power];\)\), "\[IndentingNewLine]", 
    \(\(Protect[Plus, Cosh, Sinh, Power];\)\)}], "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Verbatim", "Section"],

Cell["The Verbatim usage message is shown below.", "Text",
  CellTags->"Verbatim"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?Verbatim\)\)], "Input"],

Cell[BoxData[
    RowBox[{"\<\"Verbatim[expr] represents expr in pattern matching, \
requiring that expr be matched exactly as it appears, with no substitutions \
for blanks or other transformations.\"\>", " ", 
      ButtonBox[
        StyleBox["More\[Ellipsis]",
          "SR"],
        ButtonData:>"Verbatim",
        Active->True,
        ButtonStyle->"RefGuideLink"]}]], "Print",
  CellTags->"Info3247899362-8348536"]
}, Open  ]],

Cell["\<\
Verbatim[expr] is used when you want the pattern matcher to ignore the normal \
meaning of a pattern matching feature.  To demonstrate the next cell shows \
the FullForm of some patterns.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(FullForm[{x_, y_List}]\)], "Input"],

Cell[BoxData[
    TagBox[
      StyleBox[\(List[Pattern[x, Blank[]], Pattern[y, Blank[List]]]\),
        ShowSpecialCharacters->False,
        ShowStringCharacters->True,
        NumberMarks->True],
      FullForm]], "Output"]
}, Open  ]],

Cell["\<\
The attempt to delete all such patterns in the next cell fails because the \
pattern matcher treats the use of  \"Pattern\" here as a pattern matching \
construct instead of an actual form to search for.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(DeleteCases[{x_, y_List, 3, 4, 5}, Pattern[_, _Blank]]\)], "Input"],

Cell[BoxData[
    \({x_, y_List, 3, 4, 5}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell the pattern matcher knows to ignore the meaning of \"Pattern\
\" so (x_) and (y_List) are deleted.  In this case only Pattern was wrapped \
in Verbatim so the pattern matcher did consider the meaning of (_) and \
(_Blank).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(DeleteCases[{x_, y_List, 3, 4, 
        5}, \(Verbatim[Pattern]\)[_, _Blank]]\)], "Input"],

Cell[BoxData[
    \({3, 4, 5}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next example (Pattern[_,_Blank]) is wrapped in Verbatim so only that \
literal expression is deleted.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(data = {x_, y_List, 3, 4, 5, Pattern[_, _Blank], 6, 
          7};\)\), "\[IndentingNewLine]", 
    \(DeleteCases[data, Verbatim[Pattern[_, _Blank]]]\)}], "Input"],

Cell[BoxData[
    \({x_, y_List, 3, 4, 5, 6, 7}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Suppose you're given a list and want to get the element that matches the \
pattern (opt1\[Rule]_).  The attempt in the next cell doesn't work because \
use of a rule as the second argument in ",
  ButtonBox["Cases",
    ButtonData:>"Cases",
    ButtonStyle->"Hyperlink"],
  " has special meaning."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Cases[{1 + x, opt1 \[Rule] val, opt2 \[Rule] val2, opt1}, 
      opt1 \[Rule] _]\)], "Input"],

Cell[BoxData[
    \({_}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell Verbatim makes Cases treat it's second argument as a form to \
search for instead of replacing (opt1) with (_).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Cases[{1 + x, opt1 \[Rule] val1, opt2 \[Rule] val2, 
        opt1}, \(Verbatim[Rule]\)[opt1, _]\ \ ]\)], "Input"],

Cell[BoxData[
    \({opt1 \[Rule] val1}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["$OutputForms", "Section"],

Cell["The $OutputForms usage message is shown below.", "Text",
  CellTags->"$OutputForms"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(?$OutputForms\)\)], "Input"],

Cell[BoxData[
    \("$OutputForms is a list of the formatting functions that get stripped \
off when wrapped around the output."\)], "Print",
  CellTags->"Info3240648369-5591269"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(m = 
      MatrixForm[Inverse[{{1, 2, 0}, {0, 2, 3}, {1, 2, \(-1\)}}]]\)], "Input"],

Cell[BoxData[
    TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {"4", \(-1\), \(-3\)},
            {\(-\(3\/2\)\), \(1\/2\), \(3\/2\)},
            {"1", "0", \(-1\)}
            }], "\[NoBreak]", ")"}],
      Function[ BoxForm`e$, 
        MatrixForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell["Notice Head[m] returns MatrixForm, but Head[%] retunrs List.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \({Head[%], Head[m]}\)], "Input"],

Cell[BoxData[
    \({List, MatrixForm}\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell removes MatrixForm from the list assigned to $OutputForms.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Unprotect[$OutputForms];\)\), "\[IndentingNewLine]", 
    \($OutputForms = Complement[$OutputForms, {MatrixForm}]\)}], "Input"],

Cell[BoxData[
    \({AccountingForm, BaseForm, CForm, DisplayForm, EngineeringForm, 
      FortranForm, FullForm, InputForm, MathMLForm, NumberForm, OutputForm, 
      PaddedForm, ScientificForm, Shallow, Short, StandardForm, StyleForm, 
      TableForm, TeXForm, TextForm, TraditionalForm, TreeForm}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(m = 
      MatrixForm[Inverse[{{1, 2, 0}, {0, 2, 3}, {1, 2, \(-1\)}}]]\)], "Input"],

Cell[BoxData[
    TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {"4", \(-1\), \(-3\)},
            {\(-\(3\/2\)\), \(1\/2\), \(3\/2\)},
            {"1", "0", \(-1\)}
            }], "\[NoBreak]", ")"}],
      Function[ BoxForm`e$, 
        MatrixForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell["\<\
Now that MatrixForm isn't in the list returned by $OutputForms, we get \
MatrixForm for Head[%] and Head[m].\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \({Head[%], Head[m]}\)], "Input"],

Cell[BoxData[
    \({MatrixForm, MatrixForm}\)], "Output"]
}, Open  ]],

Cell["The next cell restores the default setting of $OutputForms.", "Text"],

Cell[BoxData[
    \(\($OutputForms = Union[$OutputForms, {MatrixForm}];\)\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["$PreRead, $Pre, $Post, $PrePrint", "Section"],

Cell[TextData[{
  "The evaluation of expressions can be affected by definitions assigned to \
symbols \n$PreRead, MakeExpression, $Pre, $Post, $PrePrint, Format, \
MakeBoxes. The process of going from input cell to output cell is as follows. \
 Each of these steps requires evaluation of an expression, and that ",
  ButtonBox["evaluation process",
    ButtonData:>"Evaluation-Process",
    ButtonStyle->"Hyperlink"],
  " is explained in a later section.\n\n   (1)  Input Boxes are processed \
using $PreRead.\n   (2)  The boxes $PreRead returns are converted to an \
expression using ",
  ButtonBox["MakeExpression",
    ButtonStyle->"RefGuideLink"],
  ".\n   (3)  The expression MakeExpression returns is processed using $Pre.\n\
   (4)  The expression $Pre returns is evaluated.\n   (5)  The expression \
returned by evaluation is processed by $Post.\n   (6)  The expression $Post \
returns is assigned to (%n) and stored in DownValues[Out].\n   (7)  The \
expression that was assigned to (%n) is processed by $PrePrint.\n   (8)  The \
expression $PrePrint returns is processed by definitions made using ",
  ButtonBox["Format",
    ButtonData:>"Format",
    ButtonStyle->"Hyperlink"],
  ".\n   (9)  The expression Format returns is converted to boxes using ",
  ButtonBox["MakeBoxes",
    ButtonData:>"MakeBoxes",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text",
  CellTags->"$Pre;$Post"],

Cell[CellGroupData[{

Cell["$PreRead", "Subsection"],

Cell[TextData[{
  "Consider the input in the next cell.  The 2-D representation of the cell \
is stored as \nSqrtBox[\n      RowBox[{\n        FractionBox[\"35\", \
\"100\"], \"+\", \"1\"}]]\n        \nBefore ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " can evaluate this input it converts it to the expression\n     \
Power[Plus[Times[35,Power[100,-1]],1],Rational[1,2]]\n     \nHowever, before \
the boxes are converted to this expression ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " checks to see if the boxes should be changed using $PreRead."
}], "Text"],

Cell[BoxData[
    \(\@\(1 + 35\/100\)\)], "Input"],

Cell[TextData[{
  "The next cell cause $Pre to change the box representation of ",
  Cell[BoxData[
      \(TraditionalForm\`num\/den\)]],
  "into the box representation of MyDivide[num,den]."
}], "Text"],

Cell[BoxData[{
    \(\(Clear[$PreRead, $Pre, $Post, $PrePrint, 
        MyDivide];\)\), "\[IndentingNewLine]", 
    \(\($PreRead = \((# /. 
              FractionBox[num_, den_] \[RuleDelayed] 
                RowBox[{"\<MyDivide\>", "\<[\>", 
                    RowBox[{num, "\<,\>", 
                        den}], "\<]\>"}])\) &;\)\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\@\(1 + 35\/100\)\)], "Input"],

Cell[BoxData[
    \(\@\(1 + MyDivide[35, 100]\)\)], "Output"]
}, Open  ]],

Cell["The next cell removes the above $PreRead assignment.", "Text"],

Cell[BoxData[
    \($PreRead =. \)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["$Pre", "Subsection"],

Cell["\<\
In the next cell $Pre is given the input before evaluation and changed any \
occurance of 100 into the symbol Hundred.  Use of Unevaluated and HoldAll is \
needed to ensure the expression doesn't evaluate before making the \
replacement.\
\>", "Text"],

Cell[BoxData[{
    \(\(Clear[$PreRead, $Pre, $Post, $PrePrint, 
        Hundred];\)\), "\[IndentingNewLine]", 
    \(\($Pre = 
        Function[expr, 
          Unevaluated[
              expr] /. \((100 \[Rule] Hundred)\), {HoldAll}];\)\)}], "Input"],

Cell["\<\
Below we see that $Pre makes the replacement before making the calulation  \
(35/100)\[LongRightArrow](7/20).\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\@\(35\/100 + 1\)\)], "Input"],

Cell[BoxData[
    \(\@\(1 + 35\/Hundred\)\)], "Output"]
}, Open  ]],

Cell["The next cell removes the above $Pre assignment.", "Text"],

Cell[BoxData[
    \($Pre =. \)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["$Post", "Subsection"],

Cell["\<\
In the next cell we make $Post display matrices in MatrixForm and all other \
results are not affected. The symbols returned by evaluating $OutputForms get \
special treatment in that they affect the printed output, but not the results \
assigned to (%n). By default $OutputForms includes MatrixForm, TableForm, \
ScientificForm and other built-in formatting functions.  Provided MatrixForm \
is in the list returned by $OutputForms we could have assigned the definition \
below to $PrePrint and got the same results.\
\>", "Text"],

Cell[BoxData[{
    \(\(Clear[$PreRead, $Pre, $Post, $PrePrint];\)\), "\n", 
    \(\($Post = \((# /. 
              mtrx_?MatrixQ \[RuleDelayed] 
                MatrixForm[mtrx])\) &;\)\)}], "Input"],

Cell["\<\
After making the assignment above the output of the following is \
automatically displayed in MatrixForm.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(mtrx = {{1, 2, 0}, {0, 2, 3}, {1, 
          2, \(-1\)}}\), "\[IndentingNewLine]", 
    \({Head[%], Head[mtrx]}\)}], "Input"],

Cell[BoxData[
    TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {"1", "2", "0"},
            {"0", "2", "3"},
            {"1", "2", \(-1\)}
            }], "\[NoBreak]", ")"}],
      Function[ BoxForm`e$, 
        MatrixForm[ BoxForm`e$]]]], "Output"],

Cell[BoxData[
    \({List, List}\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell makes it so MatrixForm isn't included in the $OutputForms \
list\
\>", "Text"],

Cell[BoxData[{
    \(\(Unprotect[$OutputForms];\)\), "\[IndentingNewLine]", 
    \(\($OutputForms = Complement[$OutputForms, {MatrixForm}];\)\)}], "Input"],

Cell["\<\
When MatrixForm isn't in the $OutputForms list Head[%] below is MatrixForm.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(mtrx = {{1, 2, 0}, {0, 2, 3}, {1, 
          2, \(-1\)}}\), "\[IndentingNewLine]", 
    \({Head[%], Head[mtrx]}\)}], "Input"],

Cell[BoxData[
    TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {"1", "2", "0"},
            {"0", "2", "3"},
            {"1", "2", \(-1\)}
            }], "\[NoBreak]", ")"}],
      Function[ BoxForm`e$, 
        MatrixForm[ BoxForm`e$]]]], "Output"],

Cell[BoxData[
    \({MatrixForm, List}\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell restores the default setting of $OutputForms and removes the \
above $Post setting.\
\>", "Text"],

Cell[BoxData[{
    \(\($OutputForms = Union[$OutputForms, {MatrixForm}];\)\), "\n", 
    \(\(Clear[$PreRead, $Pre, $Post, $PrePrint];\)\)}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["$PrePrint", "Subsection"],

Cell["\<\
$Post and $PrePrint are very similar and are normally used to affect the way \
output is displayed.  For example in the next cell we make $PrePrint display \
matrices in MatrixForm and all other results are not affected. $PrePrint is \
used after results are assigned to %n, so use of $PrePrint will not affect \
assignments to (%n) regardless of what is assigned to $OutputForms.\
\>", "Text"],

Cell[BoxData[{
    \(\(Clear[$PreRead, $Pre, $Post, $PrePrint];\)\), "\n", 
    \(\($PrePrint = \((# /. 
              mtrx_?MatrixQ \[RuleDelayed] 
                MatrixForm[mtrx])\) &;\)\)}], "Input"],

Cell["\<\
After making the assignment above the output of the following is \
automatically displayed in MatrixForm. Because of the way $PrePrint works we \
get List for Head[%] below regardless of what is assigned to $OutputForms.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(mtrx = {{1, 2, 0}, {0, 2, 3}, {1, 
          2, \(-1\)}}\), "\[IndentingNewLine]", 
    \({Head[%], Head[mtrx]}\)}], "Input"],

Cell[BoxData[
    TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {"1", "2", "0"},
            {"0", "2", "3"},
            {"1", "2", \(-1\)}
            }], "\[NoBreak]", ")"}],
      Function[ BoxForm`e$, 
        MatrixForm[ BoxForm`e$]]]], "Output"],

Cell[BoxData[
    \({List, List}\)], "Output"]
}, Open  ]],

Cell[BoxData[
    \(Clear[$PreRead, $Pre, $Post, $PrePrint]\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["$Post versus  $PrePrint  (a closer look)", "Subsection"],

Cell["Consider the use of $PrePrint in the next cell.", "Text"],

Cell[BoxData[{
    \(\(Clear[$PreRead, $Pre, $Post, $PrePrint];\)\), "\n", 
    \(\($PrePrint = \((# /. 
              x_?NumericQ \[RuleDelayed] x + 1)\) &;\)\)}], "Input"],

Cell["\<\
After making the previous assignment to $PrePrint, the next output shows (1+\
\[Pi]) instead of simply \[Pi].  There is clearly no pratical use for this \
sort of thing.  I am only doing this to illustrate the difference between \
$Post and $PrePrint.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(x = \[Pi]\)], "Input"],

Cell[BoxData[
    \(1 + \[Pi]\)], "Output"]
}, Open  ]],

Cell["\<\
The result stored with (%n) from the evaluation above is \[Pi] because \
$PrePrint is used after the result is assigned to %n. This is demonstrated in \
the next cell where the previous output is accessed using (%%). \
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[$PreRead, $Pre, $Post, $PrePrint];\)\), "\n", 
    \(%%\)}], "Input"],

Cell[BoxData[
    \(\[Pi]\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell we use $Post to do the same thing we did with $PrePrint in \
the previous example.  When we use $Post the replacement is made before the \
result is assigned to (%n).\
\>", "Text"],

Cell[BoxData[{
    \(\(Clear[$PreRead, $Pre, $Post, $PrePrint];\)\), "\n", 
    \(\($Post = \((# /. x_?NumericQ \[RuleDelayed] x + 1)\) &;\)\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(x = \[Pi]\)], "Input"],

Cell[BoxData[
    \(1 + \[Pi]\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell we see (1+\[Pi]) is assigned to (%n) when the replacement is \
made using $Post.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[$PreRead, $Pre, $Post, $PrePrint];\)\), "\[IndentingNewLine]", 
    \(%%\)}], "Input"],

Cell[BoxData[
    \(1 + \[Pi]\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Clever Little Programs", "MiscSection",
  CellFrame->{{0, 0}, {0, 4}}],

Cell[CellGroupData[{

Cell["EvaluateAt", "Subsection"],

Cell["\<\
The function in the next cell takes an expression and a list of positions, \
and evaluates in place the parts at the specified positions. This is taken \
verbatim from \"further examples\" for ReplacePart in the Help Browser.\
\>", "ExampleText",
  CellTags->{"ReplacePart", "Evaluate At"}],

Cell[BoxData[
    \(EvaluateAt[expr_, positions_] := 
      Fold[ReplacePart[#1, Part[#1, Sequence @@ #2], #2] &, expr, 
        positions]\)], "Input",
  CellTags->"ReplacePart"],

Cell[TextData[{
  "In this case, ",
  StyleBox["{1,2}", "MR"],
  " specifies the second element of the held list, and ",
  StyleBox["{1,-1,1}", "MR"],
  " the first part of the last element. "
}], "ExampleText",
  CellTags->"ReplacePart"],

Cell[CellGroupData[{

Cell[BoxData[
    \(EvaluateAt[
      HoldForm[{2 + 3, 3 + 4, 2*4 + 5}], {{1, 2}, {1, \(-1\), 1}}]\)], "Input",\

  CellTags->"ReplacePart"],

Cell[BoxData[
    TagBox[\({2 + 3, 7, 8 + 5}\),
      HoldForm]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Evaluate Pattern", "Subsection"],

Cell[TextData[{
  "The function below evaluates all parts of a held expression that match a \
certain pattern. This is based on some code Robby Villegas of Wolfram \
Research discussed at the 1999 Developer Converence.  See \"Working With \
Unevaluated Expressions\" posted at \n",
  ButtonBox["http://library.wolfram.com/conferences/devconf99/#programming",
    ButtonData:>{
      URL[ "http://library.wolfram.com/conferences/devconf99/#programming"], 
      None},
    ButtonStyle->"Hyperlink"],
  ".\nAt that conference Micheal Trott and Adam Strzebonski of Wolfram \
Research are mentioned as the inventors of this trick : see \
\"Trott-Strzebonski method for In-Place Evaluation\". "
}], "Text",
  CellTags->"Evaluate Pattern"],

Cell[BoxData[
    RowBox[{"   ", 
      RowBox[{\(EvaluatePattern[expr_, pattn_]\), ":=", 
        RowBox[{"expr", "/.", 
          RowBox[{\(Pattern[p, pattn]\), 
            StyleBox[" ",
              "Input",
              FontSize->12], 
            StyleBox[":>",
              "Input",
              FontSize->12], 
            StyleBox[" ",
              "Input",
              FontSize->12], 
            StyleBox[\(With[{eval\  = p}, \ eval\  /; \ True]\),
              "Input",
              FontSize->12]}]}]}]}]], "Input"],

Cell[TextData[{
  "The next cell creates a held expression and evaluates all sub expressions \
with the Head Plus but nothing else evaluates. In this example \
Erf[\[Infinity]]+5, 1+3, 5+4, ",
  Cell[BoxData[
      \(TraditionalForm\`\@36 - \@16\)]],
  " evaluate to 6, 4, 9, 2 respectively since they each have the head Plus."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(demo = 
        HoldForm[\((Erf[\[Infinity]] + 
                5)\)\ Sin[\[Pi]\/\(1 + 3\)]\ \@\(5 + 4\)\/\(\@36 - \@16\)];\)\
\), "\n", 
    \(EvaluatePattern[demo, _Plus]\)}], "Input"],

Cell[BoxData[
    TagBox[\(6\/2\ Sin[\[Pi]\/4]\ \@9\),
      HoldForm]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["ReplaceAll at subexpressions matching a pattern", "Subsection"],

Cell[BoxData[{
    \(\(\(PatternReplaceAll::usage = "\<PatternReplaceAll[expr, pattern, \
rule] uses ReplaceAll to make the changes specified by rule, but the \
replacements are only made to subexpressions of expr that match pattern. \
PatternReplaceAll[expr, pattern, {rules}] uses one or more rules.\>";\)\(\
\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(\(\(PatternReplaceAll[expr_, 
        pattn_, {rules : \((_Rule | _RuleDelayed)\) .. }] := 
      With[{posn = Reverse@\(Sort@Position[Hold @@ {expr}, pattn]\)}, 
        ReleaseHold[
          Fold[MapAt[Function[a, a /. {rules}], #1, #2] &, Hold @@ {expr}, 
            posn]]]\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(PatternReplaceAll[expr_, pattn_, 
        SingleRule : \((_Rule | _RuleDelayed)\)] := 
      PatternReplaceAll[expr, pattn, {SingleRule}]\)}], "Input"],

Cell["\<\
Comments about the code above:

(1)  (Reverse@Sort...) ensures the later positions in (posn) still apply even \
after folding several times. 

(2)  We can't let the replacements take effect until after Fold is done \
because the 
     position of things may change.  To solve that I use Hold@@{expr}.

(3)  I don't use (rules__?OptionQ) because OptionQ[n_Integer->n+2] returns \
False. 
     Instead I use  rules:(_Rule|_RuleDelayed).

Now some examples:\
\>", "Text"],

Cell[BoxData[
    \(\(ex = 
        b*Gamma[1 + a]^2*Gamma[1 + b]/Gamma[2, 4 + 2  b]*
          PolyGamma[2*b]*\((b + 2)\)^2;\)\)], "Input"],

Cell["\<\
Here we use the rule (b\[Rule]bb) on all subexpressions with the head \
Gamma.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(PatternReplaceAll[ex, _Gamma, b \[Rule] bb]\)], "Input"],

Cell[BoxData[
    \(\(b\ \((2 + b)\)\^2\ Gamma[1 + a]\^2\ Gamma[1 + bb]\ PolyGamma[0, 2\ b]\
\)\/Gamma[2, 4 + 2\ bb]\)], "Output"]
}, Open  ]],

Cell["\<\
Here we use the rule (n_Integer\[Rule]n+2) on all subexpressions with the \
head Gamma.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(PatternReplaceAll[ex, _Gamma, n_Integer \[Rule] n + 2]\)], "Input"],

Cell[BoxData[
    \(\(b\ \((2 + b)\)\^2\ Gamma[3 + a]\^2\ Gamma[3 + b]\ PolyGamma[0, 2\ \
b]\)\/Gamma[4, 6 + 4\ b]\)], "Output"]
}, Open  ]],

Cell["\<\
Here we use both rules (b\[Rule]bb, n_Integer\[Rule]n+2) on all \
subexpressions with the head Gamma.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(PatternReplaceAll[
      ex, _Gamma, {b \[Rule] bb, n_Integer \[Rule] n + 2}]\)], "Input"],

Cell[BoxData[
    \(\(b\ \((2 + b)\)\^2\ Gamma[3 + a]\^2\ Gamma[3 + bb]\ PolyGamma[0, 2\ b]\
\)\/Gamma[4, 6 + 4\ bb]\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Making a periodic function", "Subsection"],

Cell["\<\
In the next cell I define a periodic function that's piecewize linear.  
This example would still work if I changed 
f[x_?(Im[#]===0&)] := f[Mod[x,5]]   to simply 
f[x_] := f[Mod[x,5]]   but by using the more complicated the definition (f) \
is only used for real arguments.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[f];\)\), "\[IndentingNewLine]", 
    \(\(f[x_?\((0 \[LessEqual] # < 5 &)\)] := 
        If[x < 2, 3, \ x - 4];\)\), "\n", 
    \(\(f[x_?\((Im[#] === 0 &)\)] := f[Mod[x, 5]];\)\), "\n", 
    \(\(Plot[f[x], {x, 0, 13}];\)\)}], "Input",
  FontSize->12],

Cell[GraphicsData["PostScript", "\<\
%!
%%Creator: Mathematica
%%AspectRatio: .61803 
MathPictureStart
/Mabs {
Mgmatrix idtransform
Mtmatrix dtransform
} bind def
/Mabsadd { Mabs
3 -1 roll add
3 1 roll add
exch } bind def
%% Graphics
%%IncludeResource: font Courier
%%IncludeFont: Courier
/Courier findfont 10  scalefont  setfont
% Scaling calculations
0.0238095 0.0732601 0.249872 0.117816 [
[.17033 .23737 -3 -9 ]
[.17033 .23737 3 0 ]
[.31685 .23737 -3 -9 ]
[.31685 .23737 3 0 ]
[.46337 .23737 -3 -9 ]
[.46337 .23737 3 0 ]
[.60989 .23737 -3 -9 ]
[.60989 .23737 3 0 ]
[.75641 .23737 -6 -9 ]
[.75641 .23737 6 0 ]
[.90293 .23737 -6 -9 ]
[.90293 .23737 6 0 ]
[.01131 .01424 -12 -4.5 ]
[.01131 .01424 0 4.5 ]
[.01131 .13206 -12 -4.5 ]
[.01131 .13206 0 4.5 ]
[.01131 .36769 -6 -4.5 ]
[.01131 .36769 0 4.5 ]
[.01131 .4855 -6 -4.5 ]
[.01131 .4855 0 4.5 ]
[.01131 .60332 -6 -4.5 ]
[.01131 .60332 0 4.5 ]
[ 0 0 0 0 ]
[ 1 .61803 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
0 g
.25 Mabswid
[ ] 0 setdash
.17033 .24987 m
.17033 .25612 L
s
[(2)] .17033 .23737 0 1 Mshowa
.31685 .24987 m
.31685 .25612 L
s
[(4)] .31685 .23737 0 1 Mshowa
.46337 .24987 m
.46337 .25612 L
s
[(6)] .46337 .23737 0 1 Mshowa
.60989 .24987 m
.60989 .25612 L
s
[(8)] .60989 .23737 0 1 Mshowa
.75641 .24987 m
.75641 .25612 L
s
[(10)] .75641 .23737 0 1 Mshowa
.90293 .24987 m
.90293 .25612 L
s
[(12)] .90293 .23737 0 1 Mshowa
.125 Mabswid
.06044 .24987 m
.06044 .25362 L
s
.09707 .24987 m
.09707 .25362 L
s
.1337 .24987 m
.1337 .25362 L
s
.20696 .24987 m
.20696 .25362 L
s
.24359 .24987 m
.24359 .25362 L
s
.28022 .24987 m
.28022 .25362 L
s
.35348 .24987 m
.35348 .25362 L
s
.39011 .24987 m
.39011 .25362 L
s
.42674 .24987 m
.42674 .25362 L
s
.5 .24987 m
.5 .25362 L
s
.53663 .24987 m
.53663 .25362 L
s
.57326 .24987 m
.57326 .25362 L
s
.64652 .24987 m
.64652 .25362 L
s
.68315 .24987 m
.68315 .25362 L
s
.71978 .24987 m
.71978 .25362 L
s
.79304 .24987 m
.79304 .25362 L
s
.82967 .24987 m
.82967 .25362 L
s
.8663 .24987 m
.8663 .25362 L
s
.93956 .24987 m
.93956 .25362 L
s
.97619 .24987 m
.97619 .25362 L
s
.25 Mabswid
0 .24987 m
1 .24987 L
s
.02381 .01424 m
.03006 .01424 L
s
[(-2)] .01131 .01424 1 0 Mshowa
.02381 .13206 m
.03006 .13206 L
s
[(-1)] .01131 .13206 1 0 Mshowa
.02381 .36769 m
.03006 .36769 L
s
[(1)] .01131 .36769 1 0 Mshowa
.02381 .4855 m
.03006 .4855 L
s
[(2)] .01131 .4855 1 0 Mshowa
.02381 .60332 m
.03006 .60332 L
s
[(3)] .01131 .60332 1 0 Mshowa
.125 Mabswid
.02381 .0378 m
.02756 .0378 L
s
.02381 .06137 m
.02756 .06137 L
s
.02381 .08493 m
.02756 .08493 L
s
.02381 .10849 m
.02756 .10849 L
s
.02381 .15562 m
.02756 .15562 L
s
.02381 .17918 m
.02756 .17918 L
s
.02381 .20275 m
.02756 .20275 L
s
.02381 .22631 m
.02756 .22631 L
s
.02381 .27344 m
.02756 .27344 L
s
.02381 .297 m
.02756 .297 L
s
.02381 .32056 m
.02756 .32056 L
s
.02381 .34412 m
.02756 .34412 L
s
.02381 .39125 m
.02756 .39125 L
s
.02381 .41481 m
.02756 .41481 L
s
.02381 .43838 m
.02756 .43838 L
s
.02381 .46194 m
.02756 .46194 L
s
.02381 .50907 m
.02756 .50907 L
s
.02381 .53263 m
.02756 .53263 L
s
.02381 .55619 m
.02756 .55619 L
s
.02381 .57976 m
.02756 .57976 L
s
.25 Mabswid
.02381 0 m
.02381 .61803 L
s
0 0 m
1 0 L
1 .61803 L
0 .61803 L
closepath
clip
newpath
.5 Mabswid
.02381 .60332 m
.06244 .60332 L
.10458 .60332 L
.12507 .60332 L
.14415 .60332 L
.1536 .60332 L
.16254 .60332 L
.16748 .60332 L
.16883 .60332 L
.16957 .60332 L
.17026 .60332 L
.17149 .01611 L
.17214 .01715 L
.17284 .01827 L
.18221 .03334 L
.22343 .09964 L
.26314 .1635 L
.30133 .22492 L
.34198 .29029 L
.36078 .32051 L
.37066 .33641 L
.38111 .35321 L
.38643 .36176 L
.38788 .3641 L
.38868 .36539 L
.38944 .36662 L
.39015 .60332 L
.39092 .60332 L
.39226 .60332 L
.40252 .60332 L
.42269 .60332 L
.46347 .60332 L
.48373 .60332 L
.50274 .60332 L
.52091 .60332 L
.52588 .60332 L
.53112 .60332 L
.53329 .60332 L
.53447 .60332 L
.5356 .60332 L
.53623 .60332 L
.53692 .01472 L
.53813 .01666 L
.54049 .02045 L
.58141 .08625 L
.62081 .14962 L
.6587 .21055 L
.69904 .27542 L
.71761 .3053 L
.73786 .33786 L
Mistroke
.74318 .34642 L
.74885 .35553 L
.75161 .35996 L
.75296 .36213 L
.7542 .36413 L
.75533 .36595 L
.75652 .60332 L
.75772 .60332 L
.75904 .60332 L
.77914 .60332 L
.81962 .60332 L
.85858 .60332 L
.87843 .60332 L
.88889 .60332 L
.89462 .60332 L
.89742 .60332 L
.89999 .60332 L
.90119 .60332 L
.90231 .60332 L
.90347 .01511 L
.90474 .01715 L
.90985 .02538 L
.92073 .04286 L
.93989 .07368 L
.97619 .13206 L
Mfstroke
% End of Graphics
MathPictureEnd
\
\>"], "Graphics",
  ImageSize->{250, 154.5},
  ImageMargins->{{0, 0}, {0, 0}},
  ImageRegion->{{0, 1}, {0, 1}},
  ImageCache->GraphicsData["Bitmap", "\<\
CF5dJ6E]HGAYHf4PAg9QL6QYHg<PAVmbKF5d0`40007d0001=A000`40O003h00OogoomGoo003oOooe
Ool00?moooEoo`00ogoomGoo003oOooeOol00?moooEoo`007Woo00<007ooOol0ogooe7oo000NOol0
0`00Oomoo`3oOooDOol000ioo`P000Qoo`03001oogoo0?moomAoo`003Woo00<007ooOol017oo00<0
07ooOol01Woo00<007ooOol0ogooe7oo000?Ool00`00Oomoo`0<Ool00`00Oomoo`3oOooDOol0011o
o`03001oogoo00]oo`03001oogoo0?moomAoo`004Goo00<007ooOol02Woo00<007ooOol0ogooe7oo
0002Ool80008Ool00`00Oomoo`09Ool4003bOol00`00Oomoo`2]Ool00`00Oomoo`0]Ool001=oo`03
001oogoo00Qoo`03001oogoo04=oo`800:ioo`800:ioo`8002ioo`0057oo00<007ooOol01goo00<0
07ooOol0@goo0P00[Woo0P00[Woo0P00;Woo000EOol00`00Oomoo`06Ool00`00Oomoo`13Ool00`00
Ool0002]Ool00`00Ool0002]Ool00`00Ool0000]Ool001Eoo`03001oogoo00Ioo`03001oogoo04=o
o`03001oo`000:eoo`04001oogoo002/Ool00`00Ool0000]Ool000ioo`03001oogoo00Aoo`03001o
ogoo00Ioo`03001oogoo04=oo`04001oogoo002/Ool01000Oomoo`00[7oo00@007ooOol002aoo`00
3goo00<007ooOol00Woo00<007ooOol01goo00<007ooOol0@goo00D007ooOomoo`000:]oo`05001o
ogooOol0002[Ool01@00Oomoogoo0000:goo000@Ool4000:Ool00`00Oomoo`13Ool00`00Oomoo`02
Ool00`00Oomoo`2XOol01@00Oomoogoo0000Zgoo00D007ooOomoo`0002]oo`007Woo00<007ooOol0
@goo00<007ooOol00Woo00<007ooOol0Z7oo00<007ooOol00Woo00<007ooOol0Z7oo00<007ooOol0
0Woo00<007ooOol0:7oo000NOol00`00Oomoo`13Ool00`00Oomoo`03Ool00`00Oomoo`2WOol00`00
Oomoo`03Ool00`00Oomoo`2WOol00`00Oomoo`02Ool00`00Oomoo`0XOol001ioo`03001oogoo04=o
o`03001oogoo00Aoo`03001oogoo0:Ioo`03001oogoo00=oo`03001oogoo0:Moo`03001oogoo00=o
o`03001oogoo02Moo`007Woo0P00A7oo00<007ooOol017oo00<007ooOol0YWoo00<007ooOol017oo
00<007ooOol0YWoo00<007ooOol00goo00<007ooOol09goo000NOol00`00Oomoo`13Ool00`00Oomo
o`05Ool00`00Oomoo`2UOol00`00Oomoo`04Ool00`00Oomoo`2VOol00`00Oomoo`04Ool00`00Oomo
o`0VOol001ioo`03001oogoo04=oo`03001oogoo00Eoo`03001oogoo0:Eoo`03001oogoo00Eoo`03
001oogoo0:Eoo`03001oogoo00Aoo`03001oogoo02Ioo`007Woo00<007ooOol0@goo00<007ooOol0
1Woo00<007ooOol0Y7oo00<007ooOol01Woo00<007ooOol0Y7oo00<007ooOol01Goo00<007ooOol0
9Goo000NOol00`00Oomoo`13Ool00`00Oomoo`07Ool00`00Oomoo`2SOol00`00Oomoo`06Ool00`00
Oomoo`2TOol00`00Oomoo`06Ool00`00Oomoo`0TOol001ioo`03001oogoo04=oo`03001oogoo00Mo
o`03001oogoo0:=oo`03001oogoo00Moo`03001oogoo0:=oo`03001oogoo00Ioo`03001oogoo02Ao
o`007Woo00<007ooOol0@goo00<007ooOol027oo00<007ooOol0XWoo00<007ooOol01goo00<007oo
Ool0Xgoo00<007ooOol01goo00<007ooOol08goo000NOol00`00Oomoo`13Ool00`00Oomoo`08Ool0
0`00Oomoo`2ROol00`00Oomoo`08Ool00`00Oomoo`2ROol00`00Oomoo`08Ool00`00Oomoo`0ROol0
01ioo`03001oogoo04=oo`03001oogoo00Uoo`03001oogoo0:5oo`03001oogoo00Qoo`03001oogoo
0:9oo`03001oogoo00Qoo`03001oogoo029oo`007Woo00<007ooOol0@goo00<007ooOol02Woo00<0
07ooOol0X7oo00<007ooOol02Goo00<007ooOol0XGoo00<007ooOol02Goo00<007ooOol08Goo000N
Ool00`00Oomoo`13Ool00`00Oomoo`0:Ool00`00Oomoo`2POol00`00Oomoo`0:Ool00`00Oomoo`2P
Ool00`00Oomoo`0:Ool00`00Oomoo`0POol001ioo`03001oogoo04=oo`03001oogoo00]oo`03001o
ogoo09moo`03001oogoo00Yoo`03001oogoo0:1oo`03001oogoo00Yoo`03001oogoo021oo`007Woo
0P00A7oo00<007ooOol02goo00<007ooOol0Wgoo00<007ooOol02goo00<007ooOol0Wgoo00<007oo
Ool02goo00<007ooOol07goo000NOol00`00Oomoo`13Ool00`00Oomoo`0<Ool00`00Oomoo`2NOol0
0`00Oomoo`0;Ool00`00Oomoo`2OOol00`00Oomoo`0<Ool00`00Oomoo`0NOol001ioo`03001oogoo
04=oo`03001oogoo00aoo`03001oogoo09ioo`03001oogoo00aoo`03001oogoo09ioo`03001oogoo
00aoo`03001oogoo01ioo`007Woo00<007ooOol0@goo00<007ooOol03Goo00<007ooOol0WGoo00<0
07ooOol03Goo00<007ooOol0WGoo00<007ooOol03Goo00<007ooOol07Goo000NOol00`00Oomoo`13
Ool00`00Oomoo`0>Ool00`00Oomoo`2LOol00`00Oomoo`0=Ool00`00Oomoo`2MOol00`00Oomoo`0>
Ool00`00Oomoo`0LOol001ioo`03001oogoo04=oo`03001oogoo00ioo`03001oogoo09aoo`03001o
ogoo00ioo`03001oogoo09aoo`03001oogoo00ioo`03001oogoo01aoo`007Woo00<007ooOol0@goo
00<007ooOol03goo00<007ooOol0Vgoo00<007ooOol03Woo00<007ooOol0W7oo00<007ooOol03goo
00<007ooOol06goo000NOol00`00Oomoo`13Ool00`00Oomoo`0?Ool00`00Oomoo`2KOol00`00Oomo
o`0?Ool00`00Oomoo`2KOol00`00Oomoo`0@Ool00`00Oomoo`0JOol001ioo`03001oogoo04=oo`03
001oogoo011oo`03001oogoo09Yoo`03001oogoo011oo`03001oogoo09Yoo`03001oogoo011oo`03
001oogoo01Yoo`007Woo00<007ooOol0@goo00<007ooOol04Goo00<007ooOol0VGoo00<007ooOol0
47oo00<007ooOol0VWoo00<007ooOol04Goo00<007ooOol06Goo000NOol00`00Oomoo`13Ool00`00
Oomoo`0AOol00`00Oomoo`2IOol00`00Oomoo`0AOol00`00Oomoo`2IOol00`00Oomoo`0AOol00`00
Oomoo`0IOol001ioo`8004Aoo`03001oogoo019oo`03001oogoo09Qoo`03001oogoo015oo`03001o
ogoo09Uoo`03001oogoo019oo`03001oogoo01Qoo`007Woo00<007ooOol0@goo00<007ooOol04Woo
00<007ooOol0V7oo00<007ooOol04Woo00<007ooOol0V7oo00<007ooOol04goo00<007ooOol05goo
000NOol00`00Oomoo`13Ool00`00Oomoo`0COol00`00Oomoo`2GOol00`00Oomoo`0COol00`00Oomo
o`2GOol00`00Oomoo`0COol00`00Oomoo`0GOol001ioo`03001oogoo04=oo`03001oogoo01Aoo`03
001oogoo09Ioo`03001oogoo01=oo`03001oogoo09Moo`03001oogoo01Aoo`03001oogoo01Ioo`00
7Woo00<007ooOol0@goo00<007ooOol057oo00<007ooOol0UWoo00<007ooOol057oo00<007ooOol0
UWoo00<007ooOol057oo00<007ooOol05Woo000NOol00`00Oomoo`13Ool00`00Oomoo`0EOol00`00
Oomoo`2EOol00`00Oomoo`0EOol00`00Oomoo`2EOol00`00Oomoo`0EOol00`00Oomoo`0EOol001io
o`03001oogoo04=oo`03001oogoo01Eoo`03001oogoo09Eoo`03001oogoo01Eoo`03001oogoo09Eo
o`03001oogoo01Ioo`03001oogoo01Aoo`007Woo00<007ooOol0@goo00<007ooOol05Woo00<007oo
Ool0U7oo00<007ooOol05Woo00<007ooOol0U7oo00<007ooOol05Woo00<007ooOol057oo000NOol0
0`00Oomoo`13Ool00`00Oomoo`0GOol00`00Oomoo`2COol00`00Oomoo`0FOol00`00Oomoo`2DOol0
0`00Oomoo`0GOol00`00Oomoo`0COol001ioo`03001oogoo04=oo`03001oogoo01Moo`03001oogoo
09=oo`03001oogoo01Moo`03001oogoo09=oo`03001oogoo01Moo`03001oogoo01=oo`007Woo00<0
07ooOol0@goo00<007ooOol067oo00<007ooOol0TWoo00<007ooOol067oo00<007ooOol0TWoo00<0
07ooOol067oo00<007ooOol04Woo000NOol20014Ool00`00Oomoo`0HOol00`00Oomoo`2BOol00`00
Oomoo`0HOol00`00Oomoo`2BOol00`00Oomoo`0IOol00`00Oomoo`0AOol001ioo`03001oogoo04=o
o`03001oogoo01Uoo`03001oogoo095oo`03001oogoo01Uoo`03001oogoo095oo`03001oogoo01Uo
o`03001oogoo015oo`007Woo00<007ooOol0@goo00<007ooOol06Woo00<007ooOol0T7oo00<007oo
Ool06Woo00<007ooOol0T7oo00<007ooOol06Woo00<007ooOol047oo000NOol00`00Oomoo`13Ool0
0`00Oomoo`0JOol00`00Oomoo`2@Ool00`00Oomoo`0JOol00`00Oomoo`2@Ool00`00Oomoo`0KOol0
0`00Oomoo`0?Ool001ioo`03001oogoo04=oo`03001oogoo01]oo`03001oogoo08moo`03001oogoo
01]oo`03001oogoo08moo`03001oogoo01]oo`03001oogoo00moo`007Woo00<007ooOol0@goo00<0
07ooOol077oo00<007ooOol0SWoo00<007ooOol06goo00<007ooOol0Sgoo00<007ooOol077oo00<0
07ooOol03Woo000NOol00`00Oomoo`13Ool00`00Oomoo`0LOol00`00Oomoo`2>Ool00`00Oomoo`0L
Ool00`00Oomoo`2>Ool00`00Oomoo`0LOol00`00Oomoo`0>Ool000moo`L000Qoo`03001oogoo04=o
o`03001oogoo01eoo`03001oogoo08eoo`03001oogoo01eoo`03001oogoo08eoo`03001oogoo01eo
o`03001oogoo00eoo`004Woo00<007ooOol02Goo00<007ooOol0@goo00<007ooOol07Goo00<007oo
Ool0SGoo00<007ooOol07Goo00<007ooOol0SGoo00<007ooOol07Woo00<007ooOol037oo000BOol0
0`00Oomoo`09Ool00`00Oomoo`13Ool00`00Oomoo`0NOol00`00Oomoo`2<Ool00`00Oomoo`0NOol0
0`00Oomoo`2<Ool00`00Oomoo`0NOol00`00Oomoo`0<Ool0019oo`03001oogoo00Uoo`03001oogoo
04=oo`03001oogoo01moo`03001oogoo08]oo`03001oogoo01moo`03001oogoo08]oo`03001oogoo
01moo`03001oogoo00]oo`004Woo00<007ooOol02Goo00<007ooOol0@goo00<007ooOol07goo00<0
07ooOol0Rgoo00<007ooOol07goo00<007ooOol0Rgoo00<007ooOol07goo00<007ooOol02goo0002
Ool80008Ool00`00Oomoo`09Ool40012Ool00`00Oomoo`0POol00`00Oomoo`2:Ool00`00Oomoo`0P
Ool00`00Oomoo`2:Ool00`00Oomoo`0POol00`00Oomoo`0:Ool0019oo`03001oogoo00Uoo`03001o
ogoo04=oo`03001oogoo021oo`03001oogoo08Yoo`03001oogoo025oo`03001oogoo08Uoo`03001o
ogoo02eoo`004Woo00<007ooOol02Goo00<007ooOol0@goo00<007ooOol08Goo00<007ooOol0RGoo
00<007ooOol08Goo00<007ooOol0RGoo00<007ooOol0;Goo000BOol00`00Oomoo`09Ool00`00Oomo
o`13Ool00`00Oomoo`0ROol00`00Oomoo`28Ool00`00Oomoo`0ROol00`00Oomoo`28Ool00`00Oomo
o`0]Ool0019oo`03001oogoo00Uoo`03001oogoo04=oo`03001oogoo029oo`03001oogoo08Qoo`03
001oogoo029oo`03001oogoo08Qoo`03001oogoo02eoo`004Woo00<007ooOol02Goo00<007ooOol0
@goo00<007ooOol08goo00<007ooOol0Qgoo00<007ooOol08goo00<007ooOol0Qgoo00<007ooOol0
;Goo000>Ool300000goo001oo`0:Ool00`00Oomoo`13Ool00`00Oomoo`0SOol00`00Oomoo`27Ool0
0`00Oomoo`0TOol00`00Oomoo`26Ool00`00Oomoo`0]Ool0015oo`8000]oo`03001oogoo04=oo`03
001oogoo02Aoo`03001oogoo08Ioo`03001oogoo02Aoo`03001oogoo08Ioo`03001oogoo02eoo`00
7Woo00<007ooOol0@goo00<007ooOol09Goo00<007ooOol0QGoo00<007ooOol09Goo00<007ooOol0
QGoo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`0UOol00`00Oomoo`25Ool00`00
Oomoo`0VOol00`00Oomoo`24Ool00`00Oomoo`0]Ool001ioo`03001oogoo04=oo`03001oogoo02Io
o`03001oogoo08Aoo`03001oogoo02Ioo`03001oogoo08Aoo`03001oogoo02eoo`007Woo0P00A7oo
00<007ooOol09goo00<007ooOol0Pgoo00<007ooOol09goo00<007ooOol0Pgoo00<007ooOol0;Goo
000NOol00`00Oomoo`13Ool00`00Oomoo`0WOol00`00Oomoo`23Ool00`00Oomoo`0XOol00`00Oomo
o`22Ool00`00Oomoo`0]Ool001ioo`03001oogoo04=oo`03001oogoo02Qoo`03001oogoo089oo`03
001oogoo02Qoo`03001oogoo089oo`03001oogoo02eoo`007Woo00<007ooOol0@goo00<007ooOol0
:7oo00<007ooOol0PWoo00<007ooOol0:Goo00<007ooOol0PGoo00<007ooOol0;Goo000NOol00`00
Oomoo`13Ool00`00Oomoo`0YOol00`00Oomoo`21Ool00`00Oomoo`0ZOol00`00Oomoo`20Ool00`00
Oomoo`0]Ool001ioo`03001oogoo04=oo`03001oogoo02Yoo`03001oogoo081oo`03001oogoo02Yo
o`03001oogoo081oo`03001oogoo02eoo`007Woo00<007ooOol0@goo00<007ooOol0:Woo00<007oo
Ool0P7oo00<007ooOol0:goo00<007ooOol0Ogoo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool0
0`00Oomoo`0[Ool00`00Oomoo`1oOol00`00Oomoo`0/Ool00`00Oomoo`1nOol00`00Oomoo`0]Ool0
01ioo`03001oogoo04=oo`03001oogoo02aoo`03001oogoo07ioo`03001oogoo02aoo`03001oogoo
07ioo`03001oogoo02eoo`007Woo00<007ooOol0@goo00<007ooOol0;7oo00<007ooOol0OWoo00<0
07ooOol0;Goo00<007ooOol0OGoo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`0]
Ool00`00Oomoo`1mOol00`00Oomoo`0^Ool00`00Oomoo`1lOol00`00Oomoo`0]Ool001ioo`8004Ao
o`03001oogoo02ioo`03001oogoo07aoo`03001oogoo02ioo`03001oogoo07aoo`03001oogoo02eo
o`007Woo00<007ooOol0@goo00<007ooOol0;Woo00<007ooOol0O7oo00<007ooOol0;goo00<007oo
Ool0Ngoo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`0_Ool00`00Oomoo`1kOol0
0`00Oomoo`0_Ool00`00Oomoo`1kOol00`00Oomoo`0]Ool001ioo`03001oogoo04=oo`03001oogoo
031oo`03001oogoo07Yoo`03001oogoo031oo`03001oogoo07Yoo`03001oogoo02eoo`007Woo00<0
07ooOol0@goo00<007ooOol0<7oo00<007ooOol0NWoo00<007ooOol0<Goo00<007ooOol0NGoo00<0
07ooOol0;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`0aOol00`00Oomoo`1iOol00`00Oomoo`0a
Ool00`00Oomoo`1iOol00`00Oomoo`0]Ool001ioo`03001oogoo04=oo`03001oogoo039oo`03001o
ogoo07Qoo`03001oogoo039oo`03001oogoo07Qoo`03001oogoo02eoo`007Woo00<007ooOol0@goo
00<007ooOol0<Woo00<007ooOol0N7oo00<007ooOol0<goo00<007ooOol0Mgoo00<007ooOol0;Goo
000NOol00`00Oomoo`13Ool00`00Oomoo`0cOol00`00Oomoo`1gOol00`00Oomoo`0cOol00`00Oomo
o`1gOol00`00Oomoo`0]Ool001ioo`03001oogoo04=oo`03001oogoo03=oo`03001oogoo07Moo`03
001oogoo03Aoo`03001oogoo07Ioo`03001oogoo02eoo`007Woo00<007ooOol0@goo00<007ooOol0
=7oo00<007ooOol0MWoo00<007ooOol0=Goo00<007ooOol0MGoo00<007ooOol0;Goo000NOol00`00
Oomoo`13Ool00`00Oomoo`0eOol00`00Oomoo`1eOol00`00Oomoo`0eOol00`00Oomoo`1eOol00`00
Oomoo`0]Ool001ioo`80041oo`P003Aoo`03001oogoo00Yoo`@004=oo`@0021oo`03001oogoo01io
o`<001Eoo`03001oogoo02Aoo`L000Ioo`@003Ioo`L0009oo`03001oo`0000L002Ioo`007Woo00<0
07ooOol0?goo00D007ooOomoo`00009oo`03001oogoo03=oo`03001oogoo00]oo`03001oogoo045o
o`03001oogoo009oo`03001oogoo01eoo`03001oogoo01eoo`05001oogooOol0000EOol00`00Oomo
o`0VOol00`00Oomoo`06Ool00`00Oomoo`02Ool00`00Oomoo`0fOol00`00Oomoo`03Ool00`00Ool0
0006Ool00`00Oomoo`0TOol001ioo`03001oogoo041oo`04001oogoo000iOol00`00Oomoo`0:Ool0
0`00Oomoo`10Ool00`00Oomoo`04Ool00`00Oomoo`0LOol00`00Oomoo`0LOol00`00Oomoo`03Ool0
0`00Oomoo`0BOol00`00Oomoo`0VOol00`00Oomoo`05Ool00`00Oomoo`03Ool00`00Oomoo`0fOol0
0`00Oomoo`03Ool01000Oomoo`00;7oo000NOol00`00Oomoo`11Ool00`00Ool0000iOol00`00Oomo
o`05Ool70010Ool00`00Oomoo`05Ool00`00Oomoo`0LOol00`00Oomoo`0LOol00`00Oomoo`03Ool0
0`00Oomoo`0COol00`00Oomoo`0UOol00`00Oomoo`05Ool00`00Oomoo`04Ool00`00Oomoo`0eOol0
0`00Oomoo`03Ool01@00Oomoogoo0000:goo000NOol00`00Oomoo`12Ool2000jOol00`00Oomoo`04
Ool00`00Oomoo`02Ool00`00Oomoo`0oOol00`00Oomoo`05Ool00`00Oomoo`0LOol00`00Oomoo`0L
Ool00`00Oomoo`03Ool00`00Oomoo`0DOol00`00Oomoo`0TOol00`00Oomoo`05Ool00`00Oomoo`04
Ool00`00Oomoo`0eOol00`00Oomoo`03Ool00`00Oomoo`02Ool00`00Oomoo`0XOol001ioo`03001o
ogoo04=oo`03001oogoo03Uoo`03001oogoo00Aoo`05001oogooOol00011Ool20006Ool00`00Oomo
o`0LOol00`00Oomoo`0MOol01@00Oomoogoo00005goo00<007ooOol097oo00<007ooOol01Goo00<0
07ooOol017oo00<007ooOol0=Goo00<007ooOol00goo00<007ooOol00goo00<007ooOol09goo000N
Ool00`00Oomoo`13Ool2000jOol00`00Oomoo`04Ool01@00Oomoogoo0000@Goo00<007oo000017oo
00<007ooOol07Goo00<007ooOol07Woo100067oo00<007ooOol08goo00<007ooOol01Goo00<007oo
Ool017oo00<007ooOol0=Goo00<007ooOol00goo00<007ooOol017oo00<007ooOol09Woo000NOol0
0`00Oomoo`13Ool00`00Ool0000jOol00`00Oomoo`04Ool01000Oomoo`00@Goo00<007ooOol01000
87oo00<007ooOol07Goo00D007ooOomoo`0001Qoo`03001oogoo02=oo`03001oogoo00Eoo`03001o
ogoo00Aoo`03001oogoo03Eoo`03001oogoo00=oo`03001oogoo00Eoo`03001oogoo02Eoo`007Woo
00<007ooOol0@goo00@007ooOol003Yoo`03001oogoo00=oo`04001oogoo0011Ool00`00Oomoo`0T
Ool00`00Oomoo`0LOol00`00Oomoo`03Ool00`00Oomoo`0FOol00`00Oomoo`0ROol00`00Oomoo`05
Ool00`00Oomoo`04Ool00`00Oomoo`0eOol00`00Oomoo`03Ool00`00Oomoo`06Ool00`00Oomoo`0T
Ool001ioo`03001oogoo04=oo`04001oogoo000jOol00`00Oomoo`04Ool00`00Ool00012Ool00`00
Oomoo`0SOol00`00Oomoo`0LOol00`00Oomoo`03Ool00`00Oomoo`0GOol00`00Oomoo`0QOol00`00
Oomoo`05Ool00`00Oomoo`04Ool00`00Oomoo`0eOol00`00Oomoo`03Ool00`00Oomoo`06Ool00`00
Oomoo`0TOol001ioo`03001oogoo03moo`05001oogooOol00002Ool00`00Oomoo`0iOol00`00Oomo
o`04Ool20013Ool00`00Oomoo`0ROol00`00Oomoo`0LOol00`00Oomoo`03Ool00`00Oomoo`0GOol0
0`00Oomoo`0QOol00`00Oomoo`06Ool00`00Oomoo`02Ool00`00Oomoo`0fOol00`00Oomoo`03Ool0
0`00Ool00006Ool00`00Oomoo`0TOol001ioo`80045oo`06001oogoo001oo`00?Goo00<007ooOol0
0goo0P00A7oo0P008Woo00<007ooOol07Goo00D007ooOomoo`0001]oo`03001oogoo01aoo`<00003
Ool007oo00Moo`03001oogoo009oo`03001oogoo039oo`<00003Ool007oo00Aoo`04001oogoo0004
Ool00`00Oomoo`0UOol001ioo`03001oogoo045oo`@003ioo`03001oogoo00Aoo`03001oogoo04Ao
o`@001ioo`03001oogoo01ioo`<001eoo`03001oogoo01ioo`8000Uoo`@003Qoo`8000Eoo`04001o
ogooOol4000XOol001ioo`03001oogoo04=oo`03001oogoo03ioo`03001oogoo06aoo`03001oogoo
03ioo`03001oogoo06aoo`03001oogoo02eoo`007Woo00<007ooOol0@goo00<007ooOol0?Woo00<0
07ooOol0K7oo00<007ooOol0?goo00<007ooOol0Jgoo00<007ooOol0;Goo000NOol00`00Oomoo`13
Ool00`00Oomoo`0oOol00`00Oomoo`1[Ool00`00Oomoo`0oOol00`00Oomoo`1[Ool00`00Oomoo`0]
Ool001ioo`03001oogoo04=oo`03001oogoo041oo`03001oogoo06Yoo`03001oogoo041oo`03001o
ogoo06Yoo`03001oogoo02eoo`007Woo00<007ooOol0@goo00<007ooOol0@7oo00<007ooOol0JWoo
00<007ooOol0@Goo00<007ooOol0JGoo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool00`00Oomo
o`11Ool00`00Oomoo`1YOol00`00Oomoo`11Ool00`00Oomoo`1YOol00`00Oomoo`0]Ool001ioo`03
001oogoo04=oo`03001oogoo045oo`03001oogoo06Uoo`03001oogoo049oo`03001oogoo06Qoo`03
001oogoo02eoo`007Woo00<007ooOol0@goo00<007ooOol0@Woo00<007ooOol0J7oo00<007ooOol0
@Woo00<007ooOol0J7oo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`13Ool00`00
Oomoo`1WOol00`00Oomoo`13Ool00`00Oomoo`1WOol00`00Oomoo`0]Ool0019oool00>80005oo`00
7Woo00<007ooOol03Woo00<007ooOol03goo00<007ooOol03Woo00<007ooOol03goo00<007ooOol0
3goo00<007ooOol03Woo00<007ooOol03goo00<007ooOol03Woo0P0047oo00<007ooOol03Woo00<0
07ooOol03goo00<007ooOol03goo00<007ooOol03Woo00<007ooOol03goo00<007ooOol03Woo00<0
07ooOol03goo00<007ooOol03goo00<007ooOol03Woo0P0047oo00<007ooOol03Woo00<007ooOol0
3goo00<007ooOol03goo00<007ooOol03Woo00<007ooOol03goo00<007ooOol03Woo00<007ooOol0
3goo00<007ooOol02Woo000NOol00`00Oomoo`0>Ool00`00Oomoo`0?Ool00`00Oomoo`0>Ool00`00
Oomoo`0?Ool00`00Oomoo`0?Ool00`00Oomoo`0>Ool00`00Oomoo`0?Ool00`00Oomoo`0>Ool2000@
Ool00`00Oomoo`0>Ool00`00Oomoo`0?Ool00`00Oomoo`0?Ool00`00Oomoo`0>Ool00`00Oomoo`0?
Ool00`00Oomoo`0>Ool00`00Oomoo`0?Ool00`00Oomoo`0?Ool00`00Oomoo`0>Ool00`00Ool0000?
Ool00`00Oomoo`0>Ool00`00Oomoo`0?Ool00`00Oomoo`0?Ool00`00Oomoo`0>Ool00`00Oomoo`0?
Ool00`00Oomoo`0>Ool00`00Oomoo`0?Ool00`00Oomoo`0:Ool001ioo`03001oogoo04=oo`03001o
ogoo04=oo`03001oo`0004Aoo`03001oogoo021oo`03001oogoo021oo`03001oogoo029oo`03001o
ogoo01ioo`03001oogoo04Aoo`03001oogoo02eoo`007Woo00<007ooOol0@goo00<007ooOol0AGoo
00<007ooOol0IGoo00<007ooOol0AWoo00<007ooOol0I7oo00<007ooOol0;Goo000NOol00`00Oomo
o`13Ool00`00Oomoo`16Ool00`00Oomoo`1TOol00`00Oomoo`17Ool00`00Oomoo`1SOol00`00Oomo
o`0]Ool001ioo`03001oogoo04=oo`03001oogoo04Moo`03001oogoo06=oo`03001oogoo04Moo`03
001oogoo06=oo`03001oogoo02eoo`007Woo00<007ooOol0@goo00<007ooOol0Agoo00<007ooOol0
Hgoo00<007ooOol0B7oo00<007ooOol0HWoo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool00`00
Oomoo`18Ool00`00Oomoo`1ROol00`00Oomoo`19Ool00`00Oomoo`1QOol00`00Oomoo`0]Ool001io
o`03001oogoo04=oo`03001oogoo04Qoo`03001oogoo069oo`03001oogoo04Uoo`03001oogoo065o
o`03001oogoo02eoo`007Woo00<007ooOol0@goo00<007ooOol0BGoo00<007ooOol0HGoo00<007oo
Ool0BWoo00<007ooOol0H7oo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`1:Ool0
0`00Oomoo`1POol00`00Oomoo`1:Ool00`00Oomoo`1POol00`00Oomoo`0]Ool001ioo`8004Aoo`03
001oogoo04Yoo`03001oogoo061oo`03001oogoo04]oo`03001oogoo05moo`03001oogoo02eoo`00
7Woo00<007ooOol0@goo00<007ooOol0Bgoo00<007ooOol0Ggoo00<007ooOol0C7oo00<007ooOol0
GWoo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`1;Ool00`00Oomoo`1OOol00`00
Oomoo`1<Ool00`00Oomoo`1NOol00`00Oomoo`0]Ool001ioo`03001oogoo04=oo`03001oogoo04ao
o`03001oogoo05ioo`03001oogoo04eoo`03001oogoo05eoo`03001oogoo02eoo`007Woo00<007oo
Ool0@goo00<007ooOol0CGoo00<007ooOol0GGoo00<007ooOol0CGoo00<007ooOol0GGoo00<007oo
Ool0;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`1=Ool00`00Oomoo`1MOol00`00Oomoo`1>Ool0
0`00Oomoo`1LOol00`00Oomoo`0]Ool001ioo`03001oogoo04=oo`03001oogoo04ioo`03001oogoo
05aoo`03001oogoo04moo`03001oogoo05]oo`03001oogoo02eoo`007Woo00<007ooOol0@goo00<0
07ooOol0CWoo00<007ooOol0G7oo00<007ooOol0Cgoo00<007ooOol0Fgoo00<007ooOol0;Goo000N
Ool00`00Oomoo`13Ool00`00Oomoo`1?Ool00`00Oomoo`1KOol00`00Oomoo`1@Ool00`00Oomoo`1J
Ool00`00Oomoo`0]Ool001ioo`03001oogoo04=oo`03001oogoo051oo`03001oogoo05Yoo`03001o
ogoo051oo`03001oogoo05Yoo`03001oogoo02eoo`007Woo00<007ooOol0@goo00<007ooOol0D7oo
00<007ooOol0FWoo00<007ooOol0DGoo00<007ooOol0FGoo00<007ooOol0;Goo000NOol20014Ool0
0`00Oomoo`1AOol00`00Oomoo`1IOol00`00Oomoo`1BOol00`00Oomoo`1HOol00`00Oomoo`0]Ool0
01ioo`03001oogoo04=oo`03001oogoo059oo`03001oogoo05Qoo`03001oogoo059oo`03001oogoo
05Qoo`03001oogoo02eoo`007Woo00<007ooOol0@goo00<007ooOol0DWoo00<007ooOol0F7oo00<0
07ooOol0Dgoo00<007ooOol0Egoo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`1C
Ool00`00Oomoo`1GOol00`00Oomoo`1COol00`00Oomoo`1GOol00`00Oomoo`0]Ool001ioo`03001o
ogoo04=oo`03001oogoo05=oo`03001oogoo05Moo`03001oogoo05Aoo`03001oogoo05Ioo`03001o
ogoo02eoo`007Woo00<007ooOol0@goo00<007ooOol0E7oo00<007ooOol0EWoo00<007ooOol0EGoo
00<007ooOol0EGoo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`1EOol00`00Oomo
o`1EOol00`00Oomoo`1EOol00`00Oomoo`1EOol00`00Oomoo`0]Ool001ioo`03001oogoo04=oo`03
001oogoo05Eoo`03001oogoo05Eoo`03001oogoo05Ioo`03001oogoo05Aoo`03001oogoo02eoo`00
7Woo00<007ooOol0@goo00<007ooOol0EWoo00<007ooOol0E7oo00<007ooOol0Egoo00<007ooOol0
Dgoo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`1GOol00`00Oomoo`1COol00`00
Oomoo`1GOol00`00Oomoo`1COol00`00Oomoo`0]Ool001ioo`03001oogoo04=oo`03001oogoo05Mo
o`03001oogoo05=oo`03001oogoo05Qoo`03001oogoo059oo`03001oogoo02eoo`007Woo0P00A7oo
00<007ooOol0F7oo00<007ooOol0DWoo00<007ooOol0FGoo00<007ooOol0DGoo00<007ooOol0;Goo
000NOol00`00Oomoo`13Ool00`00Oomoo`1IOol00`00Oomoo`1AOol00`00Oomoo`1IOol00`00Oomo
o`1AOol00`00Oomoo`0]Ool001ioo`03001oogoo04=oo`03001oogoo05Uoo`03001oogoo055oo`03
001oogoo05Yoo`03001oogoo051oo`03001oogoo02eoo`007Woo00<007ooOol0@goo00<007ooOol0
FWoo00<007ooOol0D7oo00<007ooOol0Fgoo00<007ooOol0Cgoo00<007ooOol0;Goo000NOol00`00
Oomoo`13Ool00`00Oomoo`1JOol00`00Oomoo`1@Ool00`00Oomoo`1KOol00`00Oomoo`1?Ool00`00
Oomoo`0]Ool001ioo`03001oogoo04=oo`03001oogoo05]oo`03001oogoo04moo`03001oogoo05ao
o`03001oogoo04ioo`03001oogoo02eoo`007Woo00<007ooOol0@goo00<007ooOol0G7oo00<007oo
Ool0CWoo00<007ooOol0GGoo00<007ooOol0CGoo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool0
0`00Oomoo`1LOol00`00Oomoo`1>Ool00`00Oomoo`1MOol00`00Oomoo`1=Ool00`00Oomoo`0]Ool0
01ioo`03001oogoo04=oo`03001oogoo05eoo`03001oogoo04eoo`03001oogoo05ioo`03001oogoo
04aoo`03001oogoo02eoo`007Woo00<007ooOol0@goo00<007ooOol0GWoo00<007ooOol0C7oo00<0
07ooOol0GWoo00<007ooOol0C7oo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`1N
Ool00`00Oomoo`1<Ool00`00Oomoo`1OOol00`00Oomoo`1;Ool00`00Oomoo`0]Ool001ioo`8004Ao
o`03001oogoo05moo`03001oogoo04]oo`03001oogoo05moo`03001oogoo04]oo`03001oogoo02eo
o`007Woo00<007ooOol0@goo00<007ooOol0Ggoo00<007ooOol0Bgoo00<007ooOol0H7oo00<007oo
Ool0BWoo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`1POol00`00Oomoo`1:Ool0
0`00Oomoo`1POol00`00Oomoo`1:Ool00`00Oomoo`0]Ool001ioo`03001oogoo04=oo`03001oogoo
065oo`03001oogoo04Uoo`03001oogoo065oo`03001oogoo04Uoo`03001oogoo02eoo`007Woo00<0
07ooOol0@goo00<007ooOol0HGoo00<007ooOol0BGoo00<007ooOol0HGoo00<007ooOol0BGoo00<0
07ooOol0;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`1ROol00`00Oomoo`18Ool00`00Oomoo`1R
Ool00`00Oomoo`18Ool00`00Oomoo`0]Ool001ioo`03001oogoo04=oo`03001oogoo06=oo`03001o
ogoo04Moo`03001oogoo06=oo`03001oogoo04Moo`03001oogoo02eoo`003goo1`0027oo00<007oo
Ool0@goo00<007ooOol0Hgoo00<007ooOol0Agoo00<007ooOol0Hgoo00<007ooOol0Agoo00<007oo
Ool0;Goo000BOol00`00Oomoo`09Ool00`00Oomoo`13Ool00`00Oomoo`1TOol00`00Oomoo`16Ool0
0`00Oomoo`1TOol00`00Oomoo`16Ool00`00Oomoo`0]Ool0019oo`03001oogoo00Uoo`03001oogoo
04=oo`03001oogoo06Eoo`03001oogoo04Eoo`03001oogoo06Eoo`03001oogoo04Eoo`03001oogoo
02eoo`004Woo00<007ooOol02Goo00<007ooOol0@goo00<007ooOol0IGoo00<007ooOol0AGoo00<0
07ooOol0IGoo00<007ooOol0AGoo00<007ooOol0;Goo000BOol00`00Oomoo`09Ool00`00Oomoo`13
Ool00`00Oomoo`1VOol00`00Oomoo`14Ool00`00Oomoo`1VOol00`00Oomoo`14Ool00`00Oomoo`0]
Ool0019oo`03001oogoo00Uoo`@0049oo`03001oogoo06Ioo`03001oogoo04Aoo`03001oogoo06Io
o`03001oogoo04Aoo`03001oogoo02eoo`004Woo00<007ooOol02Goo00<007ooOol0@goo00<007oo
Ool0IWoo00<007ooOol0A7oo00<007ooOol0IWoo00<007ooOol0A7oo00<007ooOol0;Goo000BOol0
0`00Oomoo`09Ool00`00Oomoo`13Ool00`00Oomoo`1VOol00`00Oomoo`14Ool00`00Oomoo`1VOol0
0`00Oomoo`14Ool00`00Oomoo`0]Ool0019oo`03001oogoo00Uoo`03001oogoo04=oo`03001oogoo
06Ioo`03001oogoo04Aoo`03001oogoo06Ioo`03001oogoo04Aoo`03001oogoo02eoo`004Woo00<0
07ooOol02Goo00<007ooOol0@goo00<007ooOol0IWoo00<007ooOol0A7oo00<007ooOol0IWoo00<0
07ooOol0A7oo00<007ooOol0;Goo000BOol00`00Oomoo`09Ool00`00Oomoo`13Ool00`00Oomoo`1V
Ool00`00Oomoo`14Ool00`00Oomoo`1VOol00`00Oomoo`14Ool00`00Oomoo`0]Ool000ioo`<00003
Ool007oo00Yoo`03001oogoo04=oo`03001oogoo06Ioo`03001oogoo04Aoo`03001oogoo06Ioo`03
001oogoo04Aoo`03001oogoo02eoo`004Goo0P002goo00<007ooOol0@goo00<007ooOol0IWoo00<0
07ooOol0A7oo00<007ooOol0IWoo00<007ooOol0A7oo00<007ooOol0;Goo000NOol00`00Oomoo`13
Ool00`00Oomoo`1VOol00`00Oomoo`14Ool00`00Oomoo`1VOol00`00Oomoo`14Ool00`00Oomoo`0]
Ool001ioo`03001oogoo04=oo`03001oogoo06Ioo`03001oogoo04Aoo`03001oogoo06Ioo`03001o
ogoo04Aoo`03001oogoo02eoo`007Woo00<007ooOol0@goo00<007ooOol0IWoo00<007ooOol0A7oo
00<007ooOol0IWoo00<007ooOol0A7oo00<007ooOol0;Goo000NOol20014Ool00`00Oomoo`1VOol0
0`00Oomoo`14Ool00`00Oomoo`1VOol00`00Oomoo`14Ool00`00Oomoo`0]Ool001ioo`03001oogoo
04=oo`03001oogoo06Ioo`03001oogoo04Aoo`03001oogoo06Ioo`03001oogoo04Aoo`03001oogoo
02eoo`007Woo00<007ooOol0@goo00<007ooOol0IWoo00<007ooOol0A7oo00<007ooOol0IWoo00<0
07ooOol0A7oo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`1VOol00`00Oomoo`14
Ool00`00Oomoo`1VOol00`00Oomoo`14Ool00`00Oomoo`0]Ool001ioo`03001oogoo04=oo`03001o
ogoo06Ioo`03001oogoo04Aoo`03001oogoo06Ioo`03001oogoo04Aoo`03001oogoo02eoo`007Woo
00<007ooOol0@goo00<007ooOol0IWoo00<007ooOol0A7oo00<007ooOol0IWoo00<007ooOol0A7oo
00<007ooOol0;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`1VOol00`00Oomoo`14Ool00`00Oomo
o`1VOol00`00Oomoo`14Ool00`00Oomoo`0]Ool001ioo`03001oogoo04=oo`03001oogoo06Ioo`03
001oogoo04Aoo`03001oogoo06Ioo`03001oogoo04Aoo`03001oogoo02eoo`007Woo00<007ooOol0
@goo00<007ooOol0IWoo00<007ooOol0A7oo00<007ooOol0IWoo00<007ooOol0A7oo00<007ooOol0
;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`1VOol00`00Oomoo`14Ool00`00Oomoo`1VOol00`00
Oomoo`14Ool00`00Oomoo`0]Ool001ioo`03001oogoo04=oo`03001oogoo06Ioo`03001oogoo04Ao
o`03001oogoo06Ioo`03001oogoo04Aoo`03001oogoo02eoo`007Woo0P00A7oo00<007ooOol0IWoo
00<007ooOol0A7oo00<007ooOol0IWoo00<007ooOol0A7oo00<007ooOol0;Goo000NOol00`00Oomo
o`13Ool00`00Oomoo`1VOol00`00Oomoo`14Ool00`00Oomoo`1VOol00`00Oomoo`14Ool00`00Oomo
o`0]Ool001ioo`03001oogoo04=oo`03001oogoo06Ioo`03001oogoo04Aoo`03001oogoo06Ioo`03
001oogoo04Aoo`03001oogoo02eoo`007Woo00<007ooOol0@goo00<007ooOol0IWoo00<007ooOol0
A7oo00<007ooOol0IWoo00<007ooOol0A7oo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool00`00
Oomoo`1VOol00`00Oomoo`14Ool00`00Oomoo`1VOol00`00Oomoo`14Ool00`00Oomoo`0]Ool001io
o`03001oogoo04=oo`03001oogoo06Ioo`03001oogoo04Aoo`03001oogoo06Ioo`03001oogoo04Ao
o`03001oogoo02eoo`007Woo00<007ooOol0@goo00<007ooOol0IWoo00<007ooOol0A7oo00<007oo
Ool0IWoo00<007ooOol0A7oo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`1VOol0
0`00Oomoo`14Ool00`00Oomoo`1VOol00`00Oomoo`14Ool00`00Oomoo`0]Ool001ioo`03001oogoo
04=oo`03001oogoo06Ioo`03001oogoo04Aoo`03001oogoo06Ioo`03001oogoo04Aoo`03001oogoo
02eoo`007Woo00<007ooOol0@goo00<007ooOol0IWoo00<007ooOol0A7oo00<007ooOol0IWoo00<0
07ooOol0A7oo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`1VOol00`00Oomoo`14
Ool00`00Oomoo`1VOol00`00Oomoo`14Ool00`00Oomoo`0]Ool001ioo`03001oogoo04=oo`03001o
ogoo06Ioo`03001oogoo04Aoo`03001oogoo06Ioo`03001oogoo04Aoo`03001oogoo02eoo`007Woo
0P00A7oo00<007ooOol0IWoo00<007ooOol0A7oo00<007ooOol0IWoo00<007ooOol0A7oo00<007oo
Ool0;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`1VOol00`00Oomoo`14Ool00`00Oomoo`1VOol0
0`00Oomoo`14Ool00`00Oomoo`0]Ool001ioo`03001oogoo04=oo`03001oogoo06Ioo`03001oogoo
04Aoo`03001oogoo06Ioo`03001oogoo04Aoo`03001oogoo02eoo`007Woo00<007ooOol0@goo00<0
07ooOol0IWoo00<007ooOol0A7oo00<007ooOol0IWoo00<007ooOol0A7oo00<007ooOol0;Goo000N
Ool00`00Oomoo`13Ool00`00Oomoo`1VOol00`00Oomoo`14Ool00`00Oomoo`1VOol00`00Oomoo`14
Ool00`00Oomoo`0]Ool001ioo`03001oogoo04=oo`03001oogoo06Ioo`03001oogoo04Aoo`03001o
ogoo06Ioo`03001oogoo04Aoo`03001oogoo02eoo`007Woo00<007ooOol0@goo00<007ooOol0IWoo
00<007ooOol0A7oo00<007ooOol0IWoo00<007ooOol0A7oo00<007ooOol0;Goo000NOol00`00Oomo
o`13Ool00`00Oomoo`1VOol00`00Oomoo`14Ool00`00Oomoo`1VOol00`00Oomoo`14Ool00`00Oomo
o`0]Ool001ioo`03001oogoo04=oo`03001oogoo06Ioo`03001oogoo04Aoo`03001oogoo06Ioo`03
001oogoo04Aoo`03001oogoo02eoo`007Woo00<007ooOol0@goo00<007ooOol0IWoo00<007ooOol0
A7oo00<007ooOol0IWoo00<007ooOol0A7oo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool00`00
Oomoo`1VOol00`00Oomoo`14Ool00`00Oomoo`1VOol00`00Oomoo`14Ool00`00Oomoo`0]Ool001io
o`8004Aoo`03001oogoo06Ioo`03001oogoo04Aoo`03001oogoo06Ioo`03001oogoo04Aoo`03001o
ogoo02eoo`007Woo00<007ooOol0@goo00<007ooOol0IWoo00<007ooOol0A7oo00<007ooOol0IWoo
00<007ooOol0A7oo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`1VOol00`00Oomo
o`14Ool00`00Oomoo`1VOol00`00Oomoo`14Ool00`00Oomoo`0]Ool001ioo`03001oogoo04=oo`03
001oogoo06Ioo`03001oogoo04Aoo`03001oogoo06Ioo`03001oogoo04Aoo`03001oogoo02eoo`00
7Woo00<007ooOol0@goo00<007ooOol0IWoo00<007ooOol0A7oo00<007ooOol0IWoo00<007ooOol0
A7oo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`1VOol00`00Oomoo`14Ool00`00
Oomoo`1VOol00`00Oomoo`14Ool00`00Oomoo`0]Ool000ioo`P000Qoo`03001oogoo04=oo`03001o
ogoo06Ioo`03001oogoo04Aoo`03001oogoo06Ioo`03001oogoo04Aoo`03001oogoo02eoo`003Woo
00<007ooOol017oo00<007ooOol01Woo00<007ooOol0@goo00<007ooOol0IWoo00<007ooOol0A7oo
00<007ooOol0IWoo00<007ooOol0A7oo00<007ooOol0;Goo000?Ool00`00Oomoo`0<Ool00`00Oomo
o`13Ool00`00Oomoo`1VOol00`00Oomoo`14Ool00`00Oomoo`1VOol00`00Oomoo`14Ool00`00Oomo
o`0]Ool0011oo`03001oogoo00]oo`03001oogoo04=oo`03001oogoo06Ioo`03001oogoo04Aoo`03
001oogoo06Ioo`03001oogoo04Aoo`03001oogoo02eoo`004Goo00<007ooOol02Woo00<007ooOol0
@goo00<007ooOol0IWoo00<007ooOol0A7oo00<007ooOol0IWoo00<007ooOol0A7oo00<007ooOol0
;Goo000BOol00`00Oomoo`09Ool40012Ool00`00Oomoo`1VOol00`00Oomoo`14Ool00`00Oomoo`1V
Ool00`00Oomoo`14Ool00`00Oomoo`0]Ool001=oo`03001oogoo00Qoo`03001oogoo04=oo`03001o
ogoo06Moo`03001oogoo04=oo`03001oogoo06Moo`03001oogoo04=oo`03001oogoo02eoo`0057oo
00<007ooOol01goo00<007ooOol0@goo00<007ooOol0Igoo00<007ooOol0@goo00<007ooOol0Igoo
00<007ooOol0@goo00<007ooOol0;Goo000EOol00`00Oomoo`06Ool00`00Oomoo`13Ool00`00Oomo
o`1WOol00`00Oomoo`13Ool00`00Oomoo`1WOol00`00Oomoo`13Ool00`00Oomoo`0]Ool001Eoo`03
001oogoo00Ioo`03001oogoo04=oo`03001oogoo06Moo`03001oogoo04=oo`03001oogoo06Moo`03
001oogoo04=oo`03001oogoo02eoo`003Woo00<007ooOol017oo00<007ooOol01Woo00<007ooOol0
@goo00<007ooOol0Igoo00<007ooOol0@goo00<007ooOol0Igoo00<007ooOol0@goo00<007ooOol0
;Goo000?Ool00`00Oomoo`02Ool00`00Oomoo`07Ool00`00Oomoo`13Ool00`00Oomoo`1WOol00`00
Oomoo`13Ool00`00Oomoo`1WOol00`00Oomoo`13Ool00`00Oomoo`0]Ool0011oo`@000Yoo`03001o
ogoo04=oo`03001oogoo06Moo`03001oogoo04=oo`03001oogoo06Moo`03001oogoo04=oo`03001o
ogoo02eoo`007Woo00<007ooOol0@goo00<007ooOol0Igoo00<007ooOol0@goo00<007ooOol0Igoo
00<007ooOol0@goo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`1WOol00`00Oomo
o`13Ool00`00Oomoo`1WOol00`00Oomoo`13Ool00`00Oomoo`0]Ool001ioo`03001oogoo04=oo`03
001oogoo06Moo`03001oogoo04=oo`03001oogoo06Moo`03001oogoo04=oo`03001oogoo02eoo`00
7Woo00<007ooOol0@goo00<007ooOol0Igoo00<007ooOol0@goo00<007ooOol0Igoo00<007ooOol0
@goo00<007ooOol0;Goo000NOol20014Ool00`00Oomoo`1WOol00`00Oomoo`13Ool00`00Oomoo`1W
Ool00`00Oomoo`13Ool00`00Oomoo`0]Ool001ioo`03001oogoo04=oo`03001oogoo06Moo`03001o
ogoo04=oo`03001oogoo06Moo`03001oogoo04=oo`03001oogoo02eoo`007Woo00<007ooOol0@goo
00<007ooOol0Igoo00<007ooOol0@goo00<007ooOol0Igoo00<007ooOol0@goo00<007ooOol0;Goo
000NOol00`00Oomoo`13Ool00`00Oomoo`1WOol00`00Oomoo`13Ool00`00Oomoo`1WOol00`00Oomo
o`13Ool00`00Oomoo`0]Ool001ioo`03001oogoo04=oo`03001oogoo06Moo`03001oogoo04=oo`03
001oogoo06Moo`03001oogoo04=oo`03001oogoo02eoo`007Woo00<007ooOol0@goo00<007ooOol0
Igoo00<007ooOol0@goo00<007ooOol0Igoo00<007ooOol0@goo00<007ooOol0;Goo000NOol00`00
Oomoo`13Ool00`00Oomoo`1WOol00`00Oomoo`13Ool00`00Oomoo`1WOol00`00Oomoo`13Ool00`00
Oomoo`0]Ool001ioo`03001oogoo04=oo`03001oogoo06Moo`03001oogoo04=oo`03001oogoo06Mo
o`03001oogoo04=oo`03001oogoo02eoo`007Woo00<007ooOol0@goo00<007ooOol0Igoo00<007oo
Ool0@goo00<007ooOol0Igoo00<007ooOol0@goo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool0
0`00Oomoo`1WOol00`00Oomoo`13Ool00`00Oomoo`1WOol00`00Oomoo`13Ool00`00Oomoo`0]Ool0
01ioo`03001oogoo04=oo`03001oogoo06Moo`03001oogoo04=oo`03001oogoo06Moo`03001oogoo
04=oo`03001oogoo02eoo`007Woo0P00A7oo00<007ooOol0Igoo00<007ooOol0@goo00<007ooOol0
Igoo00<007ooOol0@goo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`1WOol00`00
Oomoo`13Ool00`00Oomoo`1WOol00`00Oomoo`13Ool00`00Oomoo`0]Ool001ioo`03001oogoo04=o
o`03001oogoo06Moo`03001oogoo04=oo`03001oogoo06Moo`03001oogoo04=oo`03001oogoo02eo
o`007Woo00<007ooOol0@goo00<007ooOol0Igoo00<007ooOol0@goo00<007ooOol0Igoo00<007oo
Ool0@goo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`1WOol00`00Oomoo`13Ool0
0`00Oomoo`1WOol00`00Oomoo`13Ool00`00Oomoo`0]Ool001ioo`03001oogoo04=oo`03001oogoo
06Moo`03001oogoo04=oo`03001oogoo06Moo`03001oogoo04=oo`03001oogoo02eoo`007Woo00<0
07ooOol0@goo00<007ooOol0Igoo00<007ooOol0@goo00<007ooOol0Igoo00<007ooOol0@goo00<0
07ooOol0;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`1WOol00`00Oomoo`13Ool00`00Oomoo`1W
Ool00`00Oomoo`13Ool00`00Oomoo`0]Ool001ioo`03001oogoo04=oo`03001oogoo06Moo`03001o
ogoo04=oo`03001oogoo06Moo`03001oogoo04=oo`03001oogoo02eoo`007Woo00<007ooOol0@goo
00<007ooOol0Igoo00<007ooOol0@goo00<007ooOol0Igoo00<007ooOol0@goo00<007ooOol0;Goo
000NOol00`00Oomoo`13Ool00`00Oomoo`1WOol00`00Oomoo`13Ool00`00Oomoo`1WOol00`00Oomo
o`13Ool00`00Oomoo`0]Ool001ioo`8004Aoo`03001oogoo06Moo`03001oogoo04=oo`03001oogoo
06Moo`03001oogoo04=oo`03001oogoo02eoo`007Woo00<007ooOol0@goo00<007ooOol0Igoo00<0
07ooOol0@goo00<007ooOol0Igoo00<007ooOol0@goo00<007ooOol0;Goo000NOol00`00Oomoo`13
Ool00`00Oomoo`1WOol00`00Oomoo`13Ool00`00Oomoo`1WOol00`00Oomoo`13Ool00`00Oomoo`0]
Ool001ioo`03001oogoo04=oo`03001oogoo06Moo`03001oogoo04=oo`03001oogoo06Moo`03001o
ogoo04=oo`03001oogoo02eoo`007Woo00<007ooOol0@goo00<007ooOol0Igoo00<007ooOol0@goo
00<007ooOol0Igoo00<007ooOol0@goo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool00`00Oomo
o`1WOol00`00Oomoo`13Ool00`00Oomoo`1WOol00`00Oomoo`13Ool00`00Oomoo`0]Ool001ioo`03
001oogoo04=oo`03001oogoo06Moo`03001oogoo04=oo`03001oogoo06Moo`03001oogoo04=oo`03
001oogoo02eoo`007Woo00<007ooOol0@goo00<007ooOol0Igoo00<007ooOol0@goo00<007ooOol0
Igoo00<007ooOol0@goo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`1WOol00`00
Oomoo`13Ool00`00Oomoo`1WOol00`00Oomoo`13Ool00`00Oomoo`0]Ool001ioo`03001oogoo04=o
o`03001oogoo06Moo`03001oogoo04=oo`03001oogoo06Moo`03001oogoo04=oo`03001oogoo02eo
o`007Woo00<007ooOol0@goo00<007ooOol0Igoo00<007ooOol0@goo00<007ooOol0Igoo00<007oo
Ool0@goo00<007ooOol0;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`1WOol00`00Oomoo`13Ool0
0`00Oomoo`1WOol00`00Oomoo`13Ool00`00Oomoo`0]Ool001ioo`8004Aoo`03001oogoo06Moo`03
001oogoo04=oo`03001oogoo06Moo`03001oogoo04=oo`03001oogoo02eoo`007Woo00<007ooOol0
@goo00<007ooOol0Igoo00<007ooOol0@goo00<007ooOol0Igoo00<007ooOol0@goo00<007ooOol0
;Goo000NOol00`00Oomoo`13Ool00`00Oomoo`1WOol00`00Oomoo`13Ool00`00Oomoo`1WOol00`00
Oomoo`13Ool00`00Oomoo`0]Ool001ioo`03001oogoo04=oo`03001oogoo06Moo`03001oogoo04=o
o`03001oogoo06Moo`03001oogoo04=oo`03001oogoo02eoo`007Woo00<007ooOol0@goo00<007oo
Ool0Igoo00<007ooOol0@goo00<007ooOol0Igoo00<007ooOol0@goo00<007ooOol0;Goo000NOol0
0`00Oomoo`13Ool00`00Oomoo`1WOol00`00Oomoo`13Ool00`00Oomoo`1WOol00`00Oomoo`13Ool0
0`00Oomoo`0]Ool000moo`D000Yoo`03001oogoo04=oo`03001oogoo06Moo`03001oogoo04=oo`03
001oogoo06Moo`03001oogoo04=oo`03001oogoo02eoo`003Woo00<007ooOol00goo00<007ooOol0
1goo00<007ooOol0@goo00<007ooOol0Igoo00<007ooOol0@goo00<007ooOol0Igoo00<007ooOol0
@goo00<007ooOol0;Goo000EOol00`00Oomoo`06Ool00`00Oomoo`13Ool00`00Oomoo`1WOol00`00
Oomoo`13Ool00`00Oomoo`1WOol00`00Oomoo`13Ool00`00Oomoo`0]Ool001Eoo`03001oogoo00Io
o`03001oogoo04=oo`03001oogoo06Moo`03001oogoo04=oo`03001oogoo06Moo`03001oogoo04=o
o`03001oogoo02eoo`005Goo00<007ooOol01Woo00<007ooOol0@goo00<007ooOol0Igoo00<007oo
Ool0@goo00<007ooOol0Igoo00<007ooOol0@goo00<007ooOol0;Goo000EOol00`00Oomoo`06Oom7
001YOom7001YOom7000_Ool001Aoo`03001oogoo00Moo`03001oogoo0?moomAoo`004Goo0`002Woo
00<007ooOol0ogooe7oo000DOol00`00Oomoo`07Ool00`00Oomoo`3oOooDOol001Eoo`03001oogoo
00Ioo`03001oogoo0?moomAoo`005Goo00<007ooOol01Woo00<007ooOol0ogooe7oo000>Ool20004
Ool00`00Oomoo`07Ool00`00Oomoo`3oOooDOol0011oo`@000Yoo`03001oogoo0?moomAoo`00ogoo
mGoo003oOooeOol00?moooEoo`00ogoomGoo003oOooeOol00001\
\>"],
  ImageRangeCache->{{{0, 499}, {308, 0}} -> {-0.852576, -2.22074, 0.0568242, \
0.0353343}}]
}, Open  ]],

Cell[TextData[{
  "However, ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " can't do things like Integrals or Fourier series on the function defined \
above.  If you wanted to find several terms of the Fourier series of the \
above function I recommend defining the function over the period (-2.5 \
\[LessEqual] x \[LessEqual] 2.5) using UnitStep functions as in the next \
cell.  Of course the function isn't actually periodic this way, but the \
function FourierTrigSeries doesn't care about that."
}], "Text"],

Cell[BoxData[{
    \(\(ClearAll[f];\)\), "\[IndentingNewLine]", 
    \(\(f[
          x_] := \((1 + x)\) UnitStep[x + 5/2] + \((2 - x)\) 
            UnitStep[x] + \((\(-7\) + x)\) UnitStep[x - 2];\)\)}], "Input"],

Cell[CellGroupData[{

Cell["\<\
Needs[\"Calculus`FourierTransform`\"];
FourierTrigSeries[f[t], t, 4, FourierParameters\[Rule]{0,5/2}]\
\>", "Input",
  CellTags->"S5.12.1"],

Cell[BoxData[
    \(\@\(5\/2\)\ \((39\/\(10\ \@10\) + \@10\ \((\(2 - 15\ \[Pi]\)\/\(50\ \
\[Pi]\^2\) - \(\(-15\)\ \[Pi] - 2\)\/\(50\ \[Pi]\^2\))\)\ Cos[
              5\ \[Pi]\ t] + \@10\ \((\(2 + 45\ \[Pi]\)\/\(450\ \[Pi]\^2\) - \
\(45\ \[Pi] - 2\)\/\(450\ \[Pi]\^2\))\)\ Cos[
              15\ \[Pi]\ t] + \@10\ \((\(1 + 25\ \[Pi]\)\/\(25\ \[Pi]\^2\) - \
\(1 + 4\ \[Pi]\)\/\(25\ \[Pi]\^2\))\)\ Sin[5\ \[Pi]\ t] - 
          Sin[10\ \[Pi]\ t]\/\(5\ \@10\ \[Pi]\) + \@10\ \((\(75\ \[Pi] - \
1\)\/\(225\ \[Pi]\^2\) - \(12\ \[Pi] - 1\)\/\(225\ \[Pi]\^2\))\)\ Sin[
              15\ \[Pi]\ t] - 
          Sin[20\ \[Pi]\ t]\/\(10\ \@10\ \[Pi]\))\)\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "In general you should find that ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  "'s full symbolic capabilities including Integrate, LaplaceTransform, etc. \
can be used on piecewise continuous functions defined in terms of UnitsStep \
functions. This isn't true for the programming style used earlier."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Take generalized", "Subsection"],

Cell[TextData[{
  "The #& notation is explained in the discussion of ",
  ButtonBox["Function",
    ButtonData:>"Function",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text",
  CellTags->"FoldList_Example1"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(\(\(TakeRepeated[ls_List, t_List] := 
      First /@ Rest[\n
          FoldList[Through[{Take, Drop}[#1[\([2]\)], #2]] &, {{}, ls}, 
            t]]\)\(\n\)
    \)\), "\n", 
    \(\(a1 = {a, b, c, d, e, f, g, h, i, j, k, l, m};\)\), "\n", 
    \(TakeRepeated[a1, {2, 3, 4, 1}]\)}], "Input"],

Cell[BoxData[
    \({{a, b}, {c, d, e}, {f, g, h, i}, {j}}\)], "Output"]
}, Open  ]],

Cell["\<\
Portions of the function above are implemented below to illustrate how it \
works.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(tst = 
        FoldList[
          Through[{Take, Drop}[#1[\([2]\)], #2]] &, {{}, a1}, {2, 3, 4, 
            1}];\)\), "\n", 
    \(Do[Print[tst[\([n]\)]\ \ \ ], {n, 5}]\)}], "Input"],

Cell[BoxData[
    \({{}, {a, b, c, d, e, f, g, h, i, j, k, l, m}}\)], "Print"],

Cell[BoxData[
    \({{a, b}, {c, d, e, f, g, h, i, j, k, l, m}}\)], "Print"],

Cell[BoxData[
    \({{c, d, e}, {f, g, h, i, j, k, l, m}}\)], "Print"],

Cell[BoxData[
    \({{f, g, h, i}, {j, k, l, m}}\)], "Print"],

Cell[BoxData[
    \({{j}, {k, l, m}}\)], "Print"]
}, Open  ]],

Cell["\<\
The effects of FoldList and Through are hard to grasp.  The lines below \
demonstrates what they do.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(FoldList[f, x, {2, 3, 4, 1}]\ \  // TableForm\)], "Input"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {"x"},
          {\(f[x, 2]\)},
          {\(f[f[x, 2], 3]\)},
          {\(f[f[f[x, 2], 3], 4]\)},
          {\(f[f[f[f[x, 2], 3], 4], 1]\)}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      TableForm[ {x, 
        f[ x, 2], 
        f[ 
          f[ x, 2], 3], 
        f[ 
          f[ 
            f[ x, 2], 3], 4], 
        f[ 
          f[ 
            f[ 
              f[ x, 2], 3], 4], 1]}]]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[f, g];\)\), "\n", 
    \(Through[\((f + g)\)[x]]\)}], "Input"],

Cell[BoxData[
    \(f[x] + g[x]\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Thread generalized", "Subsection"],

Cell["This was written by Carl Woll.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(\(\(WollThread[h_, args_List] := \n\t
      Table[h @@ Part[args, Flatten[Position[Length /@ args, a_ /; a >= i]], 
            i], {i, Length[args]}]\)\(\n\)
    \)\ \), "\n", 
    \(WollThread[Plus, {{a, b}, {c, d, e}, {f}}]\)}], "Input"],

Cell[BoxData[
    \({a + c + f, b + d, e}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Flatten without evaluating subexpressions", "Subsection"],

Cell["This was written by Dave Wagner.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(\(Attributes[MyFlatten] = {HoldFirst};\)\), "\n", 
    \(\(\(MyFlatten[
        stuff_] := \n\ \ Flatten[Hold[stuff] /. List -> Hold, Infinity, 
          Hold] /. \n\t\tHold[x__] :> Hold[{x}]\)\(\n\)
    \)\ \ \), "\n", 
    \(MyFlatten[{{Sqrt[4] + 3, x1}, {{x3}, x4}}]\)}], "Input"],

Cell[BoxData[
    \(Hold[{\@4 + 3, x1, x3, x4}]\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Preventing TrigExpand from expanding as far as it can", "Subsection"],

Cell["\<\
You may not want TrigExpand to go as far as possible in expanding the \
trigonometric expression below.  Tom Burton prevents TrigExpand from \
expanding the products by changing the Head Times, and then changing it back \
to Times after using TrigExpand.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(\(expr = 
        Sin[2  \[Pi]\ \ \[Omega]\ \ t + 2\ \[Pi]\ \ \[Delta]];\)\), "\n", 
    \(TrigExpand[expr]\)}], "Input"],

Cell[BoxData[
    \(2\ Cos[\[Pi]\ \[Delta]]\ Cos[\[Pi]\ t\ \[Omega]]\^2\ Sin[\[Pi]\ \
\[Delta]] + 
      2\ Cos[\[Pi]\ \[Delta]]\^2\ Cos[\[Pi]\ t\ \[Omega]]\ Sin[\[Pi]\ t\ \
\[Omega]] - 
      2\ Cos[\[Pi]\ t\ \[Omega]]\ Sin[\[Pi]\ \[Delta]]\^2\ Sin[\[Pi]\ t\ \
\[Omega]] - 
      2\ Cos[\[Pi]\ \[Delta]]\ Sin[\[Pi]\ \[Delta]]\ Sin[\[Pi]\ t\ \
\[Omega]]\^2\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(TrigExpand[expr /. HoldPattern[Times[p__]] :> TimesHold[p]] /. \n\t
      TimesHold[p__] :> Times[p]\)], "Input"],

Cell[BoxData[
    \(Cos[2\ \[Pi]\ t\ \[Omega]]\ Sin[2\ \[Pi]\ \[Delta]] + 
      Cos[2\ \[Pi]\ \[Delta]]\ Sin[2\ \[Pi]\ t\ \[Omega]]\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Finding the Domain of a defined function", "Subsection"],

Cell["\<\
Suppose we have a function (f[_]) that is defined for certain arguments.
The Cells below include a  program designed to indicate the values where (f) \
is defined.\
\>", "Text"],

Cell[BoxData[{
    \(\(ClearAll[f, Domain];\)\), "\[IndentingNewLine]", 
    \(\(f[1] = Sin[1];\)\), "\n", 
    \(\(f[2] = Sin[2];\)\), "\n", 
    \(f[q_Rational] := Sin[Numerator[q]]\), "\n", 
    \(f[n_?Negative] := Sin[\(-n\)]\)}], "Input"],

Cell["Definitions for (f) are stored in DownValues[f].", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(DownValues[f]\)], "Input"],

Cell[BoxData[
    \({HoldPattern[f[1]] \[RuleDelayed] Sin[1], 
      HoldPattern[f[2]] \[RuleDelayed] Sin[2], 
      HoldPattern[f[q_Rational]] \[RuleDelayed] Sin[Numerator[q]], 
      HoldPattern[f[n_?Negative]] \[RuleDelayed] Sin[\(-n\)]}\)], "Output"]
}, Open  ]],

Cell["\<\
A certain part of each DownValue indicates the type of argument for which (f)
is defined.  This operation is an important part of the function below which \
gives the same
result without the Pattern matching notation.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(Part[#, 1, 1, 1] &\) /@ DownValues[f]\)], "Input"],

Cell[BoxData[
    \({1, 2, q_Rational, n_?Negative}\)], "Output"]
}, Open  ]],

Cell[BoxData[{
    \(\(ClearAll[Domain];\)\), "\[IndentingNewLine]", 
    \(Domain[func_] := 
      Module[{temp, t0, t1, 
          t2}, \n\((temp = \(Part[#, 1, 1, 1] &\) /@ 
              DownValues[f]; \n\t\t\tt0 = 
            Select[temp, NumericQ]; \n\t\t\tt1 = 
            Map[Part[#, 2, 1] &, Cases[temp, _Pattern]]; \n\t\t\tt2 = 
            Map[Part[#, 2] &, Cases[temp, _PatternTest]]; \n\t\t\tJoin[t0, 
            t1, t2])\)\n\t]\)}], "Input"],

Cell["\<\
  
Now Domain[f] can be use to determine the values where (f) is defined.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Domain[f]\)], "Input"],

Cell[BoxData[
    \({1, 2, Rational, Negative}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Finding the constant term(s) in a sum", "Subsection"],

Cell[TextData[{
  "The short program below will find the constant term in a sum.  The #& \
notation used here is explained in the discussion of ",
  ButtonBox["Function",
    ButtonData:>"Function",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text"],

Cell[BoxData[{
    \(\(ClearAll[ConstantTerm, x, a, b];\)\), "\[IndentingNewLine]", 
    \(\(ConstantTerm[expr_?NumericQ] := expr;\)\), "\[IndentingNewLine]", 
    \(\(\(ConstantTerm[expr_Plus] := 
        Select[expr, NumericQ[#] &];\)\(\[IndentingNewLine]\)
    \)\), "\n", 
    \(\(ConstantTerm[expr_] /; 
          MemberQ[Attributes[Evaluate[Head[expr]]], NumericFunction] = 
        0;\)\)}], "Input"],

Cell["\<\
Below we see several examples where the constant term is found.  When the \
expression has no constant term 0 is returned.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(ConstantTerm[
      1/3\  + \ x\  + \ Sqrt[2]\  + \ x\ y^2\  + \ 
        Pi\  + \ \(\(3\)\(\ \)\)\/\(1 + \@\(y + 1\)\)]\)], "Input"],

Cell[BoxData[
    \(1\/3 + \@2 + \[Pi]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(ConstantTerm[x\  + \ x\ y^2\  - \ x^2]\)], "Input"],

Cell[BoxData[
    \(0\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(ConstantTerm[\[Pi]\/\(4 + \[Pi]/2\)\ x]\)], "Input"],

Cell[BoxData[
    \(0\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(ConstantTerm[Sqrt[x] + 1/x + 5 + Sqrt[2]]\)], "Input"],

Cell[BoxData[
    \(5 + \@2\)], "Output"]
}, Open  ]],

Cell["\<\
ConstantTerm isn't defined if it's given an argument that isn't a numeric \
function. \
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(ConstantTerm[a && b]\)], "Input"],

Cell[BoxData[
    \(ConstantTerm[a && b]\)], "Output"]
}, Open  ]],

Cell["\<\
An alternate definition for ConstantTerm with the same effect is given in the \
next cell.\
\>", "Text"],

Cell[BoxData[{
    \(\(ClearAll[ConstantTerm];\)\), "\[IndentingNewLine]", 
    \(ConstantTerm[poly_?PolynomialQ] := \n\t
      With[{posn = \n\ \ \ \ \ \ Position[
              poly, _Symbol?\((Not[
                      NumericQ[#]] &)\), \n\t\ \ \ \ \ \ \ Heads -> 
                False\n\t\ \ \ ]\n\ \ }, \n\t
        ReplacePart[poly, 0, posn]\n]\)}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["KroneckerProduct of matrices", "Subsection"],

Cell[BoxData[{
    \(\(ClearAll["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(KroneckerProduct[A_?MatrixQ, 
        B_?MatrixQ] := \[IndentingNewLine]With[{tensor = 
            Outer[Times, Transpose[A], B]}, \[IndentingNewLine]\ \ Flatten[
          MapThread[Join, tensor, 2], 1]]\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(A = {{a11, a12}, {a21, a22}};\)\), "\n", 
    \(\(B = {{b11, b12}, {b21, b22}};\)\), "\n", 
    \(KroneckerProduct[A, B] // MatrixForm\)}], "Input"],

Cell[BoxData[
    TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {\(a11\ b11\), \(a11\ b12\), \(a12\ b11\), \(a12\ b12\)},
            {\(a11\ b21\), \(a11\ b22\), \(a12\ b21\), \(a12\ b22\)},
            {\(a21\ b11\), \(a21\ b12\), \(a22\ b11\), \(a22\ b12\)},
            {\(a21\ b21\), \(a21\ b22\), \(a22\ b21\), \(a22\ b22\)}
            }], "\[NoBreak]", ")"}],
      Function[ BoxForm`e$, 
        MatrixForm[ BoxForm`e$]]]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
InterpolatingFunction form for the solution to a system of equations.\
\>", "Subsection"],

Cell[TextData[{
  "Carl Woll gave the solution below on how to find Interpolating functions \
that solve a set of equations.  \nSuppose you are trying to find \
Interpolating functions for y[t], x[t] that solve the equations \n",
  Cell[BoxData[
      \(TraditionalForm\`\(\({\ 
        x[t]\^2 + y[t]\^2 == t\^2\ \ , \ \ y[t] == x[t]\^2\ }\)\(\ \)\)\)]],
  "  for (t) between 0 and 1."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[x, y, f, g, t];\)\), "\[IndentingNewLine]", 
    \(\(f[t_] := x[t]\^2 + y[t]\^2 - t\^2;\)\), "\[IndentingNewLine]", 
    \(\(g[t_] := y[t] - x[t]\^2;\)\), "\[IndentingNewLine]", 
    \(eqs = {\(f'\)[t] == 0, \(g'\)[t] == 0, f[1] == 0, 
        g[1] == 0}\)}], "Input"],

Cell[BoxData[
    RowBox[{"{", 
      RowBox[{
        RowBox[{
          RowBox[{\(\(-2\)\ t\), "+", 
            RowBox[{"2", " ", \(x[t]\), " ", 
              RowBox[{
                SuperscriptBox["x", "\[Prime]",
                  MultilineFunction->None], "[", "t", "]"}]}], "+", 
            RowBox[{"2", " ", \(y[t]\), " ", 
              RowBox[{
                SuperscriptBox["y", "\[Prime]",
                  MultilineFunction->None], "[", "t", "]"}]}]}], "==", "0"}], 
        ",", 
        RowBox[{
          RowBox[{
            RowBox[{
              SuperscriptBox["y", "\[Prime]",
                MultilineFunction->None], "[", "t", "]"}], "-", 
            RowBox[{"2", " ", \(x[t]\), " ", 
              RowBox[{
                SuperscriptBox["x", "\[Prime]",
                  MultilineFunction->None], "[", "t", "]"}]}]}], "==", "0"}], 
        ",", \(\(-1\) + x[1]\^2 + y[1]\^2 == 0\), 
        ",", \(y[1] - x[1]\^2 == 0\)}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell["soln=NDSolve[eqs,{x,y},{t,0,1}]", "Input"],

Cell[BoxData[
    RowBox[{"{", 
      RowBox[{
        RowBox[{"{", 
          RowBox[{
            RowBox[{"x", "\[Rule]", 
              TagBox[\(InterpolatingFunction[{{0.`, 1.`}}, "<>"]\),
                False,
                Editable->False]}], ",", 
            RowBox[{"y", "\[Rule]", 
              TagBox[\(InterpolatingFunction[{{0.`, 1.`}}, "<>"]\),
                False,
                Editable->False]}]}], "}"}], ",", 
        RowBox[{"{", 
          RowBox[{
            RowBox[{"x", "\[Rule]", 
              TagBox[\(InterpolatingFunction[{{0.`, 1.`}}, "<>"]\),
                False,
                Editable->False]}], ",", 
            RowBox[{"y", "\[Rule]", 
              TagBox[\(InterpolatingFunction[{{0.`, 1.`}}, "<>"]\),
                False,
                Editable->False]}]}], "}"}], ",", 
        RowBox[{"{", 
          RowBox[{
            RowBox[{"x", "\[Rule]", 
              TagBox[\(InterpolatingFunction[{{0.`, 1.`}}, "<>"]\),
                False,
                Editable->False]}], ",", 
            RowBox[{"y", "\[Rule]", 
              TagBox[\(InterpolatingFunction[{{0.`, 1.`}}, "<>"]\),
                False,
                Editable->False]}]}], "}"}], ",", 
        RowBox[{"{", 
          RowBox[{
            RowBox[{"x", "\[Rule]", 
              TagBox[\(InterpolatingFunction[{{0.`, 1.`}}, "<>"]\),
                False,
                Editable->False]}], ",", 
            RowBox[{"y", "\[Rule]", 
              TagBox[\(InterpolatingFunction[{{0.`, 1.`}}, "<>"]\),
                False,
                Editable->False]}]}], "}"}]}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
x1=x/.soln[[1]];
y1=y/.soln[[1]];

Block[{$DisplayFunction=Identity},
    p1=Plot[Re[x1[t]],{t,0,1},PlotLabel->\"Real Part of x\"];
    p2=Plot[Im[x1[t]],{t,0,1},PlotLabel->\"Imaginary Part of x\"];
    p3=Plot[Re[y1[t]],{t,0,1},PlotLabel->\"Real Part of y\"];
    p4=Plot[Im[y1[t]],{t,0,1},PlotLabel->\"Imaginary Part of y\"];
    ];
Show[GraphicsArray[{{p1,p2},{p3,p4}},GraphicsSpacing -> \
0.2,ImageSize->{550,380}]];\
\>", "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Making a list of integers relatively prime to n", "Subsection"],

Cell["\<\
Suppose we want to find a list of integers relatively prime to a Positive \
Integer (n). An immediate candidate is the function in the next cell, but it \
isn't very fast for large n because it has to examine each integer between 2 \
and (n-1).\
\>", "Text"],

Cell[BoxData[{
    \(\(ClearAll[RelativePrimes, pdLst, g];\)\), "\[IndentingNewLine]", 
    \(RelativePrimes[n_Integer] /; n > 2 := \[IndentingNewLine]Select[
        Range[n - 1], GCD[#, n] === 1 &]\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(RelativePrimes[400000];\) // Timing\)], "Input"],

Cell[BoxData[
    \({9.340000000000003`\ Second, Null}\)], "Output"]
}, Open  ]],

Cell["\<\
Ranko Bojanic found a faster solution that uses the fact  that  k< n is \
relatively prime to n if it is not divisible by any prime divisor of n. The \
list of  prime divisors of n is obtained by the following function.\
\>", "Text"],

Cell[BoxData[
    StyleBox[\(pdLst[n_] := First[Transpose[FactorInteger[n]]]\),
      FormatType->StandardForm,
      FontFamily->"Courier New",
      FontSize->10]], "Input"],

Cell[TextData[{
  "The definition for (pdList) in the next cell is faster, but it doesn't \
work in Version 3 or earlier. I am sort of splitting hairs here because an \
expression has to be quite large for Part[expr, All, 1] to be significantly \
faster, and FactorInteger will seldom return a list with more than ",
  Cell[BoxData[
      \(TraditionalForm\`10\^6\)]],
  " factors."
}], "Text"],

Cell[BoxData[
    \(pdLst[n_] := Part[FactorInteger[n], All, 1]\)], "Input"],

Cell["\<\
If (d) is a prime divisor of (n), then a list of integers between 2 and (n-1) \
which are not divisible by n is given by the following line.\
\>", "Text"],

Cell[BoxData[
    RowBox[{\(g[n_Integer, d_Integer]\), ":=", 
      StyleBox[\(Complement[Range[2, n - 1], \ d\ Range[n\ /\ d]]\),
        FormatType->StandardForm,
        FontFamily->"Courier New",
        FontSize->10]}]], "Input"],

Cell["\<\
We have to take all these lists, for all prime divisors of n, and their \
intersection will be the list of all integers between 2 and (n-1) which are \
relatively prime to n.  It is now easy to see that the list of relative prime \
integers of n can be found from the following function.\
\>", "Text"],

Cell[BoxData[{
    StyleBox[\(ClearAll[RelativePrimes];\),
      FormatType->StandardForm,
      FontFamily->"Courier New",
      FontSize->10], "\[IndentingNewLine]", 
    RowBox[{
      StyleBox[\(RelativePrimes[n_Integer] /; n > 2\),
        FormatType->StandardForm,
        FontFamily->"Courier New",
        FontSize->10], 
      StyleBox[":=",
        FormatType->StandardForm,
        FontFamily->"Courier New",
        FontSize->10], 
      StyleBox["\[IndentingNewLine]",
        FormatType->StandardForm,
        FontFamily->"Courier New",
        FontSize->10], 
      RowBox[{
        StyleBox["Module",
          FormatType->StandardForm,
          FontFamily->"Courier New",
          FontSize->10], 
        StyleBox["[",
          FormatType->StandardForm,
          FontFamily->"Courier New",
          FontSize->10], 
        StyleBox[\({g = 
              Complement[
                  Range[2, 
                    n - 1], #\ \ Range[
                      n\ /\ #]] &, \[IndentingNewLine]pdLst = 
              First[Transpose[FactorInteger[n]]]}, \[IndentingNewLine]Apply[
            Intersection, Map[g, pdLst]]\),
          FormatType->StandardForm,
          FontFamily->"Courier New",
          FontSize->10], "\[IndentingNewLine]", "]"}]}]}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(RelativePrimes[42]\)], "Input"],

Cell[BoxData[
    \({5, 11, 13, 17, 19, 23, 25, 29, 31, 37, 41}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "The solution in the next cell is a slight variation of a program Alan \
Hayes wrote and it's a little faster than the last program. Keep in mind this \
variation doesn't work in ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " Version 3 or earlier because of the use of Part[expt, All, 1]."
}], "Text",
  CellTags->"RelativePrimes_Fold"],

Cell[BoxData[{
    \(\(ClearAll[RelativePrimes];\)\), "\[IndentingNewLine]", 
    \(RelativePrimes[n_Integer] /; n > 2 := \[IndentingNewLine]Fold[
        Complement[#, #2] &, 
        Range[2, n - 1], \(Range[#, n - 1, #] &\) /@ 
          Part[FactorInteger[n], All, 1]]\)}], "Input"],

Cell[CellGroupData[{

Cell["How the above implementation of RelativePrimes works", "Subsubsection"],

Cell[TextData[{
  "Lets consider what it does to compute RelativePrimes[42].\n\n\
Part[FactorInteger[42],All,1] returns a list of prime factors of (42) which \
is {2.3.7}.\nThen the pure function (Range[#,41,#]&) is mapped over the list \
{2, 3, 7}. This is computed as (lst1) in the next cell.. The #& notation is \
explained in the discussion of ",
  ButtonBox["Slot and SlotSequence",
    ButtonData:>"Pure Functions",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(lst1 = \(Range[#, 41, #] &\) /@ {2, 3, 7}\)], "Input"],

Cell[BoxData[
    \({{2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 
        38, 40}, {3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39}, {7, 14, 
        21, 28, 35}}\)], "Output"]
}, Open  ]],

Cell["\<\
Then (lst2) is simply a list of integers from 2 to 41 which is the output of \
the next cell.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(lst2 = Range[2, 41]\)], "Input"],

Cell[BoxData[
    \({2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
      21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 
      39, 40, 41}\)], "Output"]
}, Open  ]],

Cell["\<\
Then the list of relative divisors is returned by effectively evaluating the \
next cell.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Fold[Complement[#, #2] &, lst2, lst1]\)], "Input"],

Cell[BoxData[
    \({5, 11, 13, 17, 19, 23, 25, 29, 31, 37, 41}\)], "Output"]
}, Open  ]],

Cell["\<\
What Fold does in the previous cell is explicitly spelled out in the next \
cell.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Complement[
      Complement[Complement[lst2, Part[lst1, 1]], Part[lst1, 2], 
        Part[lst1, 3]]]\)], "Input"],

Cell[BoxData[
    \({5, 11, 13, 17, 19, 23, 25, 29, 31, 37, 41}\)], "Output"]
}, Open  ]],

Cell["\<\
This implementation is elegant and runs efficiently in Mathematica, but I \
think the code is much more difficult to understand, so it's harder to \
maintain.\
\>", "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["An Algebraic Transformation", "Subsection"],

Cell["\<\
A user in the MathGroup wanted Mathematica to change 
((-1+a) x-a y)\\^2  into  ((a-1)x+a y)\\^2
Allan Hayes gave the solution in the next cell.  This solution has to be \
entered on a case by case basis.\
\>", "Text",
  CellTags->"Algebra_Transformation"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[a, x, y];\)\), "\[IndentingNewLine]", 
    \(\((\((\(-1\) + a)\) x - a\ y)\)^2 /. \((p_^n_?EvenQ)\) \[RuleDelayed] 
        Collect[\(-p\), x]^n\)}], "Input"],

Cell[BoxData[
    \(\((\((1 - a)\)\ x + a\ y)\)\^2\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "FactorRule in the next cell works and the rule doesn't need to know what \
variables are involved.  The only disadvantage of FactorRule is that it's \
more complicated than the first solution.  The use of (expr :) is discussed \
in my section on ",
  ButtonBox["Pattern",
    ButtonData:>"Pattern",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text"],

Cell[BoxData[
    \(\(FactorRule = 
        expr : \((__Plus)\)^\((n_?
                  EvenQ)\) \[RuleDelayed] \[IndentingNewLine]\((Map[\(-#\) &, 
                  Part[expr, 1], 1]^n /. 
              Times[\(-1\), a_, b___] \[RuleDelayed] \(-a\)*
                  b)\);\)\)], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\((\((\(-1\) + a)\) x - a\ y)\)^2 /. FactorRule\)], "Input"],

Cell[BoxData[
    \(\((\((1 - a)\)\ x + a\ y)\)\^2\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["A New Together", "Subsection"],

Cell[TextData[{
  "A user wrote to the MathGroup indicating that Together takes a very long \
time with expressions that have on the order of ",
  Cell[BoxData[
      \(10\^7\)]],
  " leaves. They noticed together expands the numerator of the result as in \
the next example, and suspected time could be saved if the numerator wasn't \
expanded."
}], "Text",
  CellTags->"Together"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(Together[\(a + b\)\/\(c + d\) + \(e + f\)\/\(g + f\)]\)}], "Input"],

Cell[BoxData[
    \(\(c\ e + d\ e + a\ f + b\ f + c\ f + d\ f + a\ g + b\ g\)\/\(\((c + \
d)\)\ \((f + g)\)\)\)], "Output"]
}, Open  ]],

Cell[BoxData[
    \(\(expr = \(a + b\)\/\(c + d\) + \(e + f\)\/\(g + f\);\)\)], "Input"],

Cell["\<\
Allan Hayes wrote SimpleTogether below which doesn't expand the numerator. \
Allan's code is given in the next cell and it's very fast and very slick.\
\>", "Text"],

Cell[BoxData[{
    \(SimpleTogether[
        expr_Plus] := \(\((\((Plus @@ \((#\ List @@ expr)\))\)/#)\) &\)[
        Times @@ Union[Denominator /@ \(List @@ expr\)]]\), "\n", 
    \(SimpleTogether[expr_] := expr\)}], "Input"],

Cell["\<\
In the next cell we see that SimpleTogether doesn't expand the numerator of \
the result.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(SimpleTogether[\(a + b\)\/\(c + d\) + \(e + f\)\/\(g + f\)]\)], "Input"],

Cell[BoxData[
    \(\(\((c + d)\)\ \((e + f)\) + \((a + b)\)\ \((f + g)\)\)\/\(\((c + d)\)\ \
\((f + g)\)\)\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Notice Allan's program uses Union which has a SameTest option.  Some \
nuances of Union and it's option are discussed at:\n",
  ButtonBox["http://support.wolfram.com/Kernel/Symbols/System/Union.html",
    ButtonData:>{
      URL[ "http://support.wolfram.com/Kernel/Symbols/System/Union.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "  where it says the default SameTest setting used by Union is stronger \
than using Equal or SameQ! This is demonstrated in the next line."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(lst = N[Pi, 18] {1, 1 + 10\^\(-20\)};\)\), "\[IndentingNewLine]", 
    \(Union[lst]\)}], "Input"],

Cell[BoxData[
    \({3.1415926535897932384626433833`18, 
      3.14159265358979323849405926890462`18}\)], "Output"]
}, Open  ]],

Cell["\<\
Next Union returns only one of the numbers when SameQ is used for SameTest.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Union[lst, SameTest \[Rule] \((SameQ[#1, #2] &)\)]\)], "Input"],

Cell[BoxData[
    \({3.1415926535897932384626433833`18}\)], "Output"]
}, Open  ]],

Cell["\<\
Considering the lines above I think Alan's SimpleTogether function should use \
Union with the option SameTest\[Rule](SameQ[{#1,#2}]&).  In some applications \
something else might be needed.  With that in mind I wrote a version of \
Allan's program that has a SameTest option. I also give SimpleTogether the \
options Modulus and Trig which the built-in version has and I give it a usage \
message. The only thing missing is the extension option which the built-in \
version of Together does have.\
\>", "Text"],

Cell[BoxData[{
    \(\(ClearAll[SimpleTogether];\)\), "\[IndentingNewLine]", 
    \(\(\(SimpleTogether::usage = \[IndentingNewLine]"\<SimpleTogether[expr] \
puts terms in a sum over a common denominator without 
factoring the numerator of the result.\>";\)\(\[IndentingNewLine]\)
    \)\), "\n", 
    \(\(Options[SimpleTogether] = {SameTest \[Rule] \((SameQ[#1, #2] &)\), 
          Modulus \[Rule] 0, Trig \[Rule] False};\)\), "\n", 
    \(\(\(Attributes[SimpleTogether] = {Listable};\)\(\[IndentingNewLine]\)
    \)\), "\n", 
    \(\(\(SimpleTogether[expr_Plus, 
        opts___?OptionQ] := \[IndentingNewLine]Module[{tst, mods, 
          trg}, \[IndentingNewLine]{tst, mods, 
            trg} = {SameTest, Modulus, Trig} /. 
            Flatten[{opts, 
                Options[
                  SimpleTogether]}]; \[IndentingNewLine]\(\((\((Plus @@ \((#\ \
List @@ expr)\))\)/#)\) &\)[
          Times @@ Union[\((\((Denominator[#, Modulus \[Rule] mods, 
                        Trig \[Rule] trg] &)\) /@ \(List @@ expr\))\), 
              SameTest \[Rule] tst]]\[IndentingNewLine]]\)\(\n\)
    \)\), "\n", 
    \(SimpleTogether[expr_, opts___?OptionQ] := expr\)}], "Input"],

Cell["Next we see that SimpleTogether still works.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(SimpleTogether[\(a + b\)\/\(c + d\) + \(e + f\)\/\(g + f\)]\)], "Input"],

Cell[BoxData[
    \(\(\((c + d)\)\ \((e + f)\) + \((a + b)\)\ \((f + g)\)\)\/\(\((c + d)\)\ \
\((f + g)\)\)\)], "Output"]
}, Open  ]],

Cell["\<\
I don't demonstrate the options but the default settings are shown below.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Options[SimpleTogether]\)], "Input"],

Cell[BoxData[
    \({SameTest \[Rule] \((#1 === #2 &)\), Modulus \[Rule] 0, 
      Trig \[Rule] False}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Making a Tensor into a Matrix", "Subsection"],

Cell["Consider the tensor (t1) in the next cell.", "Text",
  CellTags->"Tensor_to_Matrix"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[t1];\)\), "\[IndentingNewLine]", 
    \(\(t1 = {{{{1, 1, 1}, {1, 1, 1}, {1, 1, 1}}, {{2, 2, 2}, {2, 2, 2}, {2, 
                2, 2}}}, {{{3, 3, 3}, {3, 3, 3}, {3, 3, 3}}, {{4, 4, 4}, {4, 
                4, 4}, {4, 4, 4}}}};\)\), "\[IndentingNewLine]", 
    \(MatrixForm[t1]\)}], "Input"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"1", "1", "1"},
                    {"1", "1", "1"},
                    {"1", "1", "1"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"2", "2", "2"},
                    {"2", "2", "2"},
                    {"2", "2", "2"}
                    }], "\[NoBreak]", ")"}]},
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"3", "3", "3"},
                    {"3", "3", "3"},
                    {"3", "3", "3"}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {"4", "4", "4"},
                    {"4", "4", "4"},
                    {"4", "4", "4"}
                    }], "\[NoBreak]", ")"}]}
            }], "\[NoBreak]", ")"}],
      MatrixForm[ {{{{1, 1, 1}, {1, 1, 1}, {1, 1, 1}}, {{2, 2, 2}, {2, 2, 
        2}, {2, 2, 2}}}, {{{3, 3, 3}, {3, 3, 3}, {3, 3, 3}}, {{4, 4, 4}, {4, 
        4, 4}, {4, 4, 4}}}}]]], "Output"]
}, Open  ]],

Cell["\<\
A user in the MathGroup wanted to express this tensor as a matrix with \
MatrixForm in the next cell. Visually  this is simple. However, the \
complicated structure of a tensor makes it a challenge to write an elegant \
program that makes the conversion.\
\>", "Text"],

Cell[BoxData[
    TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {"1", "1", "1", "2", "2", "2"},
            {"1", "1", "1", "2", "2", "2"},
            {"1", "1", "1", "2", "2", "2"},
            {"3", "3", "3", "4", "4", "4"},
            {"3", "3", "3", "4", "4", "4"},
            {"3", "3", "3", "4", "4", "4"}
            }], "\[NoBreak]", ")"}],
      (MatrixForm[ #]&)]], "Output",
  Editable->False],

Cell["\<\
Allan Hayes provided the following two solutions in the MathGroup.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    RowBox[{
      RowBox[{"t2", "=", 
        RowBox[{"Apply", "[", 
          StyleBox[\(Join, Join\  @@ \ Transpose[t1, \ {1, \ 3, \ 2}], 1\),
            FormatType->StandardForm], 
          StyleBox["]",
            FormatType->StandardForm]}]}], 
      StyleBox[";",
        FormatType->StandardForm]}], "\[IndentingNewLine]", \(MatrixForm[
      t2]\)}], "Input"],

Cell[BoxData[
    TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {"1", "1", "1", "2", "2", "2"},
            {"1", "1", "1", "2", "2", "2"},
            {"1", "1", "1", "2", "2", "2"},
            {"3", "3", "3", "4", "4", "4"},
            {"3", "3", "3", "4", "4", "4"},
            {"3", "3", "3", "4", "4", "4"}
            }], "\[NoBreak]", ")"}],
      Function[ BoxForm`e$, 
        MatrixForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\ \(t2 = 
        Flatten[Map[Flatten, Transpose[t1, \ {1, \ 3, \ 2}], {2}], 
          1];\)\), "\[IndentingNewLine]", 
    \(MatrixForm[t2]\)}], "Input"],

Cell[BoxData[
    TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {"1", "1", "1", "2", "2", "2"},
            {"1", "1", "1", "2", "2", "2"},
            {"1", "1", "1", "2", "2", "2"},
            {"3", "3", "3", "4", "4", "4"},
            {"3", "3", "3", "4", "4", "4"},
            {"3", "3", "3", "4", "4", "4"}
            }], "\[NoBreak]", ")"}],
      Function[ BoxForm`e$, 
        MatrixForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell["\<\
Now suppose you want to do the same thing on the higher rank tensor (t1) \
below\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(\(m1 = {\ \ \ {\ {{11, 11}, {11, 11}}, {{12, 12}, {12, 
                12}}}, \ {\ {{13, 13}, {13, 13}}, {{14, 14}, {14, 
                14}}\ }};\)\(\[IndentingNewLine]\)
    \)\), "\n", 
    \(\(\(m2 = {\ \ \ {\ {{15, 15}, {15, 15}}, {{16, 16}, {16, 
                16}}}, \ {\ {{17, 17}, {17, 17}}, {{18, 18}, {18, 
                18}}\ }};\)\(\[IndentingNewLine]\)
    \)\), "\n", 
    \(\(\(m3 = {\ \ \ {\ {{19, 19}, {19, 19}}, {{20, 20}, {20, 
                20}}}, \ {\ {{21, 21}, {21, 21}}, {{22, 22}, {22, 
                22}}\ }};\)\(\[IndentingNewLine]\)
    \)\), "\n", 
    \(\(\(m4 = {\ \ \ {\ {{23, 23}, {23, 23}}, {{24, 24}, {24, 
                24}}}, \ {\ {{25, 25}, {25, 25}}, {{26, 26}, {26, 
                26}}\ }};\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(\(t1 = {{m1, m2}, {m3, m4}};\)\), "\[IndentingNewLine]", 
    \(MatrixForm[t1]\)}], "Input"],

Cell[BoxData[
    InterpretationBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {
                      RowBox[{"(", "\[NoBreak]", GridBox[{
                            {"11", "11"},
                            {"11", "11"}
                            }], "\[NoBreak]", ")"}], 
                      RowBox[{"(", "\[NoBreak]", GridBox[{
                            {"12", "12"},
                            {"12", "12"}
                            }], "\[NoBreak]", ")"}]},
                    {
                      RowBox[{"(", "\[NoBreak]", GridBox[{
                            {"13", "13"},
                            {"13", "13"}
                            }], "\[NoBreak]", ")"}], 
                      RowBox[{"(", "\[NoBreak]", GridBox[{
                            {"14", "14"},
                            {"14", "14"}
                            }], "\[NoBreak]", ")"}]}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {
                      RowBox[{"(", "\[NoBreak]", GridBox[{
                            {"15", "15"},
                            {"15", "15"}
                            }], "\[NoBreak]", ")"}], 
                      RowBox[{"(", "\[NoBreak]", GridBox[{
                            {"16", "16"},
                            {"16", "16"}
                            }], "\[NoBreak]", ")"}]},
                    {
                      RowBox[{"(", "\[NoBreak]", GridBox[{
                            {"17", "17"},
                            {"17", "17"}
                            }], "\[NoBreak]", ")"}], 
                      RowBox[{"(", "\[NoBreak]", GridBox[{
                            {"18", "18"},
                            {"18", "18"}
                            }], "\[NoBreak]", ")"}]}
                    }], "\[NoBreak]", ")"}]},
            {
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {
                      RowBox[{"(", "\[NoBreak]", GridBox[{
                            {"19", "19"},
                            {"19", "19"}
                            }], "\[NoBreak]", ")"}], 
                      RowBox[{"(", "\[NoBreak]", GridBox[{
                            {"20", "20"},
                            {"20", "20"}
                            }], "\[NoBreak]", ")"}]},
                    {
                      RowBox[{"(", "\[NoBreak]", GridBox[{
                            {"21", "21"},
                            {"21", "21"}
                            }], "\[NoBreak]", ")"}], 
                      RowBox[{"(", "\[NoBreak]", GridBox[{
                            {"22", "22"},
                            {"22", "22"}
                            }], "\[NoBreak]", ")"}]}
                    }], "\[NoBreak]", ")"}], 
              RowBox[{"(", "\[NoBreak]", GridBox[{
                    {
                      RowBox[{"(", "\[NoBreak]", GridBox[{
                            {"23", "23"},
                            {"23", "23"}
                            }], "\[NoBreak]", ")"}], 
                      RowBox[{"(", "\[NoBreak]", GridBox[{
                            {"24", "24"},
                            {"24", "24"}
                            }], "\[NoBreak]", ")"}]},
                    {
                      RowBox[{"(", "\[NoBreak]", GridBox[{
                            {"25", "25"},
                            {"25", "25"}
                            }], "\[NoBreak]", ")"}], 
                      RowBox[{"(", "\[NoBreak]", GridBox[{
                            {"26", "26"},
                            {"26", "26"}
                            }], "\[NoBreak]", ")"}]}
                    }], "\[NoBreak]", ")"}]}
            }], "\[NoBreak]", ")"}],
      MatrixForm[ {{{{{{11, 11}, {11, 11}}, {{12, 12}, {12, 12}}}, {{{13, 
        13}, {13, 13}}, {{14, 14}, {14, 14}}}}, {{{{15, 15}, {15, 15}}, {{16, 
        16}, {16, 16}}}, {{{17, 17}, {17, 17}}, {{18, 18}, {18, 18}}}}}, {{{{{
        19, 19}, {19, 19}}, {{20, 20}, {20, 20}}}, {{{21, 21}, {21, 21}}, {{
        22, 22}, {22, 22}}}}, {{{{23, 23}, {23, 23}}, {{24, 24}, {24, 
        24}}}, {{{25, 25}, {25, 25}}, {{26, 26}, {26, 26}}}}}}]]], "Output"]
}, Open  ]],

Cell["\<\
Mathematica Version 4 has a NestWhile function that comes in handy here. The \
code in the next cell will merge together tensors of any rank.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    RowBox[{
      RowBox[{"t2", "=", 
        RowBox[{"NestWhile", "[", 
          RowBox[{
            RowBox[{
              RowBox[{"Apply", "[", 
                
                StyleBox[\(Join, Join\  @@ \ Transpose[#, \ {1, \ 3, \ 2}], 
                  1\),
                  FormatType->StandardForm], 
                StyleBox["]",
                  FormatType->StandardForm]}], 
              StyleBox["&",
                FormatType->StandardForm]}], 
            StyleBox[",",
              FormatType->StandardForm], 
            StyleBox["t1",
              FormatType->StandardForm], 
            StyleBox[",",
              FormatType->StandardForm], 
            StyleBox[\(TensorRank[#] > 2 &\),
              FormatType->StandardForm]}], 
          StyleBox["]",
            FormatType->StandardForm]}]}], 
      StyleBox[";",
        FormatType->StandardForm]}], "\[IndentingNewLine]", \(MatrixForm[
      t2]\)}], "Input"],

Cell[BoxData[
    TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {"11", "11", "12", "12", "15", "15", "16", "16"},
            {"11", "11", "12", "12", "15", "15", "16", "16"},
            {"13", "13", "14", "14", "17", "17", "18", "18"},
            {"13", "13", "14", "14", "17", "17", "18", "18"},
            {"19", "19", "20", "20", "23", "23", "24", "24"},
            {"19", "19", "20", "20", "23", "23", "24", "24"},
            {"21", "21", "22", "22", "25", "25", "26", "26"},
            {"21", "21", "22", "22", "25", "25", "26", "26"}
            }], "\[NoBreak]", ")"}],
      Function[ BoxForm`e$, 
        MatrixForm[ BoxForm`e$]]]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Distribute - A slick application", "Subsection"],

Cell[TextData[{
  "Dr. John Erb sent a problem to the MathGroup.\nHe had several pieces of \
plastic of different thickness and wanted elegant ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " code that would determine what thicknesses can be made by stacking \
together one or more of the pieces of plastic. \n\nRobby Villegas replied to \
the MathGroup in   [mg3203] Re: array ordered, of 18 Feb 1996:\nThis problem \
amounts to finding all subsets of the list of thicknesses T, and for each \
subset adding up its elements. Any subset of T can be described by giving a \
status to each of T's elements: absent or present (as noted in Jorma \
Virtamo's solution). In terms of a contribution to the total thickness, the \
ith element adds 0 if it is absent, or adds (ti) if it is present. Thus, if \
you take the Cartesian product of these ordered pairs: {0, t1} x {0, t2} x . \
. . x {0, tn} you get all possible combinations of plates, e.g. {t1, 0, 0, \
t4, t5, ...}, and you can add the elements of each combination. 'Distribute' \
is perfect for forming Cartesian products. .....\nWhat follows is a slight \
variation of Robby's solution.\nFirst we get a list of thicknesses paired \
with zero in s2."
}], "Text",
  CellTags->"Distribute - Application"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(s1 = {0.12, 0.34, 0.53, 0.53};\)\), "\[IndentingNewLine]", 
    \(s2 = Thread[{0, s1}]\)}], "Input"],

Cell[BoxData[
    \({{0, 0.12`}, {0, 0.34`}, {0, 0.53`}, {0, 0.53`}}\)], "Output"]
}, Open  ]],

Cell["\<\
Next Distribute returns the cartesian product of all the ordered pairs.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(lst = Distribute[s2, List, List]\)], "Input"],

Cell[BoxData[
    \({{0, 0, 0, 0}, {0, 0, 0, 0.53`}, {0, 0, 0.53`, 0}, {0, 0, 0.53`, 
        0.53`}, {0, 0.34`, 0, 0}, {0, 0.34`, 0, 0.53`}, {0, 0.34`, 0.53`, 
        0}, {0, 0.34`, 0.53`, 0.53`}, {0.12`, 0, 0, 0}, {0.12`, 0, 0, 
        0.53`}, {0.12`, 0, 0.53`, 0}, {0.12`, 0, 0.53`, 0.53`}, {0.12`, 
        0.34`, 0, 0}, {0.12`, 0.34`, 0, 0.53`}, {0.12`, 0.34`, 0.53`, 
        0}, {0.12`, 0.34`, 0.53`, 0.53`}}\)], "Output"]
}, Open  ]],

Cell["\<\
As Robby Villegas pointed out Distribute can take third and fourth arguments \
which specify heads that should be used to replace the outer and inner heads \
that were distributed. In this case we want the outer head to remain as List \
and we want to add the sublists. Hence Distribute in the next line does the \
job.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Distribute[s2, List, List, List, Plus] // Union\)], "Input"],

Cell[BoxData[
    \({0, 0.12`, 0.34`, 0.46`, 0.53`, 0.65`, 0.8700000000000001`, 0.99`, 
      1.06`, 1.1800000000000002`, 1.4000000000000001`, 1.52`}\)], "Output"]
}, Open  ]],

Cell["\<\
Alternatively we can use the next cell to get lists of the form {{sum, \
list},...} where 'sum' is the total of the elements in 'list', and Union has \
removed elements with same sum, and sorted the list so the values of sum are \
increasing.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(q1 = 
      Union[\({Plus @@ #, #} &\) /@ lst, 
        SameTest -> \((First[#1] === First[#2] &)\)]\)], "Input"],

Cell[BoxData[
    \({{0, {0, 0, 0, 0}}, {0.12`, {0.12`, 0, 0, 0}}, {0.34`, {0, 0.34`, 0, 
          0}}, {0.46`, {0.12`, 0.34`, 0, 0}}, {0.53`, {0, 0, 0, 
          0.53`}}, {0.65`, {0.12`, 0, 0, 0.53`}}, {0.8700000000000001`, {0, 
          0.34`, 0, 0.53`}}, {0.99`, {0.12`, 0.34`, 0, 0.53`}}, {1.06`, {0, 
          0, 0.53`, 0.53`}}, {1.1800000000000002`, {0.12`, 0, 0.53`, 
          0.53`}}, {1.4000000000000001`, {0, 0.34`, 0.53`, 
          0.53`}}, {1.52`, {0.12`, 0.34`, 0.53`, 0.53`}}}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Union without sorting", "Subsection"],

Cell[TextData[{
  "In June 2000 there was a long thread in the MathGroup and you can read \
about the discussion at \n",
  ButtonBox["http://library.wolfram.com/mathgroup/archive/2000/Jun/msg00115.\
html",
    ButtonData:>{
      URL[ 
      "http://library.wolfram.com/mathgroup/archive/2000/Jun/msg00115.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "  on how to write an efficient function that does the same thing as Union \
without sorting the elements. Many agree that the best way to do this is with \
the following ingeniuos function written by Carl Woll."
}], "Text",
  CellTags->"DeleteRepititions"],

Cell[BoxData[{
    \(\(ClearAll[DeleteRepititions];\)\), "\[IndentingNewLine]", 
    \(DeleteRepititions[x_] := 
      Module[{t}, \[IndentingNewLine]t[n_] := \((t[n] = Sequence[]; n)\); 
        t /@ x\[IndentingNewLine]]\)}], "Input"],

Cell["DeleteRepititions is demonstrated below.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(DeleteRepititions[\ {3, 1, 1, 6, 3, 2, 1, 1, 8, 2, 6, 8}\ ]\)], "Input"],

Cell[BoxData[
    \({3, 1, 6, 2, 8}\)], "Output"]
}, Open  ]],

Cell["\<\
Actually the version Carl Woll posted used Block where I use Module above.  \
The function runs a bit faster when defined using Block, but then it gives \
the wrong result in the following example.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(DeleteRepititions[\ {3, 1, 1, t[3], 3, 2, t[3], 1, 1, 8, 2, 6, 
        8}\ ]\)], "Input"],

Cell[BoxData[
    \({3, 1, t[3], 2, 8, 6}\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["The Evaluation Process", "MiscSection"],

Cell[TextData[{
  "When evaluating an expression the mathematica kernel applies a collection \
of rules to an expression until the expression no longer changes.  In the \
discussion below I explain the evaluation process in greater depth.  This \
discussion of the evaluation process is based on a tutorial by David Withoff \
which is posted at   ",
  ButtonBox["http://library.wolfram.com/infocenter/Conferences/4683/",
    ButtonData:>{
      URL[ "http://library.wolfram.com/infocenter/Conferences/4683/"], None},
    ButtonStyle->"Hyperlink"],
  ".   That tutorial applied to ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " 2.0, and further details to reflect changes in ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " 3.0 come from  Power Programming With ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " the kernel (by David Wagner).  The book by David Wagner is apparently out \
of print.  As far as I know there were no changes to the evaluation process \
in ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " 4 or ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " 5.\n\nThis discussion doesn't cover the use of MakeExpression, $PreRead, \
$Pre, $Post, $PrePrint, FormatValues, and MakeBoxes.  That is all discussed \
in an ",
  ButtonBox["earlier section",
    ButtonData:>"$Pre;$Post",
    ButtonStyle->"Hyperlink"],
  ".  Each step discussed there requires completing the evaluation process \
discussed in this section.\n\nFurthermore, this discussion doesn't address \
the ",
  ButtonBox["pattern matching",
    ButtonData:>"Pattern-Matching",
    ButtonStyle->"Hyperlink"],
  " process.\n"
}], "Text",
  CellTags->"Evaluation-Process"],

Cell[CellGroupData[{

Cell["Steps of Evaluating of  h[a1, a2, a3]", "Subsection"],

Cell[TextData[{
  "Below I talk about \"external DownValues\", \"internal DownValues\" and \
likewise for UpValues, SubValues, and NValues.  External values are those \
that are not part of the ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " kernel while internal values are those that are part of the kernel.  \n\n\
The 17 steps below are repeated until an expression no longer changes, and \
the decision to end the process happens in step 3 below.  When the expression \
being evaluated does change the whole process starts again at the begininig \
on the new expression.  In pathalogical cases such as in the next cell \
evaluation completes due to exceeding $IterationLimit.  In other cases \
evaluation completes due to exceeding $RecursionLimit.  I don't discuss how \
counting iterarions and recursions fit into the evaluation process because I \
have never seen an explanation of when that happens."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[f];\)\), "\[IndentingNewLine]", 
    \(\(f[x_] := f[x + 1];\)\), "\[IndentingNewLine]", 
    \(f[2]\)}], "Input"],

Cell[BoxData[
    \($IterationLimit::"itlim" \(\(:\)\(\ \)\) 
      "Iteration limit of \!\(4096\) exceeded."\)], "Message"],

Cell[BoxData[
    \(Hold[f[4097 + 1]]\)], "Output"]
}, Open  ]],

Cell["\<\
This discussion overlooks the fact that NHoldAll, NHoldRest and NHoldFirst \
prevent N from approximating one or more argument of affected expressions.

Also the functions Plus and Times use internal UpValues and internal \
DownValues before external definitions, but that detail is overlooked \
below.\
\>", "Text"],

Cell[TextData[{
  StyleBox["Step 1",
    FontSize->16],
  "\nIf the expression being evaluated is a symbol with an OwnValue replace \
it with the OwnValue.  ",
  ButtonBox["OwnValues",
    ButtonData:>"OwnValues",
    ButtonStyle->"Hyperlink"],
  " are used when some value is assigned to a symbol (e.g.   x=5)."
}], "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[TextData[{
  StyleBox["Step 2",
    FontSize->16],
  "\nEvaluate the head of the expression."
}], "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[TextData[{
  StyleBox["Step 3",
    FontSize->16],
  "\nIf no part of the expression has changed during the last time around \
this procedure, return the expression.  This is an optimazation that prevents \
unecessary reevaluation of large expressions."
}], "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[TextData[{
  StyleBox["Step 4\n",
    FontSize->16],
  "If  (h) has the ",
  ButtonBox["HoldAllComplete",
    ButtonData:>"HoldAllComplete",
    ButtonStyle->"Hyperlink"],
  " attribute skip to step 11 below. HoldAllComplete prevents any changes to \
the arguments of a function.  \n\nIf (h) doens't have attributes that prevent \
evaluation of some or all arguments, the argumenrts evaluate from left to \
right.  When (h) has either attribute (",
  ButtonBox["HoldFirst, HoldRest, HoldAll",
    ButtonData:>"HoldAll",
    ButtonStyle->"Hyperlink"],
  ") evaluation continues without evaluating the affected arguments.  If any \
of the arguments have the head ",
  ButtonBox["Unevaluated",
    ButtonData:>"Unevaluated",
    ButtonStyle->"Hyperlink"],
  ", then the head Unevaluated is removed and further evaluation of the \
argument is prevented.  In step 17 the head Unevaluated may be restored to \
the argument.\n\nIf (h) has either attribute (HoldFirst, HoldRest, HoldAll), \
and an argument of (h) has the head Evaluate, then the argument evaluates \
even if the attribute would have prevented evaluation."
}], "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[TextData[{
  StyleBox["Step 5",
    FontSize->16],
  "\nIf (h) has the ",
  ButtonBox["Flat",
    ButtonData:>"Flat",
    ButtonStyle->"Hyperlink"],
  " attribute flatten layers of (h) as in the next cell."
}], "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(\(Attributes[h] = {Flat};\)\), "\[IndentingNewLine]", 
    \(h[a1, h[h[a2], a3], h[a4]]\)}], "Input"],

Cell[BoxData[
    \(h[a1, a2, a3, a4]\)], "Output"]
}, Open  ]],

Cell[TextData[{
  StyleBox["Step 6",
    FontSize->16],
  "\nIf (h) does not have the ",
  ButtonBox["SequenceHold",
    ButtonData:>"SequenceHold",
    ButtonStyle->"Hyperlink"],
  " attribute splice together sequences.  \nIn the next cell Sequences are \
spliced together."
}], "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(h[Sequence[a1, a2], Sequence[a3, a4], a5]\)}], "Input"],

Cell[BoxData[
    \(h[a1, a2, a3, a4, a5]\)], "Output"]
}, Open  ]],

Cell["\<\
Next (h) has the SequenceHold attribute and sequences aren't spliced.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(\(Attributes[h] = {SequenceHold};\)\), "\[IndentingNewLine]", 
    \(h[Sequence[a1, a2], Sequence[a3, a4], a5]\)}], "Input"],

Cell[BoxData[
    \(h[Sequence[a1, a2], Sequence[a3, a4], a5]\)], "Output"]
}, Open  ]],

Cell[TextData[{
  StyleBox["Step 7",
    FontSize->16],
  "\nIf (h) has the Listable attribute thread (h) over Lists.  \nThis has the \
same effect as evaluating  Thread[ h[a1,a2,a3] ]  when (h) isn't Listable."
}], "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(\(Attributes[h] = {Listable};\)\), "\[IndentingNewLine]", 
    \(h[{a1, a2, a3, a4}]\)}], "Input"],

Cell[BoxData[
    \({h[a1], h[a2], h[a3], h[a4]}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(h[{a1, a2}, c, {b1, b2}]\)], "Input"],

Cell[BoxData[
    \({h[a1, c, b1], h[a2, c, b2]}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  StyleBox["Step 8",
    FontSize->16],
  "\nIf (h) has the Orderless attribute sort the arguments of (h).  \nNote \
the arguments are sorted in canonical order which may not be the same as \
numeric order when the arguments are numeric.  This is seen in the next \
cell."
}], "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(\(Attributes[h] = {Orderless};\)\), "\[IndentingNewLine]", 
    \(h[\[Pi], 4, 2, 3]\)}], "Input"],

Cell[BoxData[
    \(h[2, 3, 4, \[Pi]]\)], "Output"]
}, Open  ]],

Cell[TextData[{
  StyleBox["Step 9",
    FontSize->16],
  "\nUse external ",
  ButtonBox["Upvalues",
    ButtonData:>"Upvalues",
    ButtonStyle->"Hyperlink"],
  " for the symbolic head of of each argument of the expression.  For example \
in the next cell we would use the external UpValues of (g1), then the \
external UpValues of (g2),  then the external UpValues of Derivative are \
used.\n\nThe \"symbolic head\" of an expression is the result of nesting Head \
until a symbol is returned.    Notice Derivative is the symbolic head of  ",
  Cell[BoxData[
      \(TraditionalForm\`\((\ \(f\ '\)\ [a]\ )\)\)]],
  ".  Here we have to nest head three times to get a symbol.  The head of of  \
",
  Cell[BoxData[
      \(TraditionalForm\`\((\ \(f\ '\)\ [a]\ )\)\)]],
  " is (f ' ), and the head of that is Derivative[1], which finally has the \
head Derivative."
}], "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[BoxData[{
    \(\(ClearAll["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(\(h[g1[a], g2[a], \(f'\)[a]];\)\)}], "Input"],

Cell[TextData[{
  StyleBox["Step 10",
    FontSize->16],
  "\nUse internal UpValues for the symbolic head of of each argument of the \
expression.  For example in the previous cell we would use the internal \
UpValues of (g1), then the internal UpValues of (g2),  then the internal \
UpValues of Derivative are used."
}], "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[TextData[{
  StyleBox["Step 11",
    FontSize->16],
  "\nIf (h) in  ",
  Cell[BoxData[
      \(TraditionalForm\`h[g1[a], \ g2[a], \ g3[a]\ ]\)]],
  "  is a symbol, the external ",
  ButtonBox["DownValues",
    ButtonData:>"DownValues",
    ButtonStyle->"Hyperlink"],
  " for (h) are used."
}], "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[TextData[{
  StyleBox["Step 12",
    FontSize->16],
  "\nIf (h)  in h[g1[a], g2[a], g3[a]]  is not a symbol the external ",
  ButtonBox["SubValues",
    ButtonData:>"SubValues",
    ButtonStyle->"Hyperlink"],
  " of (h) are used.  The head of the expression in the next cell is h[1].  \
Since (h[1]) isn't a symbol the Subvalues of (h) would be used."
}], "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[BoxData[
    \(\(\(h[1]\)[a, b, c];\)\)], "Input"],

Cell[TextData[{
  StyleBox["Step 13",
    FontSize->16],
  "\nIf (h) in  ",
  Cell[BoxData[
      \(TraditionalForm\`h[g1[a], \ g2[a], \ g3[a]\ ]\)]],
  "  is a symbol, the internal DownValues for (h) are used."
}], "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[TextData[{
  StyleBox["Step 14",
    FontSize->16],
  "\nIf (h)  in h[g1[a], g2[a], g3[a]]  is not a symbol the internal \
SubValues of (h) are used."
}], "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[TextData[{
  StyleBox["Step 15",
    FontSize->16],
  "\nUse external NValues if the expression being evaluated has the head N.  \
More precisely the ",
  ButtonBox["NValues",
    ButtonData:>"NValues",
    ButtonStyle->"Hyperlink"],
  " of the symbolic head of the first argument of N are used."
}], "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[TextData[{
  StyleBox["Step 16",
    FontSize->16],
  "\nUse internal NValues if the expression being evaluated has the head N.  \
As in the previous step the NValues of the symbolic head of the first \
argument of N are used."
}], "Text",
  CellFrame->{{0, 0}, {0, 0.5}}],

Cell[TextData[{
  StyleBox["Step 17",
    FontSize->16],
  "\nIf no UpValues, DownValues, SubValues, or NValues were used, and any \
arguments of (h) did have the head Unevaluated. Then the head Unevaluated is \
restored to that argument.  This is demonstrated in the next cell."
}], "Text",
  CellFrame->{{0, 0}, {0, 0.5}},
  CellTags->"Unevaluated-Advanced"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(\(a = 26;\)\), "\[IndentingNewLine]", 
    \(h[a + 4, Unevaluated[a]]\)}], "Input"],

Cell[BoxData[
    \(h[30, Unevaluated[a]]\)], "Output"]
}, Open  ]],

Cell["\<\
Unevaluated prevents sequences from splicing, and prevents attributes such as \
Flat and Orderless from taking effect.  This is demonstrated in the next \
cell.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(h[x + x, 
      Unevaluated[Sequence[x, 2  x], 
        Plus[z, Plus[a, d], Plus[d, a]]]]\)}], "Input"],

Cell[BoxData[
    \(h[2\ x, 
      Unevaluated[Sequence[x, 2\ x], 
        z + \((a + d)\) + \((d + a)\)]]\)], "Output"]
}, Open  ]],

Cell["\<\
However, in the next cell (h) has a downvalue that applies and we don't see \
Unevaluated in the result.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(h[x_, y_, z_] := h[x, y]\), "\[IndentingNewLine]", 
    \(h[4 + a, Unevaluated[a], 0]\)}], "Input"],

Cell[BoxData[
    \(h[4 + a, a]\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Some Examples", "Subsection"],

Cell["\<\
From the discussion above it may be hard to understand the order that parts \
of a complicated expression evaluate.  I provide two examples below to \
demonstrate.  First evaluate the next cell which makes some definitions we \
will use.\
\>", "Text"],

Cell[BoxData[{
    \(Clear["\<Global`*\>"]\), "\n", 
    \(\(a1 = b1;\)\), "\n", 
    \(\(a2 := {h[b2], b3};\)\), "\n", 
    \(\(b2 = c2;\)\), "\n", 
    \(\(b3 = b4;\)\), "\[IndentingNewLine]", 
    \(\(h = g;\)\), "\n", 
    \(\(g[x_] := x + z;\)\)}], "Input"],

Cell["Consider evaluation of the example in the next cell.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \({{h[a1], a2}, a1}\)], "Input"],

Cell[BoxData[
    \({{b1 + z, {c2 + z, b4}}, b1}\)], "Output"]
}, Open  ]],

Cell["\<\
You could see the order of evaluation using Trace or a similar function, but \
I find the output of these functions difficult to read. Instead I like to use \
Print statements as I do below.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(Clear["\<Global`*\>"]\), "\n", 
    \(\(a1 := \((Print["\<a1 \[Rule] b1\>"]; b1)\);\)\), "\n", 
    \(\(a2 := \((Print["\<a2 \[Rule] {h[b2],b3}\>"]; {h[b2], 
            b3})\);\)\), "\n", 
    \(\(b2 := \((Print["\<b2 \[Rule] c2\>"]; c2)\);\)\), "\n", 
    \(\(b3 := \((Print["\<b3 \[Rule] b4\>"]; 
          b4)\);\)\), "\[IndentingNewLine]", 
    \(\(h := \((Print["\<h \[Rule] g\>"]; g)\);\)\), "\n", 
    \(\(\(g[x_] := \((Print["\<g[_] \[Rule] \>" <> ToString[x] <> "\<+z\>"]; 
          x + z)\);\)\(\[IndentingNewLine]\)
    \)\), "\n", 
    \({{h[a1], a2}, a1}\)}], "Input"],

Cell[BoxData[
    \("h \[Rule] g"\)], "Print"],

Cell[BoxData[
    \("a1 \[Rule] b1"\)], "Print"],

Cell[BoxData[
    \("g[_] \[Rule] b1+z"\)], "Print"],

Cell[BoxData[
    \("a2 \[Rule] {h[b2],b3}"\)], "Print"],

Cell[BoxData[
    \("h \[Rule] g"\)], "Print"],

Cell[BoxData[
    \("b2 \[Rule] c2"\)], "Print"],

Cell[BoxData[
    \("g[_] \[Rule] c2+z"\)], "Print"],

Cell[BoxData[
    \("b3 \[Rule] b4"\)], "Print"],

Cell[BoxData[
    \("a1 \[Rule] b1"\)], "Print"],

Cell[BoxData[
    \({{b1 + z, {c2 + z, b4}}, b1}\)], "Output"]
}, Open  ]],

Cell["\<\
Next consider how expressions evaluate when the head (h) in h[x] is a \
non-trivial expression.  The next cell gives one such example.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(\(h = g;\)\), "\[IndentingNewLine]", 
    \(\(g[n_] := f[2\ n];\)\), "\[IndentingNewLine]", 
    \(\(f[n_]\)[y_] := y^n\), "\[IndentingNewLine]", 
    \(\(m = 3;\)\), "\[IndentingNewLine]", 
    \(\(\(s = t;\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(\(h[m]\)[s]\)}], "Input"],

Cell[BoxData[
    \(t\^6\)], "Output"]
}, Open  ]],

Cell["\<\
The next cell shows how evaluation in this example progresses.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear["\<Global`*\>"];\)\), "\[IndentingNewLine]", 
    \(\(h = \((Print["\<h \[Rule] g\>"]; g)\);\)\), "\[IndentingNewLine]", 
    \(\(\(g[
          n_] := \((Print["\<g[\>" <> ToString[n] <> "\<] \[Rule] f[\>" <> \ 
              ToString[2  n] <> "\<]\>"]; 
          f[2  n])\);\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(\(\(\(f[n_]\)[
        y_] := \((Print["\<f[\>" <> ToString[n] <> "\<][\>" <> 
            ToString[y] <> "\<] \[Rule] \>" <> ToString[y] <> "\<^\>" <> 
            ToString[n]]; y^n)\)\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(\(m = \((Print["\<m \[Rule] 3\>"]; 3)\);\)\), "\[IndentingNewLine]", 
    \(\(\(s = \((Print["\<s \[Rule] t\>"]; t)\);\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(\(h[m]\)[s]\)}], "Input"],

Cell[BoxData[
    \("h \[Rule] g"\)], "Print"],

Cell[BoxData[
    \("m \[Rule] 3"\)], "Print"],

Cell[BoxData[
    \("s \[Rule] t"\)], "Print"],

Cell[BoxData[
    \("g[3] \[Rule] f[6]"\)], "Print"],

Cell[BoxData[
    \("f[6][t] \[Rule] t^6"\)], "Print"],

Cell[BoxData[
    \(t\^6\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Where definitions are stored", "MiscSection"],

Cell[TextData[{
  "The order that definitions are stored and changing the order of the \
definitions is discussed in sections ",
  ButtonBox["2.4.7",
    ButtonStyle->"MainBookLink"],
  " and ",
  ButtonBox["2.4.13",
    ButtonStyle->"MainBookLink"],
  " of The ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " Book.\n\nIn some cases you might also need to write a function that will \
automatically examine the definitions of a certain symbol.  Your function \
might then return part of those definitions or automatically make changes to \
some of the definitions. In order to do this you need to know where the \
definitions are stored.  Mathematica stores definitions as DownValues, ",
  ButtonBox["UpValues",
    ButtonData:>"Upvalues",
    ButtonStyle->"Hyperlink"],
  ", OwnValues, NValues, SubValues, FormatValues, DefaultValues, and \
Messages.  Except for ",
  Cell[BoxData[
      \(TraditionalForm\`Attributes[symb]\)]],
  " and Options[symb] anything that affects evaluation of expressions \
involving symb are stored in one of these places and they are each discussed \
below.\n\nIf you evaluate (??symb) all information asssociated with symb is \
displayed, except the only message displayed is (symb::usage) and only if \
symb has a usage message."
}], "Text",
  CellTags->"Definition-Storage"],

Cell[CellGroupData[{

Cell["DownValues", "Subsection"],

Cell["\<\
Definitions made using (f[args] := rhs) are stored in DownValues[f] as \
demonstrated with the next cell.\
\>", "Text",
  CellTags->"DownValues"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[f, x, y];\)\), "\n", 
    \(\(x = 4;\)\), "\[IndentingNewLine]", 
    \(f[x_, y_] := x^2 - y^2\), "\n", 
    \(DownValues[f]\)}], "Input"],

Cell[BoxData[
    \({HoldPattern[f[x_, y_]] \[RuleDelayed] x\^2 - y\^2}\)], "Output"]
}, Open  ]],

Cell["\<\
Definitions made using (f[args] = rhs) are also in DownValues[f] as \
demonstrated with the next cell.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[f];\)\), "\[IndentingNewLine]", 
    \(f[x_, y_] = x^2 - y^2\), "\n", 
    \(DownValues[f]\)}], "Input"],

Cell[BoxData[
    \(16 - y\^2\)], "Output"],

Cell[BoxData[
    \({HoldPattern[f[x_, y_]] \[RuleDelayed] 16 - y\^2}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["UpValues", "Subsection"],

Cell["\<\
Definitions made using (f/: lhs ^:= rhs) are stored in UpValues[f] as \
demonstrated with the next cell.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[f];\)\), "\n", 
    \(\(x = 4;\)\), "\[IndentingNewLine]", 
    \(f[x_] + f[\(-x_\)] ^:= 2\ f[x]\), "\n", 
    \(UpValues[f]\)}], "Input"],

Cell[BoxData[
    \({HoldPattern[f[\(-x_\)] + f[x_]] \[RuleDelayed] 2\ f[x]}\)], "Output"]
}, Open  ]],

Cell["\<\
Definitions made using (f/: lhs := rhs) are also stored in UpValues[f].\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[f, g];\)\), "\[IndentingNewLine]", 
    \(\(f /: f[x_] + g[y_] := {x, y};\)\), "\[IndentingNewLine]", 
    \(UpValues[f]\)}], "Input"],

Cell[BoxData[
    \({HoldPattern[f[x_] + g[y_]] \[RuleDelayed] {x, y}}\)], "Output"]
}, Open  ]],

Cell["\<\
On rare occasions it's wise to store definitions using (f[args] ^= rhs) and \
these definitions are also stored in UpValues[f].\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[f, g];\)\), "\[IndentingNewLine]", 
    \(\(f[x_] + g[y_] ^= {x, y};\)\), "\n", 
    \(UpValues[f]\)}], "Input"],

Cell[BoxData[
    \({HoldPattern[f[x_] + g[y_]] \[RuleDelayed] {4, y}}\)], "Output"]
}, Open  ]],

Cell["\<\
Use of (f/: lhs = rhs) isn't even documented, but it seems to give the \
expected result and it also makes a definition stored in  UpValues[f].\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[f, g];\)\), "\[IndentingNewLine]", 
    \(\(f /: f[x_] + g[y_] = {x, y};\)\), "\[IndentingNewLine]", 
    \(UpValues[f]\)}], "Input"],

Cell[BoxData[
    \({HoldPattern[f[x_] + g[y_]] \[RuleDelayed] {4, y}}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["OwnValues", "Subsection"],

Cell["\<\
Definitions for (symb=expr) and (symb:=expr) are stored in OwnValues[symb].  \
The next cell assigns a value to expr.\
\>", "Text",
  CellTags->"OwnValues"],

Cell[BoxData[{\(ClearAll[expr, x];\), "\[IndentingNewLine]", 
    RowBox[{
      FormBox[\(expr = 2 + x\),
        "TraditionalForm"], ";"}]}], "Input"],

Cell["\<\
Next we see the above definition is stored in OwnValues[expr].\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(OwnValues[expr]\)], "Input"],

Cell[BoxData[
    \({HoldPattern[expr] \[RuleDelayed] 2 + x}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["NValues", "Subsection"],

Cell["\<\
Definitions for N[f[args]] are stored in NValues[f].  The next cell makes a \
definition for  N[f[x_,y_]].\
\>", "Text",
  CellTags->"NValues"],

Cell[BoxData[{
    \(\(ClearAll[f];\)\), "\n", 
    \(N[f[x_, y_]] := N[{x, y, 0, 0, 0}]\)}], "Input"],

Cell["\<\
The above definition isn't used to evaluate the next cell because N wasn't \
used.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(f[\[Pi], \@3]\)], "Input"],

Cell[BoxData[
    \(f[\[Pi], \@3]\)], "Output"]
}, Open  ]],

Cell["In the next cell our definition for N[f[x_,y_]] is used.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(N[f[\[Pi], \@3]]\)], "Input"],

Cell[BoxData[
    \({3.141592653589793`, 1.7320508075688772`, 0.`, 0.`, 0.`}\)], "Output"]
}, Open  ]],

Cell["Our definition for N[f[x_,y_]] is stored in NValues[f].", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(NValues[f]\)], "Input"],

Cell[BoxData[
    \({HoldPattern[N[f[x_, y_]]] \[RuleDelayed] 
        N[{x, y, 0, 0, 0}]}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["SubValues", "Subsection"],

Cell["\<\
Definitions for  f[arg1][args]  are stored in  SubValues[f].  This is \
demonstrated with the next cell.\
\>", "Text",
  CellTags->"SubValues"],

Cell[BoxData[{
    \(\(ClearAll[f, a, x, y];\)\), "\[IndentingNewLine]", 
    \(\(f[a_]\)[x_, y_] := {a, x^2 - y^2}\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(SubValues[f]\)], "Input"],

Cell[BoxData[
    \({HoldPattern[\(f[a_]\)[x_, y_]] \[RuleDelayed] {a, 
          x\^2 - y\^2}}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "The next cell has the effect of defining a function ",
  Cell[BoxData[
      \(TraditionalForm\`f\_1\)]],
  " and the definition is stored in SubValues[Subscript]. \nThe definition is \
stored in SubValues[Subscript] because the head of  ",
  Cell[BoxData[
      \(TraditionalForm\`f\_1[x_, y_]\)]],
  "  is  Subscript[f,1]. "
}], "Commentary",
  SingleLetterItalics->False],

Cell[CellGroupData[{

Cell[BoxData[{
    \(ClearAll[f, Subscript]\), "\[IndentingNewLine]", 
    \(\(f\_1[x_, y_] := x^2 - y^2;\)\), "\[IndentingNewLine]", 
    \(f\_1[4, 1]\)}], "Input"],

Cell[BoxData[
    \(15\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(SubValues[Subscript]\)], "Input"],

Cell[BoxData[
    \({HoldPattern[f\_1[x_, y_]] \[RuleDelayed] x\^2 - y\^2}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["FormatValues", "Subsection"],

Cell[TextData[{
  "A user once wrote to the MathGroup asking how one could ensure rational \
numbers greater than one are displayed as improper fractions.  ",
  Cell[BoxData[
      \(TraditionalForm\`P . J . \ Hinton\)]],
  " of Wolfram Research gave the solution below to change the way rational \
numbers are formated."
}], "Text",
  CellTags->"FormatValues"],

Cell[BoxData[{
    \(\(Unprotect[Rational];\)\), "\n", 
    \(Format[
        Rational[num_Integer, den_Integer] /; 
          Abs[num/den] > 
            1] := \[IndentingNewLine]DisplayForm[\[IndentingNewLine]RowBox[{\
ToString[Quotient[num, den]], \[IndentingNewLine]FractionBox[
              ToString[Mod[num, den]], 
              ToString[
                den]]\[IndentingNewLine]}\[IndentingNewLine]]\
\[IndentingNewLine]]\)}], "Input"],

Cell["\<\
After evaluating the cell above the output of the next cell is formatted as \
an improper fraction.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(14/3 - 1\)], "Input"],

Cell[BoxData[
    TagBox[\(3  2\/3\),
      DisplayForm]], "Output"]
}, Open  ]],

Cell["\<\
Below we see that the above definition is stored in  FormatValues[Rational]. \
\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(FormatValues[Rational]\)], "Input"],

Cell[BoxData[
    RowBox[{"{", 
      RowBox[{
        RowBox[{\(HoldPattern[
            MakeBoxes[
              Rational[num_Integer, den_Integer] /; Abs[num\/den] > 1, 
              FormatType_]]\), "\[RuleDelayed]", 
          RowBox[{"Format", "[", 
            RowBox[{
              
              TagBox[\(ToString[Quotient[num, den]] 
                  ToString[Mod[num, den]]\/ToString[den]\),
                DisplayForm], ",", "FormatType"}], "]"}]}], ",", 
        RowBox[{
          RowBox[{"HoldPattern", "[", 
            TagBox[
              
              FormBox[\(Rational[num_Integer, den_Integer] /; 
                  Abs[num\/den] > 1\),
                "StandardForm"],
              Format], "]"}], "\[RuleDelayed]", 
          
          TagBox[\(ToString[Quotient[num, den]] 
              ToString[Mod[num, den]]\/ToString[den]\),
            DisplayForm]}]}], "}"}]], "Output"]
}, Open  ]],

Cell["\<\
Before you continue you might want to evaluate the next cell to restore the \
default formatting of rational numbers.\
\>", "Text"],

Cell[BoxData[{
    \(\(FormatValues[Rational] = {};\)\), "\[IndentingNewLine]", 
    \(\(Protect[Rational];\)\)}], "Input"],

Cell[TextData[{
  "MakeBoxes is similar to Format and FormatValues, and definitions using \
MakeBoxes are stored in ",
  Cell[BoxData[
      \(TraditionalForm\`DownValues[MakeBoxes]\)]],
  " or possibly in UpValues for the type of expression being formatted."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["DefaultValues", "Subsection"],

Cell[TextData[{
  "Anything stored using Default[f], Default[f,i], or Default[f,i,n] is \
stored in DefaultValues[f].  The built-in functions Plus, Times and Power \
have defaults stored as DefaultValues as the next cell shows. Use of ",
  ButtonBox["Default",
    ButtonData:>"Default details",
    ButtonStyle->"Hyperlink"],
  " was explained in an earlier section. "
}], "Text",
  CellTags->"DefaultValues"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(DefaultValues[Plus]\), "\n", 
    \(DefaultValues[Times]\), "\n", 
    \(DefaultValues[Power]\)}], "Input"],

Cell[BoxData[
    \({HoldPattern[Default[Plus]] \[RuleDelayed] 0}\)], "Output"],

Cell[BoxData[
    \({HoldPattern[Default[Times]] \[RuleDelayed] 1}\)], "Output"],

Cell[BoxData[
    \({HoldPattern[Default[Power, 2]] \[RuleDelayed] 1}\)], "Output"]
}, Open  ]],

Cell["\<\
 Options are also stored in DefaultValues as demonstrated with the next cell.\
\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(DefaultValues[Cancel]\)], "Input"],

Cell[BoxData[
    \({HoldPattern[Options[Cancel]] \[RuleDelayed] {Extension \[Rule] None, 
          Modulus \[Rule] 0, Trig \[Rule] False}}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "You could use DefaultValues to see what options a function has or change \
the options, but I can't see why anyone would want to do this.  Since options \
are stored as DefaultValues you should be cautious about using ",
  Cell[BoxData[
      \(TraditionalForm\`DefaultValues[symb] = {}\)]],
  " to delete all defaults.\n",
  "\nIn the next cell I assign a value to Default[f1,2] and I give f1 \
options."
}], "Text"],

Cell[BoxData[{
    \(\(ClearAll[f1];\)\), "\[IndentingNewLine]", 
    \(\(Default[f1, 2] = {1};\)\), "\[IndentingNewLine]", 
    \(\(Options[f1] = {opt1 \[Rule] val1, 
          opt3 \[RuleDelayed] val3};\)\)}], "Input"],

Cell["\<\
The next cell shows that the previous definitions are stored in \
DefaultValues[f1].\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(DefaultValues[f1]\)], "Input"],

Cell[BoxData[
    \({HoldPattern[Default[f1, 2]] \[RuleDelayed] {1}, 
      HoldPattern[Options[f1]] \[RuleDelayed] {opt1 \[Rule] val1, 
          opt3 \[RuleDelayed] val3}}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Messages", "Subsection"],

Cell["The next cell makes Messages related to the symbol foo.", "Text",
  CellTags->"Messages"],

Cell[BoxData[{
    \(\(foo::usage = "\<foo is a Symbol.\>";\)\), "\[IndentingNewLine]", 
    \(\(foo::err1 = "\<foo had invalid input.\>";\)\), "\[IndentingNewLine]", \

    \(\(foo::err2 = "\<foo got stuck.\>";\)\)}], "Input"],

Cell["\<\
At times you might want to check on or manipulate the messages above.  The \
next cell gives us the list of messages as they are stored.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Messages[foo]\)], "Input"],

Cell[BoxData[
    \({HoldPattern[foo::"err1"] \[RuleDelayed] "foo had invalid input.", 
      HoldPattern[foo::"err2"] \[RuleDelayed] "foo got stuck.", 
      HoldPattern[foo::"usage"] \[RuleDelayed] 
        "foo is a Symbol."}\)], "Output"]
}, Open  ]],

Cell["\<\
Below we see that evaluating (??foo) displays the usage message for foo, but \
not the error messages for foo.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(?? foo\)], "Input"],

Cell[BoxData[
    \("foo is a Symbol."\)], "Print",
  CellTags->"Info3248519924-1535622"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Subtle points about arithmetic", "MiscSection"],

Cell["\<\
I agree with the result below.  If we multiply a number with 50 digits of \
precision by a machine precision number, all the extra digits are garbage.  I \
get back a number with 16 digits of precision and this is good.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(pie = SetPrecision[Pi, 50];\)\), "\[IndentingNewLine]", 
    \(\(area = pie \((1.25)\)\^2;\)\), "\[IndentingNewLine]", 
    \({Precision[pie], Precision[area]}\)}], "Input"],

Cell[BoxData[
    \({50, 16}\)], "Output"]
}, Open  ]],

Cell["\<\
Next I multiply a number with only 4 digits of precision by a machine \
precision number and Mathematica doesn't know that the result should have 4 \
digits of precision.  I don't like this.\
\>", "Commentary"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(mass = SetPrecision[4.2, 4];\)\), "\[IndentingNewLine]", 
    \(\(density = mass/1.25;\)\), "\[IndentingNewLine]", 
    \({Precision[mass], Precision[density]}\)}], "Input"],

Cell[BoxData[
    \({4, 16}\)], "Output"]
}, Open  ]],

Cell["\<\
To do the calculation above correctly we can do something like the line \
below.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(mass = SetPrecision[4.2, 4];\)\), "\[IndentingNewLine]", 
    \(\(density = mass/SetPrecision[1.25, \ 10];\)\), "\[IndentingNewLine]", 
    \({Precision[mass], Precision[density]}\)}], "Input"],

Cell[BoxData[
    \({4, 4}\)], "Output"]
}, Open  ]],

Cell["\<\
At first you might guess that if a numeric function gets a machine precision \
number it returns a machine precision number whenever possible.  This isn't \
always true, and it can be hard to predict what you will get.  Consider the \
line below, and look at the ByteCount of the results.  If memory is concern \
and precision isn't important you should use N[Erf[x2]] to make sure the \
result is a machine number.\
\>", "Commentary"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(x1 = Erf[26.0];\)\), "\[IndentingNewLine]", 
    \(\(x2 = Erf[27.0];\)\), "\[IndentingNewLine]", 
    \({Precision[x1], Precision[x2]}\)}], "Input"],

Cell[BoxData[
    \({16, 331}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \({ByteCount[x1], ByteCount[x2]}\)], "Input"],

Cell[BoxData[
    \({16, 192}\)], "Output"]
}, Open  ]],

Cell["\<\
In the line below (b1 = a1 + Pi - 1) and the kernel thinks (b1) has better \
precision than (a1).  This is wrong!\
\>", "Commentary"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(a1 = Exp[1000.0]/Exp[1000];\)\), "\[IndentingNewLine]", 
    \(\(b1 = a1 + \[Pi] - 1;\)\), "\[IndentingNewLine]", 
    \({Precision[a1], Precision[b1]}\)}], "Input"],

Cell[BoxData[
    \({13, 24}\)], "Output"]
}, Open  ]],

Cell["\<\
WRI tech support  indicated the calculation above can be 
done correctly by using ($MinPrecision = -Infinity).  I can't recall how, but \
I think I once saw that you can cause problems if you use the default setting \
($MinPrecision=-\[Infinity]).\
\>", "Commentary"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(Block[{$MinPrecision = \(-\[Infinity]\)}, \[IndentingNewLine]\(b1 = 
          a1 + \[Pi] - 1;\)]\), "\[IndentingNewLine]", 
    \({Precision[a1], Precision[b1]}\)}], "Input"],

Cell[BoxData[
    \({13, 13}\)], "Output"]
}, Open  ]],

Cell["\<\
Sometimes the kernel leaves machine precision arithmetic unfinished.  See the \
example below.\
\>", "Commentary"],

Cell[CellGroupData[{

Cell[BoxData[
    \(x = 15.4/0.125 + Log[1 - Erf[8]]\)], "Input"],

Cell[BoxData[
    \(\(\(123.2`\)\(\[InvisibleSpace]\)\) + Log[1 - Erf[8]]\)], "Output"]
}, Open  ]],

Cell["\<\
Below we see simply using N on the result above returns Indeterminate.  \
That's why it was returned unfinished.  We have to use arbitrary precision to \
get an ordinary number.  In this case I am impressed with how careful the \
kernel is.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \({N[x], N[x, 17]}\)], "Input"],

Cell[BoxData[
    \({Indeterminate, 56.540528029194846`}\)], "Output"]
}, Open  ]],

Cell["\<\
Next we say x2=N[x,25], but we only get a machine number back because of the \
123.2 term in (x).\
\>", "Commentary"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(x2 = N[x, 25];\)\), "\[IndentingNewLine]", 
    \({Precision[x2], MachineNumberQ[x2]}\)}], "Input"],

Cell[BoxData[
    \({16, True}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Below I define x1 and x2 to be two machine numbers very close to 9.1. \
Notice ",
  Cell[BoxData[
      \(TraditionalForm\`\((x1 === 9.1)\)\)]],
  " returns True and (x2===9.1) returns False.  It's interesting that \
(x1===9.1) returns True because we don't get zero for (x1-9.1).  Hence, if \
you really want to know if two machine numbers are exactly the same you \
should use (x-y===0.0) or (x-y\[Equal]0.0) or (x-y\[Equal]0).  I haven't \
looked into the trade offs between the three forms.  It may be that neither \
of these forms is sufficient if you are comparing arbitrary precision \
numbers."
}], "Commentary"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(x1 = 9.1 + 8*$MachineEpsilon;\)\), "\[IndentingNewLine]", 
    \(\(x2 = 9.1 + 16*$MachineEpsilon;\)\), "\n", 
    \({x1 === 9.1, x2 === 9.1, x1 - 9.1, x2 - 9.1}\)}], "Input"],

Cell[BoxData[
    \({True, False, 1.7763568394002505`*^-15, 
      3.552713678800501`*^-15}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "In the cell above we saw that both x1 and x2 are a bit larger than 9.1.  \
In the next cell I define a value for f[9.1] and this definition is used for \
f[x1] but not for f[x2].  It seems that when the kernel computes f[x] the \
definition assigned to f[9.1] is used if and only if ",
  Cell[BoxData[
      \(TraditionalForm\`\((x === 9.1)\)\)]],
  " evaluates to True."
}], "Commentary"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[f];\)\), "\[IndentingNewLine]", 
    \(\(f[9.1] = 25;\)\), "\[IndentingNewLine]", 
    \({f[9.1], f[x1], f[x2]}\), "\[IndentingNewLine]", 
    \(\)}], "Input"],

Cell[BoxData[
    \({25, 25, f[9.100000000000003`]}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "For more read the  ",
  ButtonBox["Numerics Report",
    ButtonStyle->"GettingStartedLink"],
  "  in the Help Browser."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Lists and Tables of Data", "MiscSection"],

Cell[CellGroupData[{

Cell["Importing an columns of data from an ASCII file", "Subsection"],

Cell["\<\
Suppose you have matrix of data in an ASCII file, and the file is in a \
directory included in $Path.\
\>", "Text"],

Cell[BoxData[
    \(\(!! data.txt\)\)], "Input"],

Cell["\<\
In version 4.0 and later data can be brought in with the Import command using \
the line in the next cell.  When the second argument is \"Table\" entries are \
brought in as numbers when possible and as strings when they can't be \
numbers.\
\>", "Text"],

Cell["\<\
MyData=Import[\"data.txt\",\"Table\"];
TableForm[MyData]\
\>", "Input"],

Cell["\<\
This can be done in any version of Mathematica using ReadList as below. You \
might also prefer this method because it may be faster than Import. In this \
example the second argument {Word, Number, Number} indicates each line is an \
ASC string, followed two numbers.\
\>", "Text"],

Cell["\<\
MyData=ReadList[\"data.txt\", {Word,Number,Number}];
TableForm[MyData]\
\>", "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Working with a List or Table of data", "Subsection"],

Cell["\<\
For some efficient ways of making lists see examples of Range, Array, and \
Table.  Some good ways to work with a matrix of numbers are shown in the \
Cells below.  First we make a matrix of random integers called (data).\t\t  \
\
\>", "Text",
  CellTags->"Lists_Tables"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(data = 
        Table[{Random[Integer, {0, 10}], \n\tRandom[Integer, {50, 60}], \n\t
            Random[Integer, {\(-10\), 0}]}, {i, 8}];\)\), "\n", 
    \(TableForm[data]\)}], "Input",
  FontSize->12],

Cell[BoxData[
    TagBox[GridBox[{
          {"2", "51", \(-1\)},
          {"7", "50", \(-5\)},
          {"10", "57", \(-5\)},
          {"7", "60", \(-10\)},
          {"6", "54", \(-4\)},
          {"2", "50", "0"},
          {"10", "58", "0"},
          {"10", "54", \(-10\)}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      Function[ BoxForm`e$, 
        TableForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell[TextData[{
  "Functions that have the Listable attribute are performed on each element \
of nested lists.  Hence the following line adds 100 to each element of data. \
Besides being very concise this is the most efficient way to do something \
like this in ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(d2 = data + 500;\)\), "\n", 
    \(TableForm[d2]\)}], "Input"],

Cell[BoxData[
    TagBox[GridBox[{
          {"502", "551", "499"},
          {"507", "550", "495"},
          {"510", "557", "495"},
          {"507", "560", "490"},
          {"506", "554", "496"},
          {"502", "550", "500"},
          {"510", "558", "500"},
          {"510", "554", "490"}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      Function[ BoxForm`e$, 
        TableForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell["\<\
In the next line MapAt is used to add 500 to the fourth row of data.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(d2 = MapAt[# + 500 &, data, 4];\)\), "\n", 
    \(TableForm[d2]\)}], "Input"],

Cell[BoxData[
    TagBox[GridBox[{
          {"2", "51", \(-1\)},
          {"7", "50", \(-5\)},
          {"10", "57", \(-5\)},
          {"507", "560", "490"},
          {"6", "54", \(-4\)},
          {"2", "50", "0"},
          {"10", "58", "0"},
          {"10", "54", \(-10\)}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      Function[ BoxForm`e$, 
        TableForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell["We can perform an operation f[] on the third column of data.", "Text",
  FontSize->12],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[f];\)\), "\[IndentingNewLine]", 
    \(data /. {x_, y_, z_} :> {x, y, f[z]} // TableForm\)}], "Input",
  FontSize->12],

Cell[BoxData[
    TagBox[GridBox[{
          {"2", "51", \(f[\(-1\)]\)},
          {"7", "50", \(f[\(-5\)]\)},
          {"10", "57", \(f[\(-5\)]\)},
          {"7", "60", \(f[\(-10\)]\)},
          {"6", "54", \(f[\(-4\)]\)},
          {"2", "50", \(f[0]\)},
          {"10", "58", \(f[0]\)},
          {"10", "54", \(f[\(-10\)]\)}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      Function[ BoxForm`e$, 
        TableForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell["\<\
Sometimes the simple method above doesn't do what you want. For example in \
the next cell the pattern matcher assigns (x,y,z) to the 1st, 2nd, 3rd rows, \
but we wanted (x,y,z) to be the 1st, 2nd and 3rd elements of each row.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(d2 = Take[data, 3];\)\), "\[IndentingNewLine]", 
    \(d2 /. {x_, y_, z_} :> {x, y, f[z]} // TableForm\)}], "Input",
  FontSize->12],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {"2", "51", \(-1\)},
          {"7", "50", \(-5\)},
          {\(f[{10, 57, \(-5\)}]\), "\<\"\"\>", "\<\"\"\>"}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      TableForm[ {{2, 51, -1}, {7, 50, -5}, 
        f[ {10, 57, -5}]}]]], "Output"]
}, Open  ]],

Cell["\<\
The problem in the last example can be avoided if we ensue either x, y or z \
is numeric as in the next cell.  We could just as well ensure x, y, or z is \
not a vector.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(d2 = Take[data, 3];\)\), "\[IndentingNewLine]", 
    \(d2 /. {x_?NumericQ, y_, z_} :> {x, y, f[z]} // TableForm\)}], "Input"],

Cell[BoxData[
    TagBox[GridBox[{
          {"2", "51", \(f[\(-1\)]\)},
          {"7", "50", \(f[\(-5\)]\)},
          {"10", "57", \(f[\(-5\)]\)}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      Function[ BoxForm`e$, 
        TableForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell["\<\
We can swap the second and third columns. To keep this example simple I don't \
ensure that neither x, y or z are numeric, but in some cases that would be \
necessary.\
\>", "Text",
  FontSize->12],

Cell[CellGroupData[{

Cell[BoxData[
    \(data /. {x_, y_, z_} :> {x, z, y} // TableForm\)], "Input",
  FontSize->12],

Cell[BoxData[
    TagBox[GridBox[{
          {"2", \(-1\), "51"},
          {"7", \(-5\), "50"},
          {"10", \(-5\), "57"},
          {"7", \(-10\), "60"},
          {"6", \(-4\), "54"},
          {"2", "0", "50"},
          {"10", "0", "58"},
          {"10", \(-10\), "54"}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      Function[ BoxForm`e$, 
        TableForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell["\<\
We can select the elements of data that have a second element less than 56.  \
\
\>", "Text",
  FontSize->12],

Cell[CellGroupData[{

Cell[BoxData[
    \(Select[data, \((#[\([2]\)] < 56)\) &\ ]\  // TableForm\)], "Input",
  FontSize->12],

Cell[BoxData[
    TagBox[GridBox[{
          {"2", "51", \(-1\)},
          {"7", "50", \(-5\)},
          {"6", "54", \(-4\)},
          {"2", "50", "0"},
          {"10", "54", \(-10\)}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      Function[ BoxForm`e$, 
        TableForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell["\<\
The method below is less cryptic, but it requires the use of a global \
variable to name the testing function. It also turns out that the less \
cryptic method takes about twice as much time to evaluate.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(small[sample_] := sample[\([2]\)] < 56;\)\), "\n", 
    \(Select[data, small] // TableForm\)}], "Input"],

Cell[BoxData[
    TagBox[GridBox[{
          {"2", "51", \(-1\)},
          {"7", "50", \(-5\)},
          {"6", "54", \(-4\)},
          {"2", "50", "0"},
          {"10", "54", \(-10\)}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      Function[ BoxForm`e$, 
        TableForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell[TextData[{
  "One method that's very attractive is to use Cases as below.\nAlso see the \
separate discussion of ",
  ButtonBox["Cases",
    ButtonData:>"Cases",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Cases[data, \ {_, y_, _} /; y < 56]\  // TableForm\)], "Input",
  FontSize->12],

Cell[BoxData[
    TagBox[GridBox[{
          {"2", "51", \(-1\)},
          {"7", "50", \(-5\)},
          {"6", "54", \(-4\)},
          {"2", "50", "0"},
          {"10", "54", \(-10\)}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      Function[ BoxForm`e$, 
        TableForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell[TextData[{
  "To see how to sort a matrix according to the values in a certain column of \
the matrix see the discussion of ",
  ButtonBox["Sort",
    ButtonData:>"Sort",
    ButtonStyle->"Hyperlink"],
  ".  For more on this topic see \n",
  ButtonBox["http://documents.wolfram.com/v5/Built-inFunctions/\
AdvancedDocumentation/LinearAlgebra/",
    ButtonData:>{
      URL[ 
      "http://documents.wolfram.com/v5/Built-inFunctions/\
AdvancedDocumentation/LinearAlgebra/"], None},
    ButtonStyle->"Hyperlink"]
}], "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Pattern Matching", "MiscSection"],

Cell[TextData[{
  "The symbols ",
  ButtonBox["Blank, BlankSequence, BlankNullSequence",
    ButtonData:>"Blank",
    ButtonStyle->"Hyperlink"],
  ", ",
  ButtonBox["Alternatives",
    ButtonData:>"Alternatives",
    ButtonStyle->"Hyperlink"],
  ", ",
  ButtonBox["Pattern",
    ButtonData:>"Pattern",
    ButtonStyle->"Hyperlink"],
  ", ",
  ButtonBox["Optional",
    ButtonData:>"Optional",
    ButtonStyle->"Hyperlink"],
  ", ",
  ButtonBox["Repeated, RepeatedNull",
    ButtonData:>"Repeated RepeatedNull",
    ButtonStyle->"Hyperlink"],
  ", ",
  ButtonBox["Condition",
    ButtonData:>"Condition",
    ButtonStyle->"Hyperlink"],
  ", ",
  ButtonBox["PatternTest",
    ButtonData:>"PatternTest",
    ButtonStyle->"Hyperlink"],
  ", ",
  ButtonBox["Verbatim",
    ButtonData:>"Verbatim",
    ButtonStyle->"Hyperlink"],
  ", ",
  ButtonBox["HoldPattern",
    ButtonData:>"HoldPattern",
    ButtonStyle->"Hyperlink"],
  ", ",
  ButtonBox["Default",
    ButtonData:>"Default details",
    ButtonStyle->"Hyperlink"],
  ", ",
  ButtonBox["Orderless",
    ButtonData:>"Orderless",
    ButtonStyle->"Hyperlink"],
  ", ",
  ButtonBox["Flat",
    ButtonData:>"Flat",
    ButtonStyle->"Hyperlink"],
  ", and ",
  ButtonBox["OneIdentity",
    ButtonData:>"OneIdentity",
    ButtonStyle->"Hyperlink"],
  " are all related to pattern matching in ",
  StyleBox["Mathematica.  ",
    FontSlant->"Italic"],
  "Each of these symbols are discussed in this notebook."
}], "Text",
  CellTags->"Pattern-Matching"],

Cell[CellGroupData[{

Cell["Some examples", "Subsection"],

Cell[BoxData[
    \(\(\( (*\ 
      An\ Integer\ *) \)\(\[IndentingNewLine]\)\(x_Integer\)\(\ \)\)\)], \
"Input"],

Cell[BoxData[
    \(\(\( (*\ 
      A\ sequence\ of\ one\ or\ more\ Integers\ in\ a\ list\ *) \)\(\
\[IndentingNewLine]\)\({x__Integer}\)\)\)], "Input"],

Cell[BoxData[
    \(\(\( (*\ A\ sequence\ of\ one\ or\ more\ Integers\ in\ a\ list, \ 
      or\ an\ empty\ list\ *) \)\(\[IndentingNewLine]\)\({x___Integer}\)\(\ \
\)\)\)], "Input"],

Cell[BoxData[
    \(\(\( (*\ A\ Positive\ number\ *) \)\(\[IndentingNewLine]\)\(x_?
      Positive\)\)\)], "Input"],

Cell[BoxData[
    \(\(\( (*\ 
      A\ sequence\ of\ one\ or\ more\ Positive\ numbers\ in\ a\ list\ *) \)\(\
\[IndentingNewLine]\)\({x__?Positive}\)\(\ \)\)\)], "Input"],

Cell[BoxData[
    \(\(\( (*\ 
      A\ sequence\ of\ one\ or\ more\ Positive\ numbers\ in\ a\ list, \ 
      or\ an\ empty\ list\ *) \)\(\[IndentingNewLine]\)\({x___?
        Positive}\)\(\ \)\)\)], "Input"],

Cell[BoxData[
    \(\(\( (*\ A\ Positive\ Integer\ *) \)\(\[IndentingNewLine]\)\(x_Integer?
      Positive\)\)\)], "Input"],

Cell[BoxData[
    \(\(\( (*\ 
      A\ number\ between\  - 
        1\ and\ 1\ *) \)\(\[IndentingNewLine]\)\(x_?\((\(-1\) < # < 
            1 &)\)\)\)\)], "Input"],

Cell[BoxData[
    \(\(\( (*\ 
      A\ list\ of\ {x, 
          y}\ coordinates\ *) \)\(\[IndentingNewLine]\)\(data : {{_, _} \
.. }\)\)\)], "Input"],

Cell[BoxData[
    \(\(\( (*\ 
      A\ pair\ of\ numbers\ where\ x\ is\ less\ than\ y\ *) \)\(\
\[IndentingNewLine]\)\({x_, y_} /; x < y\)\)\)], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["A pattern must match the FullForm", "Subsection"],

Cell[TextData[{
  "Finding the right pattern needed to make a transformation on an algebraic \
expression can be non-trivial. Consider the next cell where we would like to \
make the transformation\n",
  Cell[BoxData[
      FormBox[
        StyleBox[\(\(a\/\(s - z1\)\)\[LongRightArrow]\(a\/\(1 - 
                  Exp[z1]\ /z\)\)\),
          FontSize->16], TraditionalForm]]],
  " on each term.\nThis is a simplified example of a real world problem I \
encountered when I needed to change the transfer function of a continuous \
filter to the transfer function (in the z-domain) of the corresponding \
discrete filter. The most intuitive attempt to make this transformation is \
shown in the next cell, and you can see it doesn't work."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(\(Clear[expr, x, s]\)\(\[IndentingNewLine]\)
    \)\), "\n", 
    \(\(\(expr = \(\(8\)\(\ \)\)\/\(2 + 4  \[ImaginaryI] + s\) + \(\(3\)\(\ \
\)\)\/\(2 - 4  \[ImaginaryI] + s\);\)\(\[IndentingNewLine]\)
    \)\), "\n", 
    \(expr /. 
      a_/\((s - z1_)\) \[RuleDelayed] a/\((1 - Exp[z1]/z)\)\)}], "Input"],

Cell[BoxData[
    \(3\/\(\((2 - 4\ \[ImaginaryI])\) + s\) + 
      8\/\(\((2 + 4\ \[ImaginaryI])\) + s\)\)], "Output"]
}, Open  ]],

Cell["\<\
The attempt above doesn't work because the pattern doesn't match the FullForm \
of the expression we want to change.  The next cell indicates what the \
FullForm is.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(FullForm[8\/\(2 + 4  \[ImaginaryI] + s\)]\)], "Input"],

Cell[BoxData[
    TagBox[
      StyleBox[\(Times[8, Power[Plus[Complex[2, 4], s], \(-1\)]]\),
        ShowSpecialCharacters->False,
        ShowStringCharacters->True,
        NumberMarks->True],
      FullForm]], "Output"]
}, Open  ]],

Cell["\<\
The transformation in the next cell mathces the FullForm and does what we \
want.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(expr /. \((a_*\((s + z1_)\)^\(-1\))\) \[RuleDelayed] 
        a/\((1 - Exp[\(-z1\)]/z)\)\)], "Input"],

Cell[BoxData[
    \(8\/\(1 - \[ExponentialE]\^\(\(-4\)\ \[ImaginaryI] - 2\)\/z\) + 
      3\/\(1 - \[ExponentialE]\^\(4\ \[ImaginaryI] - 2\)\/z\)\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "For more examples in pattern matching see the sections on  ",
  ButtonBox["MatchQ",
    ButtonData:>"MatchQ",
    ButtonStyle->"Hyperlink"],
  " and ",
  ButtonBox["HoldPattern",
    ButtonData:>"HoldPattern",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text"],

Cell[TextData[{
  "Note:  The attributes ",
  ButtonBox["Orderless",
    ButtonData:>"Orderless",
    ButtonStyle->"Hyperlink"],
  ", ",
  ButtonBox["Flat",
    ButtonData:>"Flat",
    ButtonStyle->"Hyperlink"],
  ", and ",
  ButtonBox["OneIdentity",
    ButtonData:>"OneIdentity",
    ButtonStyle->"Hyperlink"],
  " have an effect on pattern matching."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["The pattern matcher doesn't look inside \"atoms\"", "Subsection"],

Cell["\<\
Integers, rational numbers, and complex numbers are \"atoms\", and the \
pattern matcher doesn't look at the individual parts of these things.  That \
is why we get only only one Position from the next input.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Position[{2, 222, 3\/2, 2 + 3  \[ImaginaryI]}, 2]\)], "Input"],

Cell[BoxData[
    \({{1}}\)], "Output"]
}, Open  ]],

Cell["\<\
Keep in mind that the functions in the table below can be used to take apart \
atoms.  
Also be aware that the real and imaginary parts of a complex number can each \
be Real, Rational, or Integer values.
\
\>", "Text"],

Cell[TextData[Cell[BoxData[GridBox[{
        {
          StyleBox["Head",
            FontWeight->"Bold"], 
          StyleBox[\(Function\ to\ take\ apart\ the\ atom\),
            FontWeight->"Bold"]},
        {"Complex", \(Re, \ Im\)},
        {"Rational", \(Numerator, \ Denominator\)},
        {"Real", "RealDigits"},
        {"Integer", "IntegerDigits"},
        {"String", "Characters"}
        },
      ColumnWidths->{7, 17},
      ColumnAlignments->{Left}]]]], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["The pattern (x_Symbol) may not be specific enough", "Subsection"],

Cell["\<\
In the next input a function f[x, n] is defined where x must be a symbol and \
n must be an integer.\
\>", "Text"],

Cell[BoxData[{
    \(\(ClearAll[f, z, t, x, n];\)\), "\[IndentingNewLine]", 
    \(f[x_Symbol, n_Integer] := Expand[\((x + 1)\)\^n]\)}], "Input"],

Cell[TextData[{
  "Below we see that the above definition is used for ",
  StyleBox["f[\[Pi],3]", "InlineInput"],
  " and",
  StyleBox["[s,3]",
    FontFamily->"Courier",
    FontWeight->"Bold"],
  " when (s) evaluates to the symbol (t)."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(s = t;\)\), "\[IndentingNewLine]", 
    \({f[s, 3], f[Pi, 3]}\)}], "Input"],

Cell[BoxData[
    \({1 + 3\ t + 3\ t\^2 + t\^3, 
      1 + 3\ \[Pi] + 3\ \[Pi]\^2 + \[Pi]\^3}\)], "Output"]
}, Open  ]],

Cell["\<\
However you might want to require that the first argument of (f) is a \
variable and \[Pi] is clearly not a variable.  The next definition does the \
job.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[f];\)\), "\[IndentingNewLine]", 
    \(\(\(f[x_Symbol?\((\(! NumericQ[#]\) &)\), n_Integer] := 
      Expand[\((x + 1)\)\^n]\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \({f[s, 3], f[Pi, 3]}\)}], "Input"],

Cell[BoxData[
    \({1 + 3\ t + 3\ t\^2 + t\^3, f[\[Pi], 3]}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "However, it gets a more complicated if you want to account for symbols \
that were removed.  This was explained by Robby Villegas of Wolfram Research \
at the 1999 Developer Converence.  See \"Working With Unevaluated Expressions\
\" posted at \n",
  ButtonBox["http://library.wolfram.com/conferences/devconf99/#programming",
    ButtonData:>{
      URL[ "http://library.wolfram.com/conferences/devconf99/#programming"], 
      None},
    ButtonStyle->"Hyperlink"],
  ".\n\nBelow the symbol (t) is removed, so (s) evaluates to ",
  StyleBox["Removed[\"t\"]",
    FontFamily->"Courier",
    FontWeight->"Bold"],
  ". When f[s, 3] is evaluated the first argument Removed[\"t\"] matches the \
pattern ",
  StyleBox["(x_Symbol?(!NumericQ[#]&))", "InlineInput"],
  ". One would think Removed[\"t\"] would be an expression with Head Removed \
and argument \"t\", but it doesn't work that way.  "
}], "Text",
  CellTags->"s_Symbol"],

Cell[BoxData[
    \(Remove[t]\)], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(f[s, 3]\)], "Input"],

Cell[BoxData[
    RowBox[{"1", "+", 
      RowBox[{"3", " ", 
        TagBox[\(Removed["t"]\),
          False,
          Editable->False]}], "+", 
      RowBox[{"3", " ", 
        SuperscriptBox[
          TagBox[\(Removed["t"]\),
            False,
            Editable->False], "2"]}], "+", 
      SuperscriptBox[
        TagBox[\(Removed["t"]\),
          False,
          Editable->False], "3"]}]], "Output"]
}, Open  ]],

Cell["\<\
In the next cell I give a new definition for (f) that requires that the first \
argument is a non-numeric symbol that hasn't been Removed. \
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(ClearAll[f];\)\), "\n", 
    \(f[x_Symbol?\((\(! NumericQ[#]\) && NameQ[ToString[#]] &)\), n_Integer] := 
      Expand[\((x + 1)\)\^n]\), "\n", 
    \({f[z, 3], f[s, 3], f[\[Pi], 3]}\)}], "Input"],

Cell[BoxData[
    RowBox[{"{", 
      RowBox[{\(1 + 3\ z + 3\ z\^2 + z\^3\), ",", 
        RowBox[{"f", "[", 
          RowBox[{
            TagBox[\(Removed["t"]\),
              False,
              Editable->False], ",", "3"}], "]"}], ",", \(f[\[Pi], 3]\)}], 
      "}"}]], "Output"]
}, Open  ]],

Cell["\<\
You might find the function (UserSymbolQ) below useful.  It returns True when \
it's argument is a Non-numeric symbol that hasn't been removed and is not in \
the System Context.\
\>", "Text"],

Cell[BoxData[
    RowBox[{
      RowBox[{"UserSymbolQ", "=", 
        RowBox[{"Function", "[", 
          RowBox[{\({a}\), ",", 
            RowBox[{\(Head[a] === Symbol\), "&&", 
              RowBox[{"(", 
                RowBox[{\(Context[a]\), "=!=", 
                  StyleBox["\"\<System`\>\"",
                    ShowSpecialCharacters->False,
                    ShowStringCharacters->True,
                    NumberMarks->True]}], ")"}], 
              "&&", \(NameQ[ToString[a]]\)}]}], "]"}]}], ";"}]], "Input"],

Cell["In the cell below the only \"UserSymbol\" is t4.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(t2 = t1;\)\), "\n", 
    \(\(t3 = 3;\)\), "\n", 
    \(Remove[t1]\), "\n", 
    \(UserSymbolQ /@ {Sin, \[Pi], 3, t2, t3, t4}\)}], "Input"],

Cell[BoxData[
    \({False, False, False, False, False, True}\)], "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Controlling Memory Usage", "MiscSection"],

Cell[CellGroupData[{

Cell["Use a sensible  $HistoryLength", "Subsection",
  CellTags->"Controlling Memory Usage"],

Cell[TextData[{
  "By default ($HistoryLength=\[Infinity]), and this causes Mathematica to \
remember every 'In' cell and 'Out' cell during your entire session. This is \
ridiculous because you would never make reference to an output from a very \
long time ago as I do with  ",
  StyleBox["In[943]",
    FontColor->RGBColor[0, 0, 1]],
  "  in the next cell."
}], "Text"],

Cell[BoxData[
    \(Expand[%27]\)], "Input",
  CellLabel->"In[943]:=",
  Editable->False,
  Evaluatable->False,
  CellLabelAutoDelete->False],

Cell["\<\
To avoid eating up more and more memory you should put something like the \
next line at the end of your (init.m) file.  That way $HistoryLenght will \
always be set to 15 when you start Mathemmatica.\
\>", "Text"],

Cell[BoxData[
    \(\($HistoryLength = 15;\)\)], "Input"],

Cell[TextData[{
  StyleBox["How to find your (Init.m) file.",
    FontSize->14,
    FontColor->RGBColor[1, 0, 0]],
  "\nEvaluating the next cell will return the directory where your (init.m) \
file is located."
}], "Text"],

Cell[BoxData[
    \(ToFileName[{$TopDirectory, "\<Configuration\>", "\<Kernel\>"}]\)], \
"Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Save your notebook once in a while", "Subsection"],

Cell["\<\
Saving your notebook allows the Front End to return excess memory to the \
Operating System.\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Clear the Clipboard", "Subsection"],

Cell["\<\
If you Copy or Cut something that requires a lot of memory clear the \
ClipBoard when you are done with it. An easy way to essentially clear the \
clipboard is to select a small expression, a few words in a text cell, or \
something else that is small, and select Copy under the Edit menu.\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["End with ; (a semi-colon) to avoid lengthy output", "Subsection"],

Cell["\<\
Ending with a semi-colon suppresses output. When an output is very long this \
saves time and memory.\
\>", "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Tech Support Secrets", "MiscSection"],

Cell[TextData[{
  "From  ",
  ButtonBox["http://support.wolfram.com/mathematica/kernel/Symbols/",
    ButtonData:>{
      URL[ "http://support.wolfram.com/mathematica/kernel/Symbols/"], None},
    ButtonStyle->"Hyperlink"],
  "  you can access web pages Wolfram Research technical support provides for \
every built-in Mathematica symbol. In most cases you are linked to a web page \
that shows the usage message of the symbol and the full explanation from \
Appendix A.10 of the ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " Book for the selected symbol.  The real value of this resource is the \
extra information provided for 30 or so kernel symbols. The extra information \
they provide about these symbols isn't available anywhere else!  \
Unfortunately Wolfram Research does nothing to show which of the  1700+  \
symbols in the System context have this extra information.\n\nI came across a \
lot of these pages with juicy bits of information and hyperlinks for the \
respective symbols are provided below."
}], "Text",
  CellTags->"Tech Support"],

Cell[TextData[{
  ButtonBox["AdjustmentBox",
    ButtonData:>{
      URL[ 
      "http://support.wolfram.com/mathematica/kernel/Symbols/System/\
AdjustmentBox.html"], None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Apart",
    ButtonData:>{
      URL[ "http://support.wolfram.com/Kernel/Symbols/System/Apart.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["ArgumentCountQ",
    ButtonData:>{
      URL[ 
      "http://support.wolfram.com/Kernel/Symbols/System/ArgumentCountQ.html"],
       None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Assumptions",
    ButtonData:>{
      URL[ 
      "http://support.wolfram.com/mathematica/kernel/Symbols/System/\
Assumptions.html"], None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Coefficient",
    ButtonData:>{
      URL[ 
      "http://support.wolfram.com/Kernel/Symbols/System/Coefficient.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Compile",
    ButtonData:>{
      URL[ "http://support.wolfram.com/Kernel/Symbols/System/Compile.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["D",
    ButtonData:>{
      URL[ "http://support.wolfram.com/Kernel/Symbols/System/D.html"], None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Derivative",
    ButtonData:>{
      URL[ 
      "http://support.wolfram.com/Kernel/Symbols/System/Derivative.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Det",
    ButtonData:>{
      URL[ "http://support.wolfram.com/Kernel/Symbols/System/Det.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Dot",
    ButtonData:>{
      URL[ 
      "http://support.wolfram.com/mathematica/kernel/Symbols/System/Dot.html"]\
, None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["DSolve",
    ButtonData:>{
      URL[ "http://support.wolfram.com/Kernel/Symbols/System/DSolve.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Factor",
    ButtonData:>{
      URL[ "http://support.wolfram.com/Kernel/Symbols/System/Factor.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["FactorInteger",
    ButtonData:>{
      URL[ 
      "http://support.wolfram.com/Kernel/Symbols/System/FactorInteger.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Flat",
    ButtonData:>{
      URL[ "http://support.wolfram.com/Kernel/Symbols/System/Flat.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["FullOptions",
    ButtonData:>{
      URL[ 
      "http://support.wolfram.com/mathematica/kernel/Symbols/System/\
FullOptions.html"], None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["FullSimplify",
    ButtonData:>{
      URL[ 
      "http://support.wolfram.com/Kernel/Symbols/System/FullSimplify.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["HoldAllComplete",
    ButtonData:>{
      URL[ 
      "http://support.wolfram.com/Kernel/Symbols/System/HoldAllComplete.html"]\
, None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["HoldComplete",
    ButtonData:>{
      URL[ 
      "http://support.wolfram.com/Kernel/Symbols/System/HoldComplete.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Integrate",
    ButtonData:>{
      URL[ "http://support.wolfram.com/Kernel/Symbols/System/Integrate.html"],
       None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Interpolation",
    ButtonData:>{
      URL[ 
      "http://support.wolfram.com/Kernel/Symbols/System/Interpolation.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Interval",
    ButtonData:>{
      URL[ "http://support.wolfram.com/Kernel/Symbols/System/Interval.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["LinearProgramming",
    ButtonData:>{
      URL[ 
      "http://support.wolfram.com/mathematica/kernel/Symbols/System/\
LinearProgramming.html"], None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["ListContourPlot",
    ButtonData:>{
      URL[ 
      "http://support.wolfram.com/mathematica/kernel/Symbols/System/\
ListContourPlot.html"], None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["LUDecomposition",
    ButtonData:>{
      URL[ 
      "http://support.wolfram.com/mathematica/kernel/Symbols/System/\
LUDecomposition.html"], None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["MakeRules",
    ButtonData:>{
      URL[ 
      "http://support.wolfram.com/mathematica/kernel/Symbols/System/MakeRules.\
html"], None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["MatrixExp",
    ButtonData:>{
      URL[ "http://support.wolfram.com/Kernel/Symbols/System/MatrixExp.html"],
       None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["MatrixQ",
    ButtonData:>{
      URL[ "http://support.wolfram.com/Kernel/Symbols/System/MatrixQ.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["NDSolve",
    ButtonData:>{
      URL[ "http://support.wolfram.com/Kernel/Symbols/System/NDSolve.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Notebook",
    ButtonData:>{
      URL[ "http://support.wolfram.com/Kernel/Symbols/System/Notebook.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["OneIdentity",
    ButtonData:>{
      URL[ 
      "http://support.wolfram.com/Kernel/Symbols/System/OneIdentity.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Permutations",
    ButtonData:>{
      URL[ 
      "http://support.wolfram.com/mathematica/kernel/Symbols/System/\
Permutations.html"], None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Precision",
    ButtonData:>{
      URL[ "http://support.wolfram.com/Kernel/Symbols/System/Precision.html"],
       None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Prime",
    ButtonData:>{
      URL[ 
      "http://support.wolfram.com/mathematica/kernel/Symbols/System/Prime.\
html"], None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["PrimePi",
    ButtonData:>{
      URL[ 
      "http://support.wolfram.com/mathematica/kernel/Symbols/System/PrimePi.\
html"], None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Random",
    ButtonData:>{
      URL[ 
      "http://support.wolfram.com/mathematica/kernel/Symbols/System/Random.\
html"], None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Residue",
    ButtonData:>{
      URL[ 
      "http://support.wolfram.com/mathematica/kernel/Symbols/System/Residue.\
html"], None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Return",
    ButtonData:>{
      URL[ "http://support.wolfram.com/Kernel/Symbols/System/Return.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Root",
    ButtonData:>{
      URL[ 
      "http://support.wolfram.com/mathematica/kernel/Symbols/System/Root.\
html"], None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Roots",
    ButtonData:>{
      URL[ "http://support.wolfram.com/Kernel/Symbols/System/Roots.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Series",
    ButtonData:>{
      URL[ "http://support.wolfram.com/Kernel/Symbols/System/Series.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Simplify",
    ButtonData:>{
      URL[ 
      "http://support.wolfram.com/mathematica/kernel/Symbols/System/Simplify.\
html"], None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Solve",
    ButtonData:>{
      URL[ "http://support.wolfram.com/Kernel/Symbols/System/Solve.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["StoppingTest",
    ButtonData:>{
      URL[ 
      "http://support.wolfram.com/Kernel/Symbols/System/StoppingTest.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Sum",
    ButtonData:>{
      URL[ "http://support.wolfram.com/Kernel/Symbols/System/Sum.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Timing",
    ButtonData:>{
      URL[ 
      "http://support.wolfram.com/mathematica/kernel/Symbols/System/Timing.\
html"], None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Together",
    ButtonData:>{
      URL[ "http://support.wolfram.com/Kernel/Symbols/System/Together.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["Union",
    ButtonData:>{
      URL[ "http://support.wolfram.com/Kernel/Symbols/System/Union.html"], 
      None},
    ButtonStyle->"Hyperlink"]
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Programming for Speed", "MiscSection"],

Cell["\<\
In the cells below I give some rules of thumb that enhance the speed of \
Mathematica programs.\
\>", "Text",
  CellTags->"Speedy_Programming"],

Cell[CellGroupData[{

Cell["Use look up tables", "Subsection"],

Cell["\<\
When you have values for (f) defined for specific values such as 
f[1]=y1;
f[2]=y2;
f[3]=y3;
  ...
Mathematica can evaluate something like f[2] with great speed. The speed of \
evaluation is very fast for definitions that are free of patterns such as x_ \
or {x_,y_}. I refer to storage of function values for specific arguments as a \
look up table.

For example you could define a new version of Prime that evaluates over a \
certain range of large integers much faster than the built-in Prime function. \
The next cell defines MyPrime which uses Prime for n<5000000000, and has \
explicit values stored for 5000000000<n<5000000010.  I felt it would be \
appropriate to first try the rules for 5000000000<n<5000000010 so I rearrange \
the list of DownValues. The output below shows the resulting list of \
definitions.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(ClearAll[MyPrime]\), "\n", 
    \(\(\(MyPrime[n_Integer?\((# < 5000000000 &)\)] := 
      Prime[n]\)\(\[IndentingNewLine]\)
    \)\), "\n", 
    \(\(\(Evaluate[MyPrime /@ Range[5000000000, 5000000010]] = \n
        Table[Prime[n], {n, 5000000000, 5000000010}];\)\(\n\)
    \)\), "\[IndentingNewLine]", 
    \(DownValues[MyPrime] = RotateRight[DownValues[MyPrime], 1]\)}], "Input"],

Cell[BoxData[
    \({HoldPattern[MyPrime[n_Integer?\((#1 < 5000000000 &)\)]] \[RuleDelayed] 
        Prime[n], 
      HoldPattern[MyPrime[5000000000]] \[RuleDelayed] 122430513841, 
      HoldPattern[MyPrime[5000000001]] \[RuleDelayed] 122430513847, 
      HoldPattern[MyPrime[5000000002]] \[RuleDelayed] 122430513857, 
      HoldPattern[MyPrime[5000000003]] \[RuleDelayed] 122430513913, 
      HoldPattern[MyPrime[5000000004]] \[RuleDelayed] 122430513923, 
      HoldPattern[MyPrime[5000000005]] \[RuleDelayed] 122430513971, 
      HoldPattern[MyPrime[5000000006]] \[RuleDelayed] 122430514049, 
      HoldPattern[MyPrime[5000000007]] \[RuleDelayed] 122430514069, 
      HoldPattern[MyPrime[5000000008]] \[RuleDelayed] 122430514091, 
      HoldPattern[MyPrime[5000000009]] \[RuleDelayed] 122430514123, 
      HoldPattern[MyPrime[5000000010]] \[RuleDelayed] 
        122430514181}\)], "Output"]
}, Open  ]],

Cell["\<\
Now in the next cell I do the same thing with explicit values stored for \
5000000000<n<5000010000, but display of the list of rules is suppressed \
because it's very long. You should be patient when the next cell is evaluated \
because it takes several minutes.\
\>", "Text"],

Cell[BoxData[{
    \(ClearAll[MyPrime]\), "\n", 
    \(\(\(MyPrime[n_Integer?\((# < 5000000000 &)\)] := 
      Prime[n]\)\(\[IndentingNewLine]\)
    \)\), "\n", 
    \(\(\(Evaluate[MyPrime /@ Range[5000000000, 5000010000]] = \n
        Table[Prime[n], {n, 5000000000, 
            5000010000}];\)\(\[IndentingNewLine]\)
    \)\), "\n", 
    \(\(DownValues[MyPrime] = 
        RotateRight[DownValues[MyPrime], 1];\)\)}], "Input"],

Cell["\<\
Once the definitions for MyPrime are stored a list of primes can be made with \
the next cell almost instantly.\
\>", "Text"],

Cell[BoxData[
    \(Table[MyPrime[n], {n, 5000000000, 5000000400}]\)], "Input"],

Cell["\<\
An  implementation with more sensible use of memory would only store explicit \
definitions of MyPrime for say 5000000500, 50000001000, 5000001500, \
5000002000, ... and would evaluate Nest[NextPrime,MyPrime[50000001000],43] to \
determine MyPrime[50000001043]. I didn't do that here because my purpose here \
is to demonstrate how fast the lookup table is.

Often times look-up tables are created on the fly using definitions of the \
form:
f[x_]:=f[x]=expr
This can result in efficient programs if (f) needs to be evaluated many times \
for the same argument.\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Use functional programming", "Subsection"],

Cell["\<\
The tools of functional programming include:
   Map  MapAt  Thread  Apply  MapThread  MapAll  MapIndexed  Fold  FixedPoint \
 Nest  NestWhile
   FoldList  FixedPointList  NestList  NestWhileList  Scan  Inner  Outer  \
Distribute.
Each of these are often an important part of very efficient programs.

Other functional programming tools available are:
    ComposeList, Composition  Operate  Through.
 These other functional programming features are also efficient, but seldom \
needed in practice.
 
No examples of the functions listed above are provided here, but many of them \
have a devoted section in this notebook\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Use pure functions", "Subsection"],

Cell["\<\
In the next cell three similar functions are defined . The function f1 is \
defined with a named pattern while pure functions are used to define f2 and \
f3. We see the implementation defined with pure functions run much faster \
than the definition defined with a named pattern.  Also the short hand form \
(6 #+13)&  runs a bit faster than Function[x, 6 x+13].\
\>", "Text"],

Cell[BoxData[{
    \(\(ClearAll[lst, f1, f2, f3];\)\), "\[IndentingNewLine]", 
    \(\(SetAttributes[{f1, f2, f3}, Listable];\)\ \), "\[IndentingNewLine]", 
    \(\(f1[x_] = 3  x + 5;\)\), "\n", 
    \(\(f2 = Function[x, 4\ x + 6];\)\), "\[IndentingNewLine]", 
    \(\(\(f3 = 6  # + 13 &;\)\(\[IndentingNewLine]\)
    \)\), "\n", 
    \(\(lst1 = Range[10^6];\)\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(f1[lst1];\) // Timing\)], "Input"],

Cell[BoxData[
    \({4.781000000000006`\ Second, Null}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(f2[lst1];\) // Timing\)], "Input"],

Cell[BoxData[
    \({0.07800000000000296`\ Second, Null}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(f3[lst1];\) // Timing\)], "Input"],

Cell[BoxData[
    \({0.06199999999999761`\ Second, Null}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Use \"linked lists\" instead of adding to a list", "Subsection"],

Cell["\<\
The most straight forward way of adding to a list uses PrependTo or AppendTo \
as in the next cell. There are a number of other ways you could effectively \
do the same thing but they are all very slow for making long lists. As an \
example consider the program in the next cell which makes a list by \
prepending values.\
\>", "Text",
  CellTags->"Linked-List"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(lst1 = {};\)\), "\[IndentingNewLine]", 
    \(Do[\((y = Sin[20.0\ t]; 
          If[Positive[y], PrependTo[lst1, y]];)\), \[IndentingNewLine]{t, 0, 
          10^4}] // Timing\)}], "Input"],

Cell[BoxData[
    \({4.22999999999999`\ Second, Null}\)], "Output"]
}, Open  ]],

Cell["\<\
The faster way to build the list in the previous cell is to make a linked \
list which looks like  
{... ,y4,{y3,{y2,{y1}}}} instead of {...  ,y4,y3,y2,y1} as returned by the \
program in the previous cell. Flatten can then be used to convert the linked \
list into a flattened list.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(lst2 = {};\)\), "\[IndentingNewLine]", 
    \(Do[\((y = Sin[20.0\ t]; 
          If[Positive[y], lst2 = {y, lst2}];)\), \[IndentingNewLine]{t, 0, 
          10^4}] // Timing\)}], "Input"],

Cell[BoxData[
    \({0.3900000000000148`\ Second, Null}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(lst1 == Flatten[lst2]\)], "Input"],

Cell[BoxData[
    \(True\)], "Output"]
}, Open  ]],

Cell["\<\
However a temporary head is needed if you want to quickly build up a list \
such as 
{... ,{x4,y4},{x3,y3},{x2,y2},{x1,y1}}. In that case an expression with the \
form 
h[{x4,y4},h[{x3,y3},h[{x2,y2},h[x1,y2]]]] can be built-up. Then you can get \
the desired result by flattening the nested list and changing the head (h) to \
List. This is done in the next two cells.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(lst2 = h[];\)\), "\[IndentingNewLine]", 
    \(\(\(Do[\((y = Sin[20.0\ t]; 
        If[Positive[y], lst2 = h[{t, y}, lst2]];)\), \[IndentingNewLine]{t, 
        0, 12}]\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(lst2\)}], "Input"],

Cell[BoxData[
    \(h[{12, 0.9454451549211168`}, 
      h[{11, 0.08839871248753149`}, 
        h[{8, 0.21942525837900473`}, 
          h[{7, 0.9802396594403116`}, 
            h[{6, 0.5806111842123143`}, 
              h[{2, 0.7451131604793488`}, 
                h[{1, 0.9129452507276277`}, h[]]]]]]]]\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(lst2 = Flatten[lst2] /. h -> List\)], "Input"],

Cell[BoxData[
    \({{12, 0.9454451549211168`}, {11, 0.08839871248753149`}, {8, 
        0.21942525837900473`}, {7, 0.9802396594403116`}, {6, 
        0.5806111842123143`}, {2, 0.7451131604793488`}, {1, 
        0.9129452507276277`}}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Avoid use of AppendTo and PrependTo", "Subsection"],

Cell["\<\
Use of PrependTo and AppendTo is not a problem if they only evaluate a few \
times.  But your program will be very slow if they evaluate many times.  This \
point was made in the previous rule of thumb.\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Don't compute the same thing over and over", "Subsection"],

Cell[TextData[{
  "Often times one needs to have an understanding of the ",
  ButtonBox["evaluation process",
    ButtonData:>"Evaluation-Process",
    ButtonStyle->"Hyperlink"],
  " to know when things are computed over and over.  An example of this point \
is given in the section on Set versus SetDelayed which is copied below.\n\n\
Alan Hayes provided the code in the next cell as an example where (  \
func[x_]=  ) should be used instead of ( func[x]:=  ).\nIf we did use ( \
func[x_]:=  ) in this example the least squares fit would be computed  again \
for every value of (x) when we evaluate something like \nPlot[curve[t],{t,0,\
\[Pi]/3}]."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[x];\)\), "\[IndentingNewLine]", 
    \(\(data = 
        Table[{x, Cos[x] + Random[]/10}, {x, 0, \[Pi]/3, 0.025}];\)\), "\n", 
    \(curve[x_] = Fit[data, {1, x, x\^2}, x]\)}], "Input"],

Cell[BoxData[
    \(\(\(1.0444861456299661`\)\(\[InvisibleSpace]\)\) + 
      0.02492241415586885`\ x - 0.4937189510715279`\ x\^2\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Use the simplest form possible", "Subsection"],

Cell["\<\
Some Mathematica functions are special cases of other functions. An example \
of this is Range which is a special case of Table. Hence Range will make a \
list in the next cell faster than Table would.\
\>", "Text"],

Cell[BoxData[{
    \(\(slow = Table[i, {i, 5000}];\)\), "\[IndentingNewLine]", 
    \(\(fast = Range[5000];\)\)}], "Input"],

Cell["\<\
Lots of Mathematica functions have multiple forms available. In many cases \
simpler forms are available which are special cases of more general forms. \
Hence Table runs faster in the next cell when an iterator isn't used.\
\>", "Text"],

Cell[BoxData[{
    \(\(slow = Table[Random[], {i, 10^5}];\)\), "\[IndentingNewLine]", 
    \(\(fast = Table[Random[], {10^5}];\)\)}], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Minimize the number of expressions the kernel must evaluate", \
"Subsection"],

Cell["\<\
Ensuring that a program needs to evaluate the fewest number of expressions is \
an important part of minimizing the time a program needs to evaluate. For \
example the Dot product of two vectors evaluates much faster when the built \
in Dot function is used in the next cell.  Here the slow version evaluates \
Part 100 times, Times 50 times and one call to Sum.  The fast version makes \
only one call to Dot.  Clearly Dot must multiply respective parts of each \
list, but it does so much more effeciently than we can with the slow version.\
\
\>", "Text"],

Cell[BoxData[{\(Clear[x, y];\), "\[IndentingNewLine]", \(x = 
        Range[50];\), "\[IndentingNewLine]", \(y = 
        Table[\((\(-0.9\))\)\^n, {n, 50}];\), "\[IndentingNewLine]", 
    RowBox[{
      RowBox[{"slow", "=", 
        RowBox[{
          StyleBox[\(\[Sum]\+\(i = 1\)\%50\),
            ScriptLevel->0], 
          StyleBox[" ",
            ScriptLevel->0], \(Part[x, i] Part[y, i]\)}]}], 
      ";"}], "\[IndentingNewLine]", \(fast = x . y;\)}], "Input"],

Cell["\<\
Another example (which only works in Version 4 or later) is given in the next \
cell where the slow method of making a list needs to evaluate Part 12 times, \
but the fast method does the same thing in one application of Take.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[x, lst];\)\), "\n", 
    \(\(data = x\ Range[70];\)\), "\n", 
    \(\(slow = Table[Part[data, 3\ n], {n, 1, 12}];\)\), "\n", 
    \(fast = Take[data, {3, 50, 3}]\)}], "Input"],

Cell[BoxData[
    \({3\ x, 6\ x, 9\ x, 12\ x, 15\ x, 18\ x, 21\ x, 24\ x, 27\ x, 30\ x, 
      33\ x, 36\ x, 39\ x, 42\ x, 45\ x, 48\ x}\)], "Output"]
}, Open  ]],

Cell["\<\
Still another example (which only works in Version 4) is given in the next \
cell where the slow method maps First onto each element of data, but the fast \
method does the same thing with one application of Part. When the slow method \
is used First must be evaluated over and over.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(Clear[data];\)\), "\[IndentingNewLine]", 
    \(\(data = 
        Table[{i, 2.5\ i\^3}, {i, 1, 120, 3}];\)\), "\[IndentingNewLine]", 
    \(\(slow = First /@ data;\)\), "\[IndentingNewLine]", 
    \(fast = Part[data, All, 1]\)}], "Input"],

Cell[BoxData[
    \({1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 
      55, 58, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88, 91, 94, 97, 100, 103, 
      106, 109, 112, 115, 118}\)], "Output"]
}, Open  ]],

Cell["\<\
In the next cell we can use Table and Take to split up a list into sublists.  \
The built-in function Partition is designed just for this purpose and does \
the job much faster.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(data = Range[100];\)\), "\n", 
    \(\(slow = 
        Table[Take[data, {10*n, 10*\((n + 1)\)}], {n, 1, 9}];\)\), "\n", 
    \(fast = Partition[data, 10]\)}], "Input"],

Cell[BoxData[
    \({{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {11, 12, 13, 14, 15, 16, 17, 18, 19, 
        20}, {21, 22, 23, 24, 25, 26, 27, 28, 29, 30}, {31, 32, 33, 34, 35, 
        36, 37, 38, 39, 40}, {41, 42, 43, 44, 45, 46, 47, 48, 49, 50}, {51, 
        52, 53, 54, 55, 56, 57, 58, 59, 60}, {61, 62, 63, 64, 65, 66, 67, 68, 
        69, 70}, {71, 72, 73, 74, 75, 76, 77, 78, 79, 80}, {81, 82, 83, 84, 
        85, 86, 87, 88, 89, 90}, {91, 92, 93, 94, 95, 96, 97, 98, 99, 
        100}}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "Other special purpose functions are ListConvolve, ListCorrelate, Split, \
Ordering, and Tr to name a few.  Any direct use of these functions is \
probably faster than doing the same thing with some ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " code you might write. \n",
  "\n",
  "Another example of this principle is changing the value at multiple parts \
of an expression by using the Part feature only once. This is demonstrated in \
the section on ",
  ButtonBox["Part",
    ButtonData:>"Part",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Use approximate machine numbers whenever appropriate", "Subsection"],

Cell["\<\
If your application can tolerate the round off error inherent in machine \
precision arithmetic you can greatly improve the speed of your program by \
ensuring all numeric calculation is done on approximate machine numbers. Of \
course certain calculations over integers (e.g. multiplication and addition) \
are quickly computed over machine integers and computing with approximate \
numbers would not be any faster in that case.\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Use Packed Arrays", "Subsection"],

Cell[TextData[{
  "Rob Knapp provides a tutorial on Packed Arrays at  ",
  ButtonBox["http://library.wolfram.com/database/TechNotes/391/",
    ButtonData:>{
      URL[ "http://library.wolfram.com/database/TechNotes/391/"], None},
    ButtonStyle->"Hyperlink"],
  ". and I give simplified examples of the trick he uses to speed up an \
implementation of LUDecomposition above in my discussion of ",
  ButtonBox["Part",
    ButtonData:>"Part",
    ButtonStyle->"Hyperlink"],
  ".\n\nAs Rob explains you often need to use certain programming methods to \
get the improved speed possible with the with Packed Arrays. \nTo start with \
you only get the benefit of packed arrays when your data structure can fit in \
a packed array.  For more on this subject see chapter 6 (Performance) at: \n\
",
  ButtonBox["http://documents.wolfram.com/v5/Built-inFunctions/\
AdvancedDocumentation/LinearAlgebra/",
    ButtonData:>{
      URL[ 
      "http://documents.wolfram.com/v5/Built-inFunctions/\
AdvancedDocumentation/LinearAlgebra/"], None},
    ButtonStyle->"Hyperlink"],
  ".\n "
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Use Compile effectively", "Subsection"],

Cell[TextData[{
  " The speed of programs can often be enhanced if they are written using \
Compile, but you need to take certain steps to ensure the program evaluates \
with compiled evaluation. This is discussed in the section on ",
  ButtonBox["Compile",
    ButtonData:>"Compiled_Evaluation",
    ButtonStyle->"Hyperlink"],
  ".  As I mention in that discussion only certain types of work can be done \
with compiled evaluation."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Don't use ReplacePart, MapAt or Insert when the last argument is a 
long List (>40).\
\>", "Subsection"],

Cell[TextData[{
  "ReplacePart, MapAt and Insert are very slow in this case. For mor \
explanation see the discussion of ",
  ButtonBox["Slow Kernel Functions",
    ButtonData:>"Slow_Functions",
    ButtonStyle->"Hyperlink"],
  "."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Be careful about modifying large data structures in place over and over\
\>", "Subsection"],

Cell[TextData[{
  "This discussion on modifying large data structures comes from  \"Power \
Programming with Mathematica The Kernel\"  by David B. Wagner.\n\nThis isn't \
so much a rule of thumb, but a trick that is useful in special cases. \
Consider computing a moving average of a list of numbers.  With the first \
approach below we use (s) as our input and output.  As explained where I \
discuss the ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " ",
  ButtonBox["evaluation process",
    ButtonData:>"Evaluation-Process",
    ButtonStyle->"Hyperlink"],
  " each element of (s) is evaluated again each time s[[i]] is accessed \
because (s) was modified since it was last used.  All the exccess evaluation \
is very inefficient and the time needed with this approach is proportional to \
the square of the length of the list."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \( (*\ Slow; \ 
      O[n\^2]\ *) \[IndentingNewLine]\(s = 
        Range[2*10^4];\)\), "\[IndentingNewLine]", 
    \(\(Do[
          s[\([i]\)] = \((s[\([i]\)] + s[\([i + 1]\)])\)/2, {i, 
            Length[s] - 1}];\) // Timing\)}], "Input"],

Cell[BoxData[
    \({13.765000000000008`\ Second, Null}\)], "Output"]
}, Open  ]],

Cell["\<\
By simply hanging the head of the list to HoldComplete the exccess evaluation \
is prevented, and the time needed is directly proportional to the length of \
the list.  At the end we change the head back to List.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \( (*\ Fast; \ 
      O[n]\ *) \[IndentingNewLine]\(s = 
        Range[2*10^4];\)\), "\[IndentingNewLine]", 
    \(Timing[\[IndentingNewLine]s = HoldComplete @@ s; \[IndentingNewLine]Do[
        s[\([i]\)] = \((s[\([i]\)] + s[\([i + 1]\)])\)/2, {i, 
          Length[s] - 1}]; \[IndentingNewLine]s = 
        List @@ s;\[IndentingNewLine]]\)}], "Input"],

Cell[BoxData[
    \({0.23499999999999943`\ Second, Null}\)], "Output"]
}, Open  ]],

Cell["\<\
It's even better to avoid a procedual approach all together as I do in the \
next cell.  The performance gain here is largely due to reducing the number \
of expressions that need to evaluate (one of my other rules of thumb).

However, in some cases the HoldComplete trick above provides the best \
solution.\
\>", "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
    \( (*\ Very\ Fast\ *) \[IndentingNewLine]\(s = 
        Range[2*10^4];\)\), "\[IndentingNewLine]", 
    \(Timing[\(\((Rest[s] + Drop[s, \(-1\)])\)/2;\)]\)}], "Input"],

Cell[BoxData[
    \({0.046999999999997044`\ Second, Null}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Beware of inefficient patterns", "Subsection"],

Cell[TextData[{
  "Most of this discussion on inefficient patterns is from \"Power \
Programming with Mathematica The Kernel\" by David B.Wagner.\n\nAn \
implementation of run length encoding is given below.  This implementation \
written by Frank Zizza is clearly elegant and it even won an award in a \
programming contest at a 1990 ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " conference."
}], "Text"],

Cell[BoxData[
    \(runEncode[s_List] := 
      Map[{#, 1} &, 
          s] //. \[IndentingNewLine]{h___, {x_, n_}, {x_, m_}, 
            t___} :> {h, {x, n + m}, t}\)], "Input"],

Cell["In the next cell we see an example using runEncode.", "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \(runEncode[{1, 0, 0, 1, 1, 0, 1, 1, 1, 1}]\)], "Input"],

Cell[BoxData[
    \({{1, 1}, {0, 2}, {1, 2}, {0, 1}, {1, 4}}\)], "Output"]
}, Open  ]],

Cell["\<\
Next we see that runEncode takes a long time to encode a list of 2000 \
integers.  In fact the time it takes this implementation to finish is \
proportional to the square of the length of the list, and this is not good at \
all.\
\>", "Text"],

Cell[BoxData[
    \(\(tst = Table[Random[Integer, {0, 1}], {2*10^3}];\)\)], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(runEncode1[tst];\) // Timing\)], "Input"],

Cell[BoxData[
    \({14.296`\ Second, Null}\)], "Output"]
}, Open  ]],

Cell[TextData[{
  "The reason this implementation performs poorly is because of the way the \
kernel performs pattern matching. In the next cell we see pattern matching in \
action by causing the replacement to print each attempt at matching the \
pattern.\n\nThere are two important points about this result.  First, the \
kernel attempts to match sequence patterns (e.g.  __, ___, ",
  ButtonBox["Repeated",
    ButtonData:>"Repeated RepeatedNull",
    ButtonStyle->"Hyperlink"],
  ", ",
  ButtonBox["RepeatedNull",
    ButtonData:>"Repeated RepeatedNull",
    ButtonStyle->"Hyperlink"],
  ") from left to right.  Second, once the kernel finds a succeful match for \
the pattern, it starts the comparing patterns for the next iteration at the \
left end of the input, which for this particular algorithm is a guarenteed \
waste of time."
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    \({{1, 1}, {0, 1}, {0, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 
          1}} //. \n{h___, {x_, n_}, {y_, m_}, 
            t___} /; \((Print[{h, {{x, n}, {y, m}}, t}]; 
            x \[Equal] y)\) \[RuleDelayed] {h, {x, n + m}, t}\)], "Input"],

Cell[BoxData[
    \({{{1, 1}, {0, 1}}, {0, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}}\)], "Print"],

Cell[BoxData[
    \({{1, 1}, {{0, 1}, {0, 1}}, {1, 1}, {1, 1}, {1, 1}, {1, 1}}\)], "Print"],

Cell[BoxData[
    \({{{1, 1}, {0, 2}}, {1, 1}, {1, 1}, {1, 1}, {1, 1}}\)], "Print"],

Cell[BoxData[
    \({{1, 1}, {{0, 2}, {1, 1}}, {1, 1}, {1, 1}, {1, 1}}\)], "Print"],

Cell[BoxData[
    \({{1, 1}, {0, 2}, {{1, 1}, {1, 1}}, {1, 1}, {1, 1}}\)], "Print"],

Cell[BoxData[
    \({{{1, 1}, {0, 2}}, {1, 2}, {1, 1}, {1, 1}}\)], "Print"],

Cell[BoxData[
    \({{1, 1}, {{0, 2}, {1, 2}}, {1, 1}, {1, 1}}\)], "Print"],

Cell[BoxData[
    \({{1, 1}, {0, 2}, {{1, 2}, {1, 1}}, {1, 1}}\)], "Print"],

Cell[BoxData[
    \({{{1, 1}, {0, 2}}, {1, 3}, {1, 1}}\)], "Print"],

Cell[BoxData[
    \({{1, 1}, {{0, 2}, {1, 3}}, {1, 1}}\)], "Print"],

Cell[BoxData[
    \({{1, 1}, {0, 2}, {{1, 3}, {1, 1}}}\)], "Print"],

Cell[BoxData[
    \({{{1, 1}, {0, 2}}, {1, 4}}\)], "Print"],

Cell[BoxData[
    \({{1, 1}, {{0, 2}, {1, 4}}}\)], "Print"],

Cell[BoxData[
    \({{1, 1}, {0, 2}, {1, 4}}\)], "Output"]
}, Open  ]],

Cell["\<\
Below I give a run length encoding implementation that performs much better.  \
Unfortunately the implementation below is more difficult to understand.  You \
will find the time this implementation takes is directly proportional to the \
length of the input list.\
\>", "Text"],

Cell[BoxData[{
    \(\(foo = 
        Module[{t1 = #1}, \[IndentingNewLine]If[
              Part[#1, \(-1\), 1] === 
                First[#2], \[IndentingNewLine]\(Part[
                  t1, \(-1\), \(-1\)]++\), \[IndentingNewLine]t1 = 
                Join[t1, {#2}]\[IndentingNewLine]]; \[IndentingNewLine]t1] &;\
\)\[IndentingNewLine]\), "\n", 
    \(runEncode2[s_List] := 
      With[{s1 = Map[{#, 1} &, s]}, \[IndentingNewLine]Fold[foo, {First[s1]}, 
          Rest[s1]]\[IndentingNewLine]]\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(runEncode2[{1, 0, 0, 1, 1, 0, 1, 1, 1, 1}]\)], "Input"],

Cell[BoxData[
    \({{1, 1}, {0, 2}, {1, 2}, {0, 1}, {1, 4}}\)], "Output"]
}, Open  ]],

Cell["\<\
Below we see that the second implementation performs much better.\
\>", "Text"],

Cell[BoxData[
    \(\(tst = Table[Random[Integer, {0, 1}], {2*10^3}];\)\)], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(runEncode2[tst];\) // Timing\)], "Input"],

Cell[BoxData[
    \({0.14`\ Second, Null}\)], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Check These Sources Too", "Subsection"],

Cell[TextData[{
  ButtonBox["http://library.wolfram.com/infocenter/Conferences/388/",
    ButtonData:>{
      URL[ "http://library.wolfram.com/infocenter/Conferences/388/"], None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["http://library.wolfram.com/infocenter/Conferences/320/",
    ButtonData:>{
      URL[ "http://library.wolfram.com/infocenter/Conferences/320/"], None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["http://library.wolfram.com/infocenter/Conferences/422/",
    ButtonData:>{
      URL[ "http://library.wolfram.com/infocenter/Conferences/422/"], None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["http://library.wolfram.com/infocenter/Conferences/321/",
    ButtonData:>{
      URL[ "http://library.wolfram.com/infocenter/Conferences/321/"], None},
    ButtonStyle->"Hyperlink"],
  "\n",
  ButtonBox["http://library.wolfram.com/infocenter/Conferences/367/",
    ButtonData:>{
      URL[ "http://library.wolfram.com/infocenter/Conferences/367/"], None},
    ButtonStyle->"Hyperlink"]
}], "Text"],

Cell[TextData[{
  "Also see Alan Hayes in-depth articles on efficient ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " programming in The ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " Journal which are posted at \n",
  ButtonBox["http://www.mathematica-journal.com/issue/v2i2/",
    ButtonData:>{
      URL[ "http://www.mathematica-journal.com/issue/v2i2/"], None},
    ButtonStyle->"Hyperlink"],
  "  and  ",
  ButtonBox["http://www.mathematica-journal.com/issue/v5i1/",
    ButtonData:>{
      URL[ "http://www.mathematica-journal.com/issue/v5i1/"], None},
    ButtonStyle->"Hyperlink"],
  "."
}], "Text",
  CellTags->"Fast Programming"],

Cell["\<\
Chapter 10 of 
Power Programming with Mathematica The Kernel  
by David B. Wagner  (ISBN 0-07-912237-X)  
gives more advice on improving the speed of Mathematica programs.  
Unfortunately this great book is out of print, but you may be able to get a \
copy from an online auction such as e-bay or from the amazon.com out of print \
book service.\
\>", "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Slow Kernel Functions", "MiscSection"],

Cell[TextData[{
  "Functions ReplacePart, MapAt, Insert, AppendTo, and PrependTo are very \
slow ",
  Cell[BoxData[
      \(TraditionalForm\`\((ie . \ \ O[n\^2]\ )\)\)]],
  " when they are used to make a large number of changes to an expression.  \
The other functions I list here are not extremly slow, but they are all much \
slower than the simpler form of the same function (eg. Sort[list,p] is much \
slower than Sort[list])."
}], "Text"],

Cell[CellGroupData[{

Cell["\<\
ReplacePart, MapAt, Insert (when the last argument is a long list).\
\>", "Subsection"],

Cell["\<\
ReplacePart, MapAt, and Inset can be very slow.

Consider the expressions:
   ReplacePart[expr, 1, lst]
   MapAt[f,expr, lst]
   Inset[expr, 1, lst]
Where (lst) has the form {{__Integer},{__Integer}, ...] and Length[lst]=n. 
In that case each of these functions are O[n^2].  For those who aren't \
familiar with this notation, O[n^2] means the evaluation time is proportional \
to n^2.  Hence if (lst) is a long list of lists these functions are very \
slow.\
\>", "Text",
  CellTags->"Slow_Functions"],

Cell[CellGroupData[{

Cell["Here is the evidence", "Subsubsection"],

Cell[BoxData[{
    \(\(ClearAll[TestReplacePart, TestMapAt, 
        TestInsert];\)\), "\[IndentingNewLine]", 
    \(TestReplacePart[n_] := 
      Module[{size, p1, lst2, 
          t1}, \[IndentingNewLine]\((size = 
            250*2^\((n + 1)\); \[IndentingNewLine]p1 = 
            Union[Table[{Random[Integer, {1, size}]}, {size/
                    2}]]; \[IndentingNewLine]lst2 = 
            Table[Random[], {size}]; \[IndentingNewLine]t1 = \
\((\(\(ReplacePart[lst2, 1, p1];\) // Timing\) // 
                First)\); \[IndentingNewLine]{Length[p1], 
            t1})\)\[IndentingNewLine]]\)}], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Table[TestReplacePart[n], {n, 5}] // TableForm\)], "Input"],

Cell[BoxData[
    TagBox[GridBox[{
          {"395", \(0.04999999999999982`\ Second\)},
          {"780", \(0.21999999999999975`\ Second\)},
          {"1580", \(0.9299999999999997`\ Second\)},
          {"3108", \(4.009999999999999`\ Second\)},
          {"6276", \(18.12`\ Second\)}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      (TableForm[ #]&)]], "Output"]
}, Open  ]],

Cell[BoxData[
    \(TestMapAt[n_] := 
      Module[{size, p1, p2, 
          t1}, \[IndentingNewLine]\((size = 
            2\ Floor[250*2^n]; \[IndentingNewLine]p1 = 
            Union[Table[{Random[Integer, {1, size}]}, {size/
                    2}]]; \[IndentingNewLine]p2 = 
            Table[i, {i, size}]; \[IndentingNewLine]t1 = 
            First[Timing[\(MapAt[# + 8 &, p2, 
                    p1];\)]]; \[IndentingNewLine]{Length[p1], 
            t1}\[IndentingNewLine])\)]\)], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Table[TestMapAt[n], {n, 5}] // TableForm\)], "Input"],

Cell[BoxData[
    TagBox[GridBox[{
          {"396", \(0.060000000000002274`\ Second\)},
          {"782", \(0.269999999999996`\ Second\)},
          {"1593", \(1.259999999999998`\ Second\)},
          {"3191", \(5.490000000000002`\ Second\)},
          {"6272", \(24.28`\ Second\)}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      (TableForm[ #]&)]], "Output"]
}, Open  ]],

Cell[BoxData[
    \(TestInsert[n_] := 
      Module[{size, p1, p2, 
          t1}, \[IndentingNewLine]\((size = 
            2\ Floor[150*2^n]; \[IndentingNewLine]p1 = 
            Union[Table[{Random[Integer, {1, size}]}, {size/
                    2}]]; \[IndentingNewLine]p2 = 
            Table[Random[], {i, size}]; \[IndentingNewLine]t1 = 
            First[Timing[\(Insert[p2, 1, p1];\)]]; \[IndentingNewLine]{Length[
              p1], t1}\[IndentingNewLine])\)]\)], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(Table[TestInsert[n], {n, 5}] // TableForm\)], "Input"],

Cell[BoxData[
    TagBox[GridBox[{
          {"237", \(0.060000000000002274`\ Second\)},
          {"472", \(0.10999999999999943`\ Second\)},
          {"951", \(0.4899999999999949`\ Second\)},
          {"1879", \(1.980000000000004`\ Second\)},
          {"3786", \(8.399999999999991`\ Second\)}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      (TableForm[ #]&)]], "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Would a faster algorithm give \"wrong\" results?", "Subsubsection"],

Cell["\<\
It seems like there must be algorithms for (ReplacePart, MapAt, Insert) that \
would evaluate much faster with a long list of parts.  It may be that the \
developers used slower methods which are needed to ensure that the result is \
correct.  A similar issue had to be addressed with Union.  However, in the \
case of Union the developers decided to use a method that is O[n Log[n]] and \
they accepted the risk that the result might include some duplicates.\
\>", "Text"],

Cell[TextData[{
  "At  ",
  ButtonBox["http://support.wolfram.com/Kernel/Symbols/System/Union.html",
    ButtonData:>{
      URL[ "http://support.wolfram.com/Kernel/Symbols/System/Union.html"], 
      None},
    ButtonStyle->"Hyperlink"],
  "  we see Union treats elements as duplicates only if they appear in \
adjacent positions after sorting.  Apparently this method is O[n Log[n]], and \
Union would be O[n^2] if it compared all pairs of elements."
}], "Text"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["AppendTo, PrependTo", "Subsection"],

Cell[TextData[{
  "AppendTo and PrependTo are very slow when used on large expressions.  \
Instead use a \"",
  ButtonBox["linked list",
    ButtonData:>"Linked-List",
    ButtonStyle->"Hyperlink"],
  "\" as I discuss under programming for speed."
}], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Sort[list,p]", "Subsection"],

Cell["\<\
Sort[list]  is faster than  Sort[list, p] but sometimes we can't avoid the \
slower form.\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Ordering[list,n,p]", "Subsection"],

Cell["\<\
Ordering[list, n, p] is slower than  Ordering[list]  or Ordering[list, n] but \
sometimes we can't avoid the slower form.\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Split[list,test]", "Subsection"],

Cell["\<\
Split[list, test]  is slower than  Split[list] but sometimes we can't avoid \
the slower form.\
\>", "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["MatrixQ[expr,test], VectorQ[expr,test]", "Subsection"],

Cell["MatrixQ[expr, test]  is slower than  MatrixQ[expr].", "Text"],

Cell["\<\
Likewise  VectorQ[expr, test]  is slower than  VectorQ[expr].\
\>", "Text"],

Cell["\<\
However, sometimes we can't avoid the slower form of VectorQ and MatrixQ. \
\>", "Text",
  FontWeight->"Plain"]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
(SameTest\[Rule]func)  instead of (SameTest\[Rule]Automatic)\
\>", "Subsection"],

Cell["\<\
The functions (Complement, FixedPoint, FixedPointList, Intersection, Union) \
all have a SameTest option. When they are given a non-default setting for the \
SameTest option they run much slower that with the default setting (SameTest\
\[Rule]Automatic).  Sometimes we have no choice but to use these functions \
with a non default SameTest setting.  You should just be aware that this \
slows down performance.\
\>", "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Functions with attributes OneIdentity, Flat, or Orderless", \
"MiscSection"],

Cell[TextData[{
  "All symbols built into the ",
  StyleBox["Mathematica",
    FontSlant->"Italic"],
  " kernel (Version 3.0, 4.0) with one or more of the attributes OneIdentity, \
Flat, or Orderless are listed in the table below.  This table shows a circle \
to indicate that a certain function has one of the attributes. "
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[
    TagBox[GridBox[{
          {" ", \(\(OneIdentity\)\(\ \ \ \)\), \(\(Flat\)\(\ \ \ \)\), 
            "Orderless"},
          {"Max", "\[FilledSmallCircle]", "\[FilledSmallCircle]", 
            "\[FilledSmallCircle]"},
          {"Min", "\[FilledSmallCircle]", "\[FilledSmallCircle]", 
            "\[FilledSmallCircle]"},
          {"Plus", "\[FilledSmallCircle]", "\[FilledSmallCircle]", 
            "\[FilledSmallCircle]"},
          {"Times", "\[FilledSmallCircle]", "\[FilledSmallCircle]", 
            "\[FilledSmallCircle]"},
          {"Xor", "\[FilledSmallCircle]", "\[FilledSmallCircle]", 
            "\[FilledSmallCircle]"},
          {"And", "\[FilledSmallCircle]", "\[FilledSmallCircle]", " "},
          {"Composition", "\[FilledSmallCircle]", "\[FilledSmallCircle]", 
            " "},
          {"Dot", "\[FilledSmallCircle]", "\[FilledSmallCircle]", " "},
          {"Intersection", "\[FilledSmallCircle]", "\[FilledSmallCircle]", 
            " "},
          {"Join", "\[FilledSmallCircle]", "\[FilledSmallCircle]", " "},
          {"NonCommutativeMultiply", "\[FilledSmallCircle]", 
            "\[FilledSmallCircle]", " "},
          {"Or", "\[FilledSmallCircle]", "\[FilledSmallCircle]", " "},
          {"StringJoin", "\[FilledSmallCircle]", "\[FilledSmallCircle]", 
            " "},
          {"Union", "\[FilledSmallCircle]", "\[FilledSmallCircle]", " "},
          {"Power", "\[FilledSmallCircle]", " ", " "},
          {"ArithmeticGeometricMean", " ", " ", "\[FilledSmallCircle]"},
          {"Multinomial", " ", " ", "\[FilledSmallCircle]"},
          {\(GCD\ \ \[Dagger]\), " ", "\[FilledSmallCircle]", 
            "\[FilledSmallCircle]"},
          {\(LCM\ \ \[Dagger]\), " ", "\[FilledSmallCircle]", 
            "\[FilledSmallCircle]"},
          {\(DiracDelta\ \ \[DoubleDagger]\), " ", " ", 
            "\[FilledSmallCircle]"},
          {\(KroneckerDelta\ \ \[DoubleDagger]\), " ", " ", 
            "\[FilledSmallCircle]"},
          {\(DiscreteDelta\ \ \[DoubleDagger]\), " ", " ", 
            "\[FilledSmallCircle]"},
          {\(UnitStep\ \ \[DoubleDagger]\), " ", " ", "\[FilledSmallCircle]"}
          },
        ColumnAlignments->{Right, Center}],
      DisplayForm]], "Subsubsection",
  Editable->False,
  CellFrame->False],

Cell["\<\
\[Dagger]   GCD, LCM  have the attributes Flat, Orderless in Version 4.0, but \
not in Version 3.0.
\[DoubleDagger]  Functions new to the kernel as of version 4.0.\
\>", "Text",
  Editable->False]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Mathematica Web Pages", "MiscSection"],

Cell[TextData[ButtonBox["http://support.wolfram.com/",
  ButtonData:>{
    URL[ "http://support.wolfram.com/"], None},
  ButtonStyle->"Hyperlink"]], "Text"],

Cell[TextData[ButtonBox["http://forums.wolfram.com/",
  ButtonData:>{
    URL[ "http://forums.wolfram.com/"], None},
  ButtonStyle->"Hyperlink"]], "Text"],

Cell[TextData[ButtonBox["http://library.wolfram.com/infocenter",
  ButtonData:>{
    URL[ "http://library.wolfram.com/infocenter"], None},
  ButtonStyle->"Hyperlink"]], "Text"],

Cell[TextData[ButtonBox["http://www.ifm.ethz.ch/~kaufmann/news.html",
  ButtonData:>{
    URL[ "http://www.ifm.ethz.ch/~kaufmann/news.html"], None},
  ButtonStyle->"Hyperlink"]], "Text"],

Cell[TextData[ButtonBox["http://www.webring.org/cgi-bin/webring?ring=\
mathematica;list",
  ButtonData:>{
    URL[ "http://www.webring.org/cgi-bin/webring?ring=mathematica;list"], 
    None},
  ButtonStyle->"Hyperlink"]], "Text"],

Cell[TextData[ButtonBox[" http://www.salford.co.uk/mathematica/",
  ButtonData:>{
    URL[ "http://www.salford.co.uk/mathematica/"], None},
  ButtonStyle->"Hyperlink"]], "Text"],

Cell[TextData[ButtonBox["http://www.unca.edu/~mcmcclur/mathematicaGraphics/\
index.html",
  ButtonData:>{
    URL[ "http://www.unca.edu/~mcmcclur/mathematicaGraphics/index.html"], 
    None},
  ButtonStyle->"Hyperlink"]], "Text"],

Cell[TextData[ButtonBox["http://www.math.washington.edu/~lee/Ricci/",
  ButtonData:>{
    URL[ "http://www.math.washington.edu/~lee/Ricci/"], None},
  ButtonStyle->"Hyperlink"]], "Text"],

Cell[TextData[ButtonBox["http://home.earthlink.net/~djmp/Mathematica.html",
  ButtonData:>{
    URL[ "http://home.earthlink.net/~djmp/Mathematica.html"], None},
  ButtonStyle->"Hyperlink"]], "Text"],

Cell[TextData[ButtonBox["http://www.dimi.uniud.it/~gorni/",
  ButtonData:>{
    URL[ "http://www.dimi.uniud.it/~gorni/"], None},
  ButtonStyle->"Hyperlink"]], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Hidden Treasures in the Help Browser", "MiscSection"],

Cell[TextData[{
  StyleBox["Experimental and Developer contexts",
    FontWeight->"Bold"],
  "\n- From the Help Browser select \"Built-in functions\" and scroll the \
left column to the bottom.\n- Select Additional Functions from the left \
column.\n- Select Developer Context or Experimental context from the second \
column.\n- Categories and functions are listed in the third, fourth columns."
}], "Text"],

Cell[TextData[{
  StyleBox["Other Information",
    FontWeight->"Bold"],
  "   You will find lots of good stuff under 'Other Information'"
}], "Text"],

Cell[BoxData[
    ButtonBox[\(Notation\ package\ documentation\),
      ButtonData:>"Notation:Documentation:Entering Notation",
      ButtonStyle->"AddOnsLink"]], "Text"],

Cell[BoxData[
    ButtonBox[\(More\ Notation\ documentation\),
      ButtonData:>"New Notations",
      ButtonStyle->"AddOnsLink"]], "Text"],

Cell[TextData[ButtonBox["Numerics Report",
  ButtonStyle->"GettingStartedLink"]], "Text"]
}, Closed]],

Cell[CellGroupData[{

Cell["Important Keyboard Shortcuts", "MiscSection"],

Cell[TextData[{
  "Ctrl .    ",
  StyleBox["(that's  the keys Ctrl, and the . key at the same time)",
    FontSlant->"Italic"],
  "\n    Extend selection to a larger sub expression, the whole cell, group \
of cells, ... ,all cells.  This is about the only way to select a cell when \
the CellBracket isn't shown!"
}], "Commentary"],

Cell["\<\
Ctrl a
Select ALL cells in the selected notebook.\
\>", "Commentary"],

Cell[TextData[{
  "Ctrl Shift [    ",
  StyleBox["(that's the keys Ctrl, Shift, [  at the same time)",
    FontSlant->"Italic"],
  "\nOpen ALL selected cells."
}], "Commentary"],

Cell[TextData[{
  "Ctrl Shif E  ",
  StyleBox["(that's the keys Ctrl, Shift, E  at the same time)",
    FontSlant->"Italic"],
  "\nSwitch the current cell between normal and the underlying box \
structure."
}], "Commentary"],

Cell["\<\
Ctrl Shift ]
Close ALL selected cells\
\>", "Commentary"],

Cell[TextData[{
  "Ctrl K  ",
  StyleBox["(with something selected)",
    FontSlant->"Italic"],
  "\nComplete the selection\nExamples:  \"Work Ctrl k\" \[Rule] \
WorkingPrecision\n                 \"\\[Contour Ctrl k\" \[Rule] \
\[ContourIntegral]  )"
}], "Commentary"]
}, Closed]]
},
FrontEndVersion->"4.1 for Microsoft Windows",
ScreenRectangle->{{0, 1024}, {0, 695}},
WindowToolbars->"EditBar",
WindowSize->{1016, 551},
WindowMargins->{{0, Automatic}, {Automatic, 19}},
PrintingCopies->1,
PrintingPageRange->{Automatic, Automatic},
ShowSelection->True,
Magnification->1.25,
StyleDefinitions -> Notebook[{
  
  Cell[CellGroupData[{
  Cell["Style Definitions", "Subtitle"],
  
  Cell["\<\
Modify the definitions below to change the default appearance of all cells in \
a given style.  Make modifications to any definition using commands in the \
Format menu.\
\>", "Text"],
  
  Cell[CellGroupData[{
  
  Cell["Style Environment Names", "Section"],
  
  Cell[StyleData[All, "Working"],
    PageWidth->WindowWidth,
    ScriptMinSize->9],
  
  Cell[StyleData[All, "Printout"],
    PageWidth->PaperWidth,
    ScriptMinSize->7,
    FontSize->10,
    PrivateFontOptions->{"FontType"->"Outline"}]
  }, Closed]],
  
  Cell[CellGroupData[{
  
  Cell["Notebook Options", "Section"],
  
  Cell["\<\
The options defined for the style below will be used at the Notebook level.\
\>", "Text"],
  
  Cell[RawData["\<\
Cell[StyleData[\"Notebook\"],
  PageHeaders->{{Cell[ 
          TextData[ {
            CounterBox[ \"Page\"]}], \"PageNumber\"], None, Cell[
         
          TextData[ {
            ValueBox[ \"FileName\"]}], \"Header\"]}, {Cell[ 
          TextData[ {
            ValueBox[ \"FileName\"]}], \"Header\"], None, Cell[ 
          TextData[ {
            CounterBox[ \"Page\"]}], \"PageNumber\"]}},
  PageHeaderLines->{True, True},
  PrintingOptions->{\"FirstPageHeader\"->False,
  \"FacingPages\"->True},
  CellBracketOptions->{\"Color\"->RGBColor[0, 0, 0.466667]},
  StyleMenuListing->None]\
\>"],
    PageHeaders->{{Cell[ 
            TextData[ {
              CounterBox[ "Page"]}], "PageNumber"], None, Cell[ 
            TextData[ {
              ValueBox[ "FileName"]}], "Header"]}, {Cell[ 
            TextData[ {
              ValueBox[ "FileName"]}], "Header"], None, Cell[ 
            TextData[ {
              CounterBox[ "Page"]}], "PageNumber"]}},
    PageHeaderLines->{True, True},
    PrintingOptions->{"FirstPageHeader"->False,
    "FacingPages"->True},
    CellBracketOptions->{"Color"->RGBColor[0, 0, 0.466667]},
    StyleMenuListing->None]
  }, Closed]],
  
  Cell[CellGroupData[{
  
  Cell["Header Graphic (to be pasted in)", "Section"],
  
  Cell[CellGroupData[{
  
  Cell[StyleData["HeaderCell"],
    ShowCellBracket->False,
    CellMargins->{{0, 0}, {0, 0}},
    Evaluatable->False,
    PageBreakBelow->False,
    ImageSize->{350, 24},
    ImageMargins->{{0, 0}, {0, 0}},
    ImageRegion->{{0, 1}, {0, 1}},
    StyleMenuListing->None],
  
  Cell[GraphicsData["Bitmap", "\<\
CF5dJ6E]HGAYHf4PAg9QL6QYHg<PAVmbKF5d0`40005N000061000`40O003h00OJgoo00Ikog?NJia[
W7>LNmh4Ool00gOoJg]c_@05Ool01GOoJke[NfnLOmh0g7oo001YOol047?oDeU6DTV]CHa1cSIc?YAJ
mgNmOomSW56<@NlfLe[g0Woo00U_oe<HBLi=JdG>=U8nU5lGMmh0fWoo001XOol00f_NH:El0005O000
16R4=Li2eVIB0g`000EXHcHaKke__FAS00El0004H:D^4DjDMmkIOol006Moo`03Nomh07`000Ql0003
>Q1l07`000=l0003CLeO_G`000Ql0003<Q1JmWoo0=Qoo`0000MVNFIjHWYVNV9jIWYRN@02IWX0269i
IWYVNV9jIWYRNFIjHWX2IWX00f9iIWYRNP02IWX2HWX2IWX00f9iHWYVN@02IWX01F9jIWYVNFIjHWX0
0VIj01=RNVIjHWYVNV9jIWUVNVIiHWYVNVIiHWYVNV9jIWYRNVIjIWURNP02IWX01F9iHWYVNVIjHWX0
0VIj00ERNFIjHWYVNFIj009RNP06IWUVNVIjHWYVNV9j0VIj00=RNVIjIWT00V9j0VIj00ARNVIjIWUR
NP9VNP03HWYVNF9j009VNP03HWYNgW@000]l0003O21l07`0009l0003CM9d0G`000Ql0009L00MKeHF
J[]VVfZjJY]V^fZj009Z^`03J]]Z^f[K009Zf`03K]]ZnfkK009^n`03K_a^nfkl009^o004Kaa^o6lL
La`3Ka`05W<mLaac?7<lLaac?G<lLcec?7LmLeac?GLlLeec?G=MMeecGGMMLeegGG=M0WMM0gMm00Eg
GGMnMgegOWMm00=gOP0=NiigOGMnNiigOWNNNiigOGNNNiigWW^NMkh017^N00Ek_W^NNiik_W^O00Ik
_P0>Nkmo_W^oNmik_gnoNmio_g_OOmmkgWnoOmmkg`Aog`03NmmoggoO009og`03OomoggoO065oo`00
00<d43P@>1000SP@00Hd4CP@=10h43PA=102>1001C@@>10h43P@=1000SP@00<d43P@=1000cP@00ld
43P@>14h43@@>10d43P@=14h43@@>10d43P@=1000SP@00Ld43P@=14h43@@>10d4@02>10013@@>10d
43P@0S@@00<h43@@>1000SP@00Td43P@>10d43PA>10d43P@=1000cP@00Ld43P@=10h43@@>10d4002
>1001C@@>10h43P@=1000SP@00@d43P@>10d408h4006=10h43@@>10d4CP?1G`000<l:TQ>O00017`0
00I41W`0O01l05`W?2h5O0000f`2O01l0003O0001B@692dlDT1a?7800T2B00A0Td2bA;=4/`94d`03
A?A8m4Sd00995003CAE9=DdD009=E@03DEIAME5e009AMP05DIIEUUFFEIME]P02EKL015WGEMMIeeGG
15Wh00aN65XHGQQN65hhGQQN>F8hHUUR>69IGUT3HUT0369iHWYVNF9jIWUVNV:IIYYVNVJJI[YZVP9V
^P06J[]Z^V[KJ[]ZffkK0f[K00=Znf[lK_/00Vkk0VlL00=_6flLK_`00W<L00A_?7<lKaac?09c?@09
Leac?G<mLeagGG=MMeegOG=M00=gO@07MiigOGNMMiikWGNNNih00W^n00AkWW^nNkik_`9k_P06Nmmo
gW_OOmikggoOEWoo0002A=<01DBcA=A4ddCCA;<014CC00]4/dCCA==4e4CCA;=4ddBcA=A4ddBc00=4
d`06A;=4e4CCA;=4ddCD0TCC00=4/dCCA=<00TCC00=4/dCDB;<00TCC00E4]4CCA;=4ddCD00A4d`06
A;=4ddCDA==4/dCD0dCC00E4e4CCA==4ddBd00=4d`03A;=4ddSD0094d`03A;=4e4CC00=4d`03A=A4
ddBc0094d`03A=A4ddBc0094d`03A=A4ddBd00A4d`0>A=A4ddBcA=A0e5B_O05d0g@SN05TB3Cg:?QP
9@Al0006:6X`eEB?B;8`nW0S17`000</JRciF8h017`000EL8b3>BAA=5Ddd009==@03DEE=EU5E00=A
MP9EUP0=DIIEUeFgEKII]eGGFMMEeeggFOMIf5hHFOP00ehH00MN>5hIGSQN>68iHUUN>@03HUT01f9i
IUURNFIjHWYVVFIj00AVVP09IY]V^VZJI[]Z^VZkI[]ZfVZj00EZf`07K_]ZnfkLJ_]^nfklK_/00Vkl
00I_6flLKaa^o7<LKc`2La`00flmLaa_?@02Lc`2Lcd02WMLLeecGGMMLeegGG=mMeegOGMM0WMm00Qg
OWNMMgigWWMmNiigWGNN0g^N00=k_W^NMkl017^n00Qo_g_NNkikggoNNmmogWoo0WoO00=ooWoOOol0
EGoo0002A;<0142B?54lDSab0TBc0210Td2BA;=4/cab@58lLCaB?790LSab@994/d2c@58lLT1b@990
LSab@74lDTBBA;=0Tcab@54lLT1bA;=0TSaA0Sab0T2B01LlLT1a?590LSab@590LT2B?790DT2BA;=4
/T1bA;=4Td1b?74lDT1b?78lLD1b0094/`09@78lLSaA@790Tcab@54lLT1b0094/`05@990DSab?590
TP02A;<013ab?34lDSaA0T2B014lDT1b@9=4/d2B?790LSaA@9=0e3SF>?LlecSF?=I8/dAY00El0005
;;50e42d@=@he`04O00017006914dcCi17`000Id01b^A?===DTECC@2CCD01E5ECEEAEE5fDGD00U5f
0UFF00aE]UFgEKII]eGGFKQEeeWhFOMIn5ggFOP4GQP2GST2HSP6HUT01fIjHUUVNF9jIWURVVIi009V
VP05JYYVVfJjJYYV^`02J[X00fZkJ]]Z^P03J]/02fkKJ]]^nf[KK_]Zo6kkJaa^o6kkK_`00VlL00Uc
6flLLaa_?7<lLaa_?G<lLcd00W<l0W<m00=gG7<mLed00W=M01EgGG=MMgecOGMnMgegOWMmNgigOGNN
MiekOW^NMiikWGNnNiik_W^NNkl00W^n00Qo_W_NNkmogg^nNmmogg_O0WoO00AoogoOOomogeEoo`00
02i4/d2BEKMZ^ehHJ[Y8ld1cCEEEUT1bA==VVV9IFMQRFFIiGSUVNUFF@79AMVJJFMMVNU5fGQQRFEWH
IYYAUT1bDGIZ^UWhGSUR>CaBGQQVVUWGIWYEUUVgIWYIf0=RF@0>IYYE]ddeIYYRFEWG@794m5Vg?59=
EFJJGQUN60=RF@0:HSTlLTBcIYYIn68iGQQ=EFZjFOP2HST06D2C@99I]fJjFMQRNEgh?98h46JJMii^
fflLB?AAUVIjIYYAMT1bEGIVVUWGIYYEUT2B00=4/`03A=@leFA800El0006>6/le4RdA==0]3cE17`0
00EH0b2>A;@lmg0T00Al00046:e954dECA@3CCD07deEDEEAEU5eDEIAUUFFDIIEUeFfEIME]eGGFKME
eeWgFMMImeghFOQJ65hGGOQN65hiGQQR>5iIHSUNF68i00=RF@08HWYVFF9iHWYRNFIjIYUVNP=VVP03
I[YVVVJk009Z^P05I[]Z^fJjJ]]Z^`05J]/01FkkJ]a^nfkkK_`00Vkk00=_76kkKa`00flL00Ec76lL
Laac?6lL009c?00=Leec?7=LLcecG7<mLeegGG=MMgegGGMnMed00gMm00IgOWMmMiekOWNNMid3Nih0
0gNNNiik_P02Nkh027^oNkik_goNNkikggnnNml2Oml017_nOmmoogoOEWoo0000?DBc@9=956JJOomE
]dBc?75Mn7oo=110TUFgLceoog<mB?Aoof9IA==0TdCCGQUoogMm@998m7MmOomN64CD@998m5FgOomo
gdSd@79956[LOomVVTBcA?=^o7ooHSU==E5EEIIooddeK_]oodBc@79==Goo>114ddde009oo`07A;=^
o7oOA==4/d2BBCD00Woo00=8m4BcDIH00Woo00U954BB@9=8lehIOomgGDCC>1000Woo00i8e42BHUUo
oe5FOomRFDCC@9=4dehIOomkWT2c0dBc00A4ddBc?=I/A`Al0007>4L<S3b@A;A4/dCC?=H017`000EL
8QR=@;8ln7@R00Al00048<i4m4dEBA@2CCD014eECCE=EE5e0U5f015AME5fEIIAUUFGEKII]UFgEMMI
]eWHFOMIf5WgGQQMn5XH009N6004HQQN>EhHGST2HST00eiIHSURF@02HUT0269jIWURNVIiHWYVVVJI
IWX4IYX01fZjIY]V^VZjJ[]ZffZj009Zf`0EJ[]ZffkKJ_]ZffkkJ_a^g6kkK_a_76kkKaa^o7<KKaac
76llLaa_?6lM009c?00BLcec?7<mLcagGG=MMeegG7=MMeecGGMmMeegOG=nMgegOWNM0WMn00UgWG]n
NiigWG^NMiikWWNnNih01G^n00]k_g_OOmikggnnNmmoogoONmmoogoO05Ioo`0002]4/dCC@98d47^n
>150/caAHSUooeFF?790DT2BOomEUS@@DEERNS`aA;<lDE5EOom4dd1b?59=5GooA==0LTBc@;<d3goo
Ka`h44CC@78lDGooDGHlDP02@780?7ooCEDlDD2C>35AMG<m>15_73`a?79EUWooIWTh<CP@Lceogc@@
>11gOCPA@;=4/c@?OomZVSPA@;<d47ooMcdd44BcA==0Tc0?OomR>3@@FMMoocPa@790/SPAGQQ^fd2b
IYXl<DCC?55AEGooA;=0LTBc?=DX/@8PSP0378m0SGPT00Al0003:4L/STCC0094/`03>=Ml07`000=l
000316/PSR2a00Al0006K00TdDdEBAA==Ddd0Tde00Y=EE5FCEEAEU5eDGIEUU6FEIME]P=E]`9Ie`06
EMMIeeWgGOQIn5Wg0ehH015N>EhHGSQR>EiHHSURFEiIHUURNF9IIWURFVIiHWYVNVIi00EVVP09J[YV
VfZjJ[YZ^fJkJ[YZ^fJk009Zf`0<K_]Zff[KK_]ZffkkJ_]^o6[kK_a_76lK16lL00=c76llLa`00W<l
00Qc?G<lLcecG7<mLeec?G=L0g=M029gOG=MMgegOGMMMgegOWMmMiigOG^NMiegWW^NMiikWW^nMiik
_g^nNkmk_WnoNkikggoNNkiogg_OOmikggoOOomogUMoo`0001m0/dBcA=<lDV[KEII0Tc`aK_aoogoO
?350TT1bOomVVSaA>35k_SaB?34`46ZkOolh4D2c@;90TWooFMLlLP02A;<013PaNgioocPA0TBc038h
4GooIYXlDDBc>11oofIj?554/dSd?790TSaALce0TcaAHUYoogMn@78h<FZkOolh<CaBIWUMn3P@>154
/gooEKI0LTBc?35c?Goo>114ddBcA=<h47ooMgh`3gMMOold44CC0TBc01<lDE6G?35kWSaB?34`46Zk
Oolh4DBc?=EXB6PSG09L8VP106`@[`04O0001f0188m4/dCCA;<leVa600Al0003J08dAg0000Al000;
D2@hlddECAA95DTdDCE==E5ECEEAE@02DGH04U6FDGIEUU6FEIME]UFgFKIEeeVhFMMImeWHFOMN65Wh
GQMJ609N6006GSUN>68iHSUNF68i169I00ERNVIiHWUVNF:J009VNP03IYUVVVJK009VVP05J[YV^fZj
I[YZ^`03J]/016ZjJ]]ZffkK0V[K00I^nfklK_]ZnfklKa/2K_`00flKKaac7002Ka`01W<LKcac76lm
Kcac?09c?@0<LcagG7=MMeecGGMMLeegGGMmLeegOGMn0WMm00agOWMmMiikOG^NNiegWW^NMkikWW^n
Nih4Nkh01g^oOkikgg_OOkmkgW_O00=og`03Oomoggoo05Eoo`0000Q4ddBcA;=0TUFFJ_]0DCPA0Woo
04AIefJJ?54h4GooLa`l<D1bEIIooflLLaaoogoO>114ddBc>15oof9J?554ddBc?55Z^goo<0llLT1b
=0moogMM>354/cPAOom^o30??55gGCaAA;=0LVIjEIHd47^NOom8m6kk=11R>Goo>354TSaBOom_77<L
Niiood2c@994/caAHWYoocPA0dBc00Ph4GMnOol`3WMnOolh4D2c0TBc00e0ddBB?79EUWooKaac77oo
Nmlh442c?=Id9004O0000g0RK09l0003O0000f@1;;54e002A;<00d3DB;9l000:O0001BR_BAE=54TE
CA@00dde0TeE00MAMU5EDGIAMUFFDIIEU`02EKH2EKL04EWGEMMImeWHFOMMn5WgGOQJ65hIGQQN>5hH
HSUN>5hiHST01F9I00QVNV9iIWYRNVIiIWYRVFIj0fJJ00UV^VZkIYYZ^fZjJ]YZ^fZjJ[/00V[K00a^
ff[KJ_]^nf[KK_aZnfklKa]^o6kkLa`4Ka`01g<LKcec76llLaac?7<m009c?005Leec?G=MLeecG002
Led00gMmMeegO@03Mgd037MnMgekWWMmMiigOGNNNiigWW^NMiikWP=k_P0?Nkmk_WnnNkikgWnoNmik
ggnoOomoggooNmmoogoO05Eoo`000dBc00=0/d1bMgh00SPa015oogMM<0moocaB>11oog^o>354/cPa
Okm0LSQAOomZfc`a0094/`0:=11oogMM>354/dCC?59In7ooGOP2HUT0<eWhOomoocPAA;<h<G=MOomV
NW^oNkhh4DBc@99=EF[K<0ioog<m<0ikOSPaEGIood2B@;<l<F[KFMLh<FlLOolh4DBcA=<lLUWGOom0
TT2CA==4/caAIYYoob`>K_aoocP@A;=4d`02A;<0342cA;<h<GoO@78hDGooK]/l<DCC@;A0d`Yl0008
@6/le4BcA;=4dd2c>=M/A`Ul000>D4Lm5DceBAA=54TECCA==DeECCEAEDeEDGIAM@9AMP9EUP05DIMI
]eFfFMME]`02FML015WgFOQImeWh0UhH00UMmehHGQQN>EhHHUUR>5hiGUT00f9I00MRNF9IIUYRNFIj
HWYVN@04IYX01fJjJYYV^VZkI[YV^fZj009Zf`05J[YZff[KJ]]^f`02J]/04FkkJ_]^o6kkJ_]^o6lL
K_]_77;lKaac76llLaa_77<mKc`00W<l0W<m01]c?7=MMcecG7MMLeegGG=MLgegGWMMMgegOWMmMiig
OW^MMiekWWNNNiikWG^NNkigWW^nNil00W^n00ek_g^nNmik_g_NOmmogW_OOmmogWoOOomog`1FOol0
000OA;=0/dCCA;<lDG<LA9=4dgooIWTd46IJIYX`3goOOolh44Bc@79N>E6F>11ooeWG?594ddBc?35g
OWoo>1000TBc02M0LU5EOomIeddeDII8m6klOolh44Bc?55Z^gooA==N67oo?550/dBc@79^o3P@OomR
FC`aDIIRFD2COom9541cA;94/fkl;0ioog^n>1400TBc00E0LTdeOom==D2B0094/`0:?79Mn7oo=11A
MWooA;=0TTBcA=<2A;<024CC@79R>E6F>11ooeWG?782A;<00ccFE8il0007O0001E1Y>=I4]4BcA=<0
0dBc00<dmfa7O0001W`000QHAcTHB?A954SdBAE=54dd0Tde00]=EE5FDEEAMTefEGIAUUFFDIME]UFF
009E]`08FMMEeeWGFMQIeeWhGOQIm`=N6003GSUR65hh009N>@03HUQR>F9I00=RF@07IWYRNVIiHWYV
NFJJIWX00VJJ00YZVVJJIYYVVfJjJ[]Z^VJkJ[YV^`9Zf`0<J[]^nf[KJ]]^nf[kK]a^nf[kK_a_76kk
0VlL00Q_6g<LKaac76lLLca_?7<L0W<m00]c?7MLLcacGG=LLcecGGMMLeegOGMM009gO@03LgegOGMn
009gO@06MgikWWMnNiegWW^N0WNN015k_W^NNkik_g^nOkikgWnoNmmo_W_ONkmogWooNmmoogoO05Mo
o`0001m4/dCCA;=0/d1bGQQEeddeOomE]caB>31ooc@?KaaoocPAA;=0/dBbK_a=5GooB?A0TT2CA;<l
<FZkOolh4@02A;<0:42B@9=ooe6F?350TS`aFMMoocaBA;<lDEhHOold43P@Lce8m42BA;<lDF9JFMMo
oe5f@78h<G<lA==ooeFG?994/caBJ_]4TgooJ[/lDD2B0TBc00@lLWooFOQ0DP94/`08?79=EGooBA@d
47ooJ[/h<@A4/`0??590/T1bK_a=5GooB?A0LTBcA==4/ccFA;=TB7@S009l000:M0=PJ42d?=I4/dCC
A;=0/dBcA=<2A;<02CSGC;1XAg`1O01h0FA6A;4m5`03B?@00dTDCAA95@02CCD02deECCE=EE5FDGEA
MU6EEGIAUUFFEIL00UFf00YI]eGGFKMIeeWgFOQImeWhGOQJ60=N6005GSUR>5hiHUUN>@06HUT01fIi
HWYVNF9jIYUVNVJI009VVP0:IY]Z^VJkJYYV^VZkJ[YZffZjJ[/4J]/016kkJ]]^nf[k0Vkl00A^nfkl
Kaa^n`E_7004Lcac77<lKc`2Lc`2Lcd01W=MMcecGG=MLeacG@9gG@03LgegGGMm009gO@9gOP0:Mgeg
WWMmMiikWW^MMiik_W^NMih3Nkh01W^oNkik_W_NOkikg`9ogP06NmmoggoOOmmoog_OEWoo0005A;<0
34CCIWYR>GooB?A0TT1bHUUIn5ghOollD@94/`0T?59IegooOolh44SdDCDlLCabGQQoocaA@;=0LTde
>35oof9J?554/d2BDEEoodTD@98lTUEfOom9541c@990LTSDA==0TdCC0Woo02Q0TT2C@99EUVIjOomI
md1AA;=0TTBcMgeooeFg?35EUcaA@;<h47ooIYXlDD2cA;=8m41bOomIecP@GQQooc`a@794/d2bA;=Z
fd1B?79Ie`9oo`03=10lLT2B00=4/`03@=@leCSG008leP05>?LleD2dA;=0d`03A;<00dCCA;=0/`02
A;<023cD?=HheccF??LleTCeA=<3B?@014dDBAE==DdD0Tde01E=EE5ECEEAMU5EDGIAUUFFDIME]UFG
EKMIeUFgFMMEeeWhFMMIn5hHFOL00ehH00AN>5hHGSUN>09R>@03GUQRFF9I009RF@06IWYRNV9IHWYV
VFIj16JJ00YV^VJJJYYV^VZkJ[YV^fZkJ]]Z^P=Zf`05K]]Zff[KJ]]^o002K_/00f[lKa]^n`02Ka`0
17;lKaac?6lL0W<L00A_?7<MLcac?@9c?004LcecG7LmLe`2Med01g=mMeegGGMmMeegOGMn009gO@06
MiigOGNNNgekWWNN0W^N00AgWW^nNkikW`=k_P04Okmk_W_ONkh2Nml01GoONmioggooOmh0Egoo0000
1d2cA==4/dCCA;<h<FZj009oo`09?350/dBc?35gGEWgOom8e42B0094/`0M=11oogoo>10lLWooB=@d
44BcOom4/cPAA==ogbP=OomgGC0@A;<lLSPAOomI]cPA@78h<GooDGHh4002>34017oo@;=4TR`>0Woo
00Pl<D2cA;<h4G<LOomVNS@@0TBc02Hh4G<LOom4dc`aJ_]c7C@?<0moog^N=10d3gNNEIHX3GooIWXd
430?NkioocPa?58l<E5fOolh<DBc>11oog^NCEEooe5f@994/dCC0dBc00E0ddBcA;=4/dCC00=4/`0<
A==4/dBcA;=4ddBcA==4/dCCA;=0/dBd0TCC00i8e4SdA?=8m4TDCAA954TeCCEA=DeEDEEAEU5e0U5f
00EEMU6FEIIE]eFf009E]`03FMMEeeWG009Im`9In003GOQJ65hH009N6006GSUN668iGSQRFF8i0V9I
00URNF9IIUURNFIjHWUVNV:IIWX016JJ00MV^VJKJ[YV^VZkJ[YZ^`06J]/00fkkJ]]^n`02J_/01Fkl
K_]^o6lLK_/00VlL00ec76lLLca_76llLca_?7<mLcac?G=MLcac?@03Led00g=LMeecG@03Mgd02gMn
MgegOGNNMgegWW^NMgigWG^NMih00W^N00AgWW^NNkik_`=k_P05Ommk_WoONmio_`02Oml01GooNmmo
ggooOml0EGoo0002A;<0442cA;=4/d1bCCEoogoO>114/dCC?79E]goOOom953ab0TBc00llDFZkNihh
DCaBHUUoofIjK_]oog^NHWUoog^nGQP00Woo00A^o4CCCAEgO@9oo`03HYU95GMM009oo`07J[YZ^goo
Oolh44SdK_`00Woo00Dh4DBcA;=0TTTD009oo`0<J]]4ddBc@990/goo?350/cPAOomk_VIj0Woo00ER
FG=MOom4/fkK009oo`0DJ]]4/c@?KaaooehHFOQoogoO?554/caAJYYcGE5fOomE]T1bA==0/`94/`0:
@==4/dBc@;=4ddBc@;=4/dCC@;<2A;<0143CA;=4/d2c0TBc00e0ddBcA==4/dSCA==4m4SdBAA<m4TD
CAE==002CCD3CED2DGH02E6EDGIEUU6GEIIE]UGGEKMEe`02FML03eWHFOQImeghFOMN65XHGQQN>EhH
HSUN>F9IGSQN>@02HUT01VIIHUURNFIjHWYRN@9VNP03IYUVNVZJ00=VVP0?J[YVVfZjI[YZ^f[KI[YZ
^f[KJ[]ZnfkKJ]]^nf[K009^o007J_]^nfklKa]^o6lLKa/00VlL00Ec76llLaa_?G<L009c?007Lcec
?7LmLeec?7=MMe`00W=M00EgOG=NMgegGGMm009gOP0>MgegOW^MMgigWG^NMiikWG^NMkikWW^nNkmo
_P9k_P07Nkmk_W_ONkiogg_NNml00goO00=oogoOOol0EGoo00002TBcA==4/dBc@;90TehhOomkWSPa
0dBc00Dd47ooOomc7D2B0094/`0V@;=0/TdD@9=4/d2BDGI8ldCD>354ddSdBAAA=E5f@;=0TUWG@;=8
m5FF?558deFGB==EUSaaA;=E]eEfCEE4TT2CA==E]dCCA;=0/P=4/`04@794ddSdEKL2A;<05dCC@798
m4BbA;=0TU5EBAA8m3ab?59=54BcDGI4/eFg@794/eVgA;=0/c`aA;800UhH00Y4/cPaA;=4dd2c@998
m3aAB?A0LP=4/`05A==4/dBcA;=4d`03A;<01DCCA;=4/dBcA=<00dBc00=4ddBcA;<014Bc00A4ddCD
B=A8l`98m003BAA95DdD00===@03CEEAEU5E009AMP0=EGIAMU6FEIIE]eFFFKME]UVgEMQIeeWgFML0
0UWh00=J65ghGQP00UhH00AN>EhhHSQR>@9RF@0;GUURFF9IHUUVFV9iIWUVNV9iIWYRVP03IYX026Jj
JYYV^fZjI[]Z^VZkJ[X2J]/02FZkJ]]Zff[KK_]ZffkkJ_]^n`02K_`01VlLK_a_6fklKaac709_700;
Laac?7<LKcac?G<lLcec?7<mLeagG@02Led2Med017=MMgegGG=n0gMm00agOW]mMgigWGNNNiekWWNN
NkikWWNnNih2Nkh03G^oOkik_W^nNmmogW^oOmmogWoONmmooWoO05Moo`000TBc00U4ddBc@79cGG<L
J[]In41bA=<00TBc00M0LUFFK_aV^W^NB?A0/`02A;<02T2CA;=4/dBc@790TdBbA;=0TdBC0T2B00i0
TdBB@9=0TTBCA;=0TTBc@9=0TT2c@994Td2C0T2B00M0LT2cA;=4/d2BA990/`03A;<01DCCA;=0TT2C
@98014Bc00M0/dBcA;=4/d2B@9=0TP02A;<0242BA9=0TT2c@794/T2C@983A;<0142c@790LT2c1DBc
00=4TdBc@;<00dBc00E4ddBcA;=4/dCC00=4/`05A==4/dBcA;=4d`03A;<01DCCA;=4/dBcA=<00TBc
00I4ddBcA?=4ddSdB=@2BA@02TdDBAE==4deCEE==E5ECEEAME5F0U6F00AEUUFGEIIE]P9E]`09EMMI
eeWGFMMIn5ggFOQMn5XH009N600BGSUN65hHGSURFEhiHSURFF8iHWURFVIiHUURNV9iIYYVNVIi16JJ
00UVVfZJI[]Z^VJjJ]YZ^f[JJ[/00f[K00Y^ff[KJ]]ZnfkkK_aZnfkkK_a^n`9_700EL_a_76lLLaa_
?7<MKcac7G<lLcec?7=MLcacGG<mLeegGG=LLeegOG=M00AgO@08MiigOGMnMiekWWMnNiigWP9kWP05
MiikWW^nNkik_`03Nkh027oONmik_goONmiogg_OOol2Oml00gooOmmoo`1DOol000E4/`04?54lDSaA
@783A;<01TCCA;=0LSaA?58lD@A4/`05A==4/dBcA;=4d`03A;<01DCCA;=4/dBcA=<00dBc00E4ddBc
A;=4/dCC00=4/`05A==4/dBcA;=4d`03A;<01DCCA;=4/dBcA=<00dBc00E4ddBcA;=4/dCC00=4/`05
A==4/dBcA;=4d`03A;<01DCCA;=4/dBcA=<00dBc00E4ddBcA;=4/dCC00=4/`05A==4/dBcA;=4d`03
A;<01DCCA;=4/dBcA=<00dBc00E4ddBcA;=4/dCC00=4/`05A==4/dBcA;=4d`03A;<01DCCA;=4/dSD
A?<014Sd00===DdDBCD00Tde00M=EE5EDEE=MU5eDGIEMP02DIH035FgEIME]UVgFMMEeeWGFMQImeWh
GOQIm`AN6006GSUN>5hhHSURF5iI169I00MRNVIjHWUVNV9iIYYVNP04IYX01VJjJY]Z^VJkJ[YV^`9Z
^`0@J]YZff[KK]]ZffkkJ]]^nf[lK]]^o6[lK_]_76klKa/2Ka`01W<LKaac76llLca_?09c?007Lcec
?7=MLcacGGLlLgd00WMM00=cGGMmMed00gMm0WMn00MgWGMnMgekWGNNNiigW@02Nih00gNnNiik_`03
Nkh01gnoNkikggoNNmmogg_N009og`9oo`03Ommoogoo05Aoo`000814/dCDA;=4e4BcA=A4/dCDA;=4
e4BcA=A4/dCDA;=4e4BcA=A4/dCDA;=4e4BcA=A4/dCDA;=4e4BcA=A4/dCDA;=4e4BcA=A4/dCDA;=4
e4BcA=A4/dCDA;=4e4BcA=A4/dCDA;=4e4BcA=A4/dCDA;=4e4BcA=A4/dCDA;=4e4BcA=A4/dCDA;=4
e4BcA=A4/dCDA;=4e4BcA=A4/dCDA;=4e4BcA=A4/dCDA;=4e4BcA=A4/dCDA;=4e4BcA=A4/dCDA;=4
e4BcA=A4/dCDA;=4e4BcA=A4/dCDA;=4e4BcA=A4/dCDA;=4e4BcA=A4/dCDA;=4e4BcA=A4/dSD0TCC
00A8e4SdB?E9509=5008BAE==E4eCEEAEDeEDGIEMP9AMP08DIIEUUFGEKII]UFgFMMEe`9Ie`05FOMM
meWhGOQJ6003GQP01V8iGSQN>F8iHUUN>@=RF@06IUURNFIJHWUVNV:I0VIj00UVVFJJIYYZVVJjIYYV
^VJkJ[X00VZk00=ZfV[KJ[/00f[K01A^nf[KK_aZffkkK_a[6fkkK_a_6flLLaa_77<LKaac?6llLaa_
77<l0W<m00Ac?7<mMcac?@EcG@0@MgegGGMmMeigOGMnMgegWGMnMiikWWNNNiikWG^NMkh2Nih3Nkh0
2G_OOkik_W_NNkmogW^oOmikg`02Oml00gooOmmog`1FOol0008/3P04<0h/3R`><0h2;0h0130>;0h/
3S0>0R`>00@`3R`>;0h`3P8/3P04<0h/3R`><0h2;0h0130>;0h/3S0>0R`>00@`3R`>;0h`3P8/3P04
<0h/3R`><0h2;0h0130>;0h/3S0>0R`>00@`3R`>;0h`3P8/3P04<0h/3R`><0h2;0h0130>;0h/3S0>
0R`>00@`3R`>;0h`3P8/3P04<0h/3R`><0h2;0h0130>;0h/3S0>0R`>00@`3R`>;0h`3P8/3P04<0h/
3R`><0h2;0h0130>;0h/3S0>0R`>00@`3R`>;0h`3P8/3P04<0h/3R`><0h2;0h0130>;0h/3S0>0R`>
00@`3R`>;0h`3P8/3P05<0l`3S0?<0ld3`03=102>103>342?5400cab@790TP02@9800dBc@;=4d`02
A=<2B?@3BA@04TddBCE==DeDCEEAEDeeDEIAME6FDGIEUU6FEKIE]eFfEKMIeP9Ee`07FMMImeWgFOQI
meghFQP015hH0ehh00AR>EiHHUUNF@=RF@9RN@05IWURNVJIIWYVV@03IYX3I[X016ZkI[YZ^f[J0V[K
00YZfV[KJ_]^nf[kK_]^o6lKK_a_6`=_700KLca_?7<LKcac?G<lLeac?7=MLeacGGMmLeegOG=mMgec
OGMnMiegOGNNNiigWG^nMiik_WNn009k_P07Nmik_goNNmikggoOOoh0Dgoo0000

\
\>"], "Graphics",
    ShowCellBracket->False,
    CellMargins->{{0, 0}, {Inherited, 0}},
    Evaluatable->False,
    ImageSize->{350, 24},
    ImageMargins->{{0, 0}, {0, 0}},
    ImageRegion->{{0, 1}, {0, 1}}]
  }, Closed]]
  }, Closed]],
  
  Cell[CellGroupData[{
  
  Cell["Styles for Headings", "Section"],
  
  Cell[CellGroupData[{
  
  Cell[StyleData["Title"],
    ShowCellBracket->False,
    CellMargins->{{60, 0}, {0, 5}},
    PageBreakBelow->False,
    LineSpacing->{0, 37},
    CounterAssignments->{{"Section", 0}, {"Equation", 0}, {"Figure", 0}},
    FontSize->36,
    FontTracking->"Plain",
    FontColor->GrayLevel[0]],
  
  Cell[StyleData["Title", "Printout"],
    CellMargins->{{9, 0}, {0, 0}},
    FontSize->24,
    FontTracking->"Plain"]
  }, Closed]],
  
  Cell[CellGroupData[{
  
  Cell[StyleData["Subtitle"],
    ShowCellBracket->False,
    CellMargins->{{60, 0}, {0, 5}},
    PageBreakBelow->False,
    LineSpacing->{1, 0},
    CounterAssignments->{{"Section", 0}, {"Equation", 0}, {"Figure", 0}},
    FontFamily->"Helvetica",
    FontSize->14,
    FontSlant->"Italic",
    FontColor->GrayLevel[0]],
  
  Cell[StyleData["Subtitle", "Printout"],
    CellMargins->{{9, 0}, {0, 0}},
    ParagraphIndent->-85,
    FontSize->16]
  }, Closed]],
  
  Cell[CellGroupData[{
  
  Cell[StyleData["MiscSection"],
    CellFrame->{{0, 0}, {0, 2}},
    CellDingbat->None,
    ShowCellBracket->False,
    ShowGroupOpenCloseIcon->True,
    CellMargins->{{25, 0}, {10, 35}},
    CellGroupingRules->{"SectionGrouping", 30},
    PageBreakBelow->False,
    CellFrameMargins->{{8, 4}, {0, 4}},
    LineSpacing->{0, 22},
    CounterIncrements->"Section",
    CounterAssignments->{{"Subsection", 0}, {"Subsubsection", 0}},
    FontFamily->"Helvetica",
    FontSize->20,
    FontWeight->"Bold",
    FontColor->RGBColor[0.6, 0.149996, 0.6]],
  
  Cell[StyleData["MiscSection", "Presentation"],
    CellMargins->{{40, 10}, {11, 32}},
    LineSpacing->{1, 0},
    FontSize->24],
  
  Cell[StyleData["MiscSection", "Condensed"],
    CellMargins->{{18, Inherited}, {6, 12}},
    FontSize->12],
  
  Cell[StyleData["MiscSection", "Printout"],
    CellMargins->{{13, 0}, {7, 22}},
    FontSize->14]
  }, Open  ]],
  
  Cell[CellGroupData[{
  
  Cell[StyleData["Section"],
    CellFrame->{{0, 0}, {0, 2}},
    CellDingbat->None,
    ShowCellBracket->False,
    ShowGroupOpenCloseIcon->True,
    CellMargins->{{25, 0}, {10, 35}},
    CellGroupingRules->{"SectionGrouping", 30},
    PageBreakBelow->False,
    CellFrameMargins->{{8, 4}, {0, 4}},
    LineSpacing->{0, 22},
    CounterIncrements->"Section",
    CounterAssignments->{{"Subsection", 0}, {"Subsubsection", 0}},
    FontFamily->"Helvetica",
    FontSize->20,
    FontWeight->"Bold",
    FontColor->RGBColor[0.4, 0.149996, 0.149996]],
  
  Cell[StyleData["Section", "Presentation"],
    CellMargins->{{40, 10}, {11, 32}},
    LineSpacing->{1, 0},
    FontSize->24],
  
  Cell[StyleData["Section", "Condensed"],
    CellMargins->{{18, Inherited}, {6, 12}},
    FontSize->12],
  
  Cell[StyleData["Section", "Printout"],
    CellMargins->{{13, 0}, {7, 22}},
    FontSize->14]
  }, Open  ]],
  
  Cell[CellGroupData[{
  
  Cell[StyleData["Subsection"],
    CellFrame->{{0, 0}, {0, 0.5}},
    CellDingbat->None,
    ShowCellBracket->False,
    ShowGroupOpenCloseIcon->True,
    CellMargins->{{35, Inherited}, {8, 12}},
    CellGroupingRules->{"SectionGrouping", 45},
    PageBreakBelow->False,
    CellFrameLabelMargins->6,
    CounterIncrements->"Subsubsection",
    FontFamily->"Times",
    FontSize->14,
    FontWeight->"Bold"],
  
  Cell[StyleData["Subsection", "Printout"],
    CellMargins->{{9, 0}, {6, 40}},
    FontSize->12]
  }, Open  ]],
  
  Cell[CellGroupData[{
  
  Cell[StyleData["Subsubsection"],
    CellFrame->{{0, 0}, {0, 0.25}},
    CellDingbat->None,
    ShowCellBracket->False,
    ShowGroupOpenCloseIcon->True,
    CellMargins->{{45, 0}, {8, 8}},
    CellGroupingRules->{"SectionGrouping", 50},
    PageBreakBelow->False,
    CellFrameMargins->{{8, 4}, {0, 4}},
    LineSpacing->{0, 22},
    CounterIncrements->"Subsection",
    CounterAssignments->{{"Subsection", 0}, {"Subsubsection", 0}},
    FontSize->14,
    FontWeight->"Bold"],
  
  Cell[StyleData["Subsubsection", "Printout"],
    CellFrame->{{0, 0}, {0, 0.5}},
    CellDingbat->None,
    CellMargins->{{22, 0}, {4, 20}},
    FontSize->11]
  }, Open  ]]
  }, Closed]],
  
  Cell[CellGroupData[{
  
  Cell["Styles for Body Text", "Section"],
  
  Cell[CellGroupData[{
  
  Cell[StyleData["Text"],
    CellMargins->{{60, 20}, {2, 8}},
    TextJustification->0,
    LineSpacing->{1, 1},
    ParagraphSpacing->{0, 1},
    FontFamily->"Times New Roman",
    FontSize->12,
    FontWeight->"Plain",
    FontSlant->"Plain",
    FontTracking->"Plain",
    FontColor->GrayLevel[0],
    FontVariations->{"Underline"->False,
    "Outline"->False,
    "Shadow"->False}],
  
  Cell[StyleData["Text", "Printout"],
    CellMargins->{{9, 0}, {4, 4}},
    LineSpacing->{1, 3},
    FontFamily->"Times New Roman"]
  }, Open  ]],
  
  Cell[CellGroupData[{
  
  Cell[StyleData["Commentary"],
    CellFrame->{{0, 0}, {0, 0.5}},
    CellMargins->{{60, 20}, {10, 5}},
    LineSpacing->{1, 0},
    ParagraphSpacing->{0, 1},
    FontFamily->"Times New Roman",
    FontColor->GrayLevel[0]],
  
  Cell[StyleData["Commentary", "Printout"],
    CellMargins->{{9, 0}, {4, 4}},
    ParagraphSpacing->{0, 6}]
  }, Open  ]]
  }, Closed]],
  
  Cell[CellGroupData[{
  
  Cell["Styles for Input/Output", "Section"],
  
  Cell["\<\
The cells in this section define styles used for input and output to the \
kernel.  Be careful when modifying, renaming, or removing these styles, \
because the front end associates special meanings with these style names.\
\>", "Text"],
  
  Cell[CellGroupData[{
  
  Cell[StyleData["Input"],
    CellFrame->True,
    CellMargins->{{60, 20}, {0, 0}},
    Evaluatable->True,
    CellGroupingRules->"InputGrouping",
    CellHorizontalScrolling->True,
    PageBreakWithin->False,
    GroupPageBreakWithin->False,
    CellLabelMargins->{{23, Inherited}, {Inherited, Inherited}},
    CellFrameColor->RGBColor[0.6, 0.2, 0],
    DefaultFormatType->DefaultInputFormatType,
    AutoItalicWords->{},
    LanguageCategory->None,
    FormatType->InputForm,
    ShowStringCharacters->True,
    NumberMarks->True,
    CounterIncrements->"Input",
    FontWeight->"Bold",
    Background->RGBColor[1, 0.975998, 0.949996]],
  
  Cell[StyleData["Input", "Printout"],
    CellFrame->True,
    CellMargins->{{37, 0}, {6, 6}}]
  }, Open  ]],
  
  Cell[StyleData["InlineInput"],
    Evaluatable->True,
    CellGroupingRules->"InputGrouping",
    CellHorizontalScrolling->True,
    PageBreakWithin->False,
    GroupPageBreakWithin->False,
    DefaultFormatType->DefaultInputFormatType,
    AutoItalicWords->{},
    FormatType->InputForm,
    ShowStringCharacters->True,
    NumberMarks->True,
    CounterIncrements->"Input",
    FontWeight->"Bold"],
  
  Cell[CellGroupData[{
  
  Cell[StyleData["Output"],
    CellFrame->{{3, 0}, {0, 0}},
    CellMargins->{{60, 20}, {15, 0}},
    CellEditDuplicate->True,
    CellGroupingRules->"OutputGrouping",
    CellHorizontalScrolling->True,
    PageBreakWithin->False,
    GroupPageBreakWithin->False,
    GeneratedCell->True,
    CellAutoOverwrite->True,
    CellLabelMargins->{{23, Inherited}, {Inherited, Inherited}},
    CellFrameColor->RGBColor[0, 0.500008, 0.6],
    DefaultFormatType->DefaultOutputFormatType,
    AutoItalicWords->{},
    LanguageCategory->None,
    FormatType->InputForm,
    CounterIncrements->"Output"],
  
  Cell[StyleData["Output", "Printout"],
    CellFrame->False,
    CellMargins->{{37, 0}, {6, 2}},
    Background->GrayLevel[1]]
  }, Closed]],
  
  Cell[CellGroupData[{
  
  Cell[StyleData["Graphics"],
    CellFrame->{{3, 0}, {0, 0}},
    CellMargins->{{60, 20}, {0, 0}},
    CellGroupingRules->"GraphicsGrouping",
    CellHorizontalScrolling->True,
    PageBreakWithin->False,
    GeneratedCell->True,
    CellAutoOverwrite->True,
    ShowCellLabel->False,
    CellFrameColor->RGBColor[0, 0.6, 0.6],
    DefaultFormatType->DefaultOutputFormatType,
    FormatType->InputForm,
    CounterIncrements->"Graphics",
    ImageSize->{250, 250}],
  
  Cell[StyleData["Graphics", "Printout"],
    CellFrame->False,
    CellMargins->{{37, 0}, {6, 2}},
    ImageSize->{250, 250},
    ImageMargins->{{28, Inherited}, {Inherited, 0}}]
  }, Closed]],
  
  Cell[CellGroupData[{
  
  Cell[StyleData["Message"],
    CellMargins->{{45, Inherited}, {Inherited, Inherited}},
    CellGroupingRules->"OutputGrouping",
    PageBreakWithin->False,
    GroupPageBreakWithin->False,
    GeneratedCell->True,
    CellAutoOverwrite->True,
    ShowCellLabel->False,
    DefaultFormatType->DefaultOutputFormatType,
    HyphenationOptions->{"HyphenationCharacter"->"\[Continuation]"},
    AutoItalicWords->{},
    LanguageCategory->None,
    FormatType->InputForm,
    CounterIncrements->"Message",
    StyleMenuListing->None,
    FontSize->11,
    FontColor->RGBColor[0, 0, 1]],
  
  Cell[StyleData["Message", "Presentation"],
    CellMargins->{{72, Inherited}, {Inherited, Inherited}},
    LineSpacing->{1, 0},
    FontSize->16],
  
  Cell[StyleData["Message", "Condensed"],
    CellMargins->{{41, Inherited}, {Inherited, Inherited}},
    FontSize->11],
  
  Cell[StyleData["Message", "Printout"],
    CellMargins->{{39, Inherited}, {Inherited, Inherited}},
    FontSize->7,
    FontColor->GrayLevel[0]]
  }, Closed]],
  
  Cell[CellGroupData[{
  
  Cell[StyleData["Print"],
    CellMargins->{{72, 20}, {Inherited, Inherited}},
    CellGroupingRules->"OutputGrouping",
    CellHorizontalScrolling->True,
    PageBreakWithin->False,
    GroupPageBreakWithin->False,
    GeneratedCell->True,
    CellAutoOverwrite->True,
    ShowCellLabel->False,
    CellLabelMargins->{{23, Inherited}, {Inherited, Inherited}},
    DefaultFormatType->DefaultOutputFormatType,
    FormatType->InputForm,
    StyleMenuListing->None],
  
  Cell[StyleData["Print", "Printout"],
    CellMargins->{{44, Inherited}, {Inherited, Inherited}}]
  }, Closed]],
  
  Cell[CellGroupData[{
  
  Cell[StyleData["CellLabel"],
    LanguageCategory->None,
    StyleMenuListing->None,
    FontFamily->"Helvetica",
    FontSize->9,
    FontColor->RGBColor[0, 0, 1]],
  
  Cell[StyleData["CellLabel", "Presentation"],
    FontSize->12],
  
  Cell[StyleData["CellLabel", "Condensed"],
    FontSize->9],
  
  Cell[StyleData["CellLabel", "Printout"],
    FontFamily->"Courier",
    FontSize->8,
    FontSlant->"Italic",
    FontColor->GrayLevel[0]]
  }, Closed]]
  }, Closed]],
  
  Cell[CellGroupData[{
  
  Cell["Unique Styles", "Section"],
  
  Cell[CellGroupData[{
  
  Cell[StyleData["DisplayText"],
    CellFrame->0.5,
    CellMargins->{{60, 20}, {15, 5}},
    LineSpacing->{0, 12},
    ParagraphSpacing->{0, 6},
    FontFamily->"Helvetica",
    FontSize->12,
    FontWeight->"Bold",
    FontSlant->"Plain",
    Background->RGBColor[1, 1, 0.8]],
  
  Cell[StyleData["DisplayText", "Printout"],
    CellMargins->{{9, 0}, {4, 4}},
    ParagraphSpacing->{0, 6},
    FontSize->10,
    Background->GrayLevel[0.900008]]
  }, Closed]],
  
  Cell[CellGroupData[{
  
  Cell[StyleData["PictureGroup"],
    CellFrame->{{3, 0}, {0, 0}},
    CellMargins->{{60, Inherited}, {0, 0}},
    CellGroupingRules->"GraphicsGrouping",
    CellHorizontalScrolling->True,
    PageBreakWithin->False,
    ShowCellLabel->False,
    CellFrameColor->RGBColor[0, 0.6, 0.6],
    CounterIncrements->"Graphics",
    ImageSize->{250, 250},
    Background->RGBColor[1, 0.900008, 0.900008]],
  
  Cell[StyleData["PictureGroup", "Printout"],
    CellFrame->False,
    CellMargins->{{37, Inherited}, {6, 2}},
    ImageSize->{250, 250},
    ImageMargins->{{28, Inherited}, {Inherited, 0}}]
  }, Closed]]
  }, Closed]],
  
  Cell[CellGroupData[{
  
  Cell["Styles for Headers and Footers", "Section"],
  
  Cell[StyleData["Header"],
    CellMargins->{{0, 0}, {4, 1}},
    StyleMenuListing->None,
    FontFamily->"Helvetica",
    FontSize->9,
    FontSlant->"Italic"],
  
  Cell[StyleData["Footer"],
    CellMargins->{{0, 0}, {0, 4}},
    StyleMenuListing->None,
    FontFamily->"Helvetica",
    FontSize->6],
  
  Cell[StyleData["PageNumber"],
    CellMargins->{{0, 0}, {4, 1}},
    StyleMenuListing->None,
    FontFamily->"Helvetica",
    FontSize->9,
    FontWeight->"Bold"]
  }, Closed]],
  
  Cell[CellGroupData[{
  
  Cell["Palette Styles", "Section"],
  
  Cell["\<\
The cells below define styles that define standard ButtonFunctions, for use \
in palette buttons.\
\>", "Text"],
  
  Cell[StyleData["Paste"],
    StyleMenuListing->None,
    ButtonStyleMenuListing->Automatic,
    ButtonBoxOptions->{ButtonFunction:>(FrontEndExecute[ {
        FrontEnd`NotebookApply[ 
          FrontEnd`InputNotebook[ ], #, After]}]&)}],
  
  Cell[StyleData["Evaluate"],
    StyleMenuListing->None,
    ButtonStyleMenuListing->Automatic,
    ButtonBoxOptions->{ButtonFunction:>(FrontEndExecute[ {
        FrontEnd`NotebookApply[ 
          FrontEnd`InputNotebook[ ], #, All], 
        SelectionEvaluate[ 
          FrontEnd`InputNotebook[ ], All]}]&)}],
  
  Cell[StyleData["EvaluateCell"],
    StyleMenuListing->None,
    ButtonStyleMenuListing->Automatic,
    ButtonBoxOptions->{ButtonFunction:>(FrontEndExecute[ {
        FrontEnd`NotebookApply[ 
          FrontEnd`InputNotebook[ ], #, All], 
        FrontEnd`SelectionMove[ 
          FrontEnd`InputNotebook[ ], All, Cell, 1], 
        FrontEnd`SelectionEvaluateCreateCell[ 
          FrontEnd`InputNotebook[ ], All]}]&)}],
  
  Cell[StyleData["CopyEvaluate"],
    StyleMenuListing->None,
    ButtonStyleMenuListing->Automatic,
    ButtonBoxOptions->{ButtonFunction:>(FrontEndExecute[ {
        FrontEnd`SelectionCreateCell[ 
          FrontEnd`InputNotebook[ ], All], 
        FrontEnd`NotebookApply[ 
          FrontEnd`InputNotebook[ ], #, All], 
        FrontEnd`SelectionEvaluate[ 
          FrontEnd`InputNotebook[ ], All]}]&)}],
  
  Cell[StyleData["CopyEvaluateCell"],
    StyleMenuListing->None,
    ButtonStyleMenuListing->Automatic,
    ButtonBoxOptions->{ButtonFunction:>(FrontEndExecute[ {
        FrontEnd`SelectionCreateCell[ 
          FrontEnd`InputNotebook[ ], All], 
        FrontEnd`NotebookApply[ 
          FrontEnd`InputNotebook[ ], #, All], 
        FrontEnd`SelectionEvaluateCreateCell[ 
          FrontEnd`InputNotebook[ ], All]}]&)}]
  }, Closed]],
  
  Cell[CellGroupData[{
  
  Cell["Hyperlink Styles", "Section"],
  
  Cell["\<\
The cells below define styles useful for making hypertext ButtonBoxes.  The \
\"Hyperlink\" style is for links within the same Notebook, or between \
Notebooks.\
\>", "Text"],
  
  Cell[CellGroupData[{
  
  Cell[StyleData["Hyperlink"],
    StyleMenuListing->None,
    ButtonStyleMenuListing->Automatic,
    FontColor->RGBColor[0, 0, 1],
    ButtonBoxOptions->{ButtonFunction:>(FrontEndExecute[ {
        FrontEnd`NotebookLocate[ #2]}]&),
    Active->True,
    ButtonNote->ButtonData}],
  
  Cell[StyleData["Hyperlink", "Presentation"]],
  
  Cell[StyleData["Hyperlink", "Condensed"]],
  
  Cell[StyleData["Hyperlink", "Printout"],
    FontColor->GrayLevel[0],
    FontVariations->{"Underline"->False}]
  }, Closed]],
  
  Cell["\<\
The following styles are for linking automatically to the on-line help \
system.\
\>", "Text"],
  
  Cell[CellGroupData[{
  
  Cell[StyleData["MainBookLink"],
    StyleMenuListing->None,
    ButtonStyleMenuListing->Automatic,
    FontColor->RGBColor[0, 0, 1],
    ButtonBoxOptions->{ButtonFunction:>(FrontEndExecute[ {
        FrontEnd`HelpBrowserLookup[ "MainBook", #]}]&),
    Active->True,
    ButtonFrame->"None"}],
  
  Cell[StyleData["MainBookLink", "Presentation"]],
  
  Cell[StyleData["MainBookLink", "Condensed"]],
  
  Cell[StyleData["MainBookLink", "Printout"],
    FontColor->GrayLevel[0],
    FontVariations->{"Underline"->False}]
  }, Closed]],
  
  Cell[CellGroupData[{
  
  Cell[StyleData["AddOnsLink"],
    StyleMenuListing->None,
    ButtonStyleMenuListing->Automatic,
    FontFamily->"Courier",
    FontColor->RGBColor[0, 0, 1],
    ButtonBoxOptions->{ButtonFunction:>(FrontEndExecute[ {
        FrontEnd`HelpBrowserLookup[ "AddOns", #]}]&),
    Active->True,
    ButtonFrame->"None"}],
  
  Cell[StyleData["AddOnsLink", "Presentation"]],
  
  Cell[StyleData["AddOnsLink", "Condensed"]],
  
  Cell[StyleData["AddOnLink", "Printout"],
    FontColor->GrayLevel[0],
    FontVariations->{"Underline"->False}]
  }, Closed]],
  
  Cell[CellGroupData[{
  
  Cell[StyleData["RefGuideLink"],
    StyleMenuListing->None,
    ButtonStyleMenuListing->Automatic,
    FontFamily->"Courier",
    FontColor->RGBColor[0, 0, 1],
    ButtonBoxOptions->{ButtonFunction:>(FrontEndExecute[ {
        FrontEnd`HelpBrowserLookup[ "RefGuideLink", #]}]&),
    Active->True,
    ButtonFrame->"None"}],
  
  Cell[StyleData["RefGuideLink", "Presentation"]],
  
  Cell[StyleData["RefGuideLink", "Condensed"]],
  
  Cell[StyleData["RefGuideLink", "Printout"],
    FontColor->GrayLevel[0],
    FontVariations->{"Underline"->False}]
  }, Closed]],
  
  Cell[CellGroupData[{
  
  Cell[StyleData["GettingStartedLink"],
    StyleMenuListing->None,
    ButtonStyleMenuListing->Automatic,
    FontColor->RGBColor[0, 0, 1],
    ButtonBoxOptions->{ButtonFunction:>(FrontEndExecute[ {
        FrontEnd`HelpBrowserLookup[ "GettingStarted", #]}]&),
    Active->True,
    ButtonFrame->"None"}],
  
  Cell[StyleData["GettingStartedLink", "Presentation"]],
  
  Cell[StyleData["GettingStartedLink", "Condensed"]],
  
  Cell[StyleData["GettingStartedLink", "Printout"],
    FontColor->GrayLevel[0],
    FontVariations->{"Underline"->False}]
  }, Closed]],
  
  Cell[CellGroupData[{
  
  Cell[StyleData["OtherInformationLink"],
    StyleMenuListing->None,
    ButtonStyleMenuListing->Automatic,
    FontColor->RGBColor[0, 0, 1],
    ButtonBoxOptions->{ButtonFunction:>(FrontEndExecute[ {
        FrontEnd`HelpBrowserLookup[ "OtherInformation", #]}]&),
    Active->True,
    ButtonFrame->"None"}],
  
  Cell[StyleData["OtherInformationLink", "Presentation"]],
  
  Cell[StyleData["OtherInformationLink", "Condensed"]],
  
  Cell[StyleData["OtherInformationLink", "Printout"],
    FontColor->GrayLevel[0],
    FontVariations->{"Underline"->False}]
  }, Closed]]
  }, Closed]],
  
  Cell[CellGroupData[{
  
  Cell["Placeholder Styles", "Section"],
  
  Cell["\<\
The cells below define styles useful for making placeholder objects in \
palette templates.\
\>", "Text"],
  
  Cell[CellGroupData[{
  
  Cell[StyleData["Placeholder"],
    Editable->False,
    Selectable->False,
    StyleBoxAutoDelete->True,
    Placeholder->True,
    StyleMenuListing->None],
  
  Cell[StyleData["Placeholder", "Presentation"]],
  
  Cell[StyleData["Placeholder", "Condensed"]],
  
  Cell[StyleData["Placeholder", "Printout"]]
  }, Closed]],
  
  Cell[CellGroupData[{
  
  Cell[StyleData["SelectionPlaceholder"],
    Editable->False,
    Selectable->False,
    StyleBoxAutoDelete->True,
    Placeholder->PrimaryPlaceholder,
    StyleMenuListing->None,
    DrawHighlighted->True],
  
  Cell[StyleData["SelectionPlaceholder", "Presentation"]],
  
  Cell[StyleData["SelectionPlaceholder", "Condensed"]],
  
  Cell[StyleData["SelectionPlaceholder", "Printout"]]
  }, Closed]]
  }, Closed]],
  
  Cell[CellGroupData[{
  
  Cell["FormatType Styles", "Section"],
  
  Cell["\<\
The cells below define styles that are mixed in with the styles of most \
cells.  If a cell's FormatType matches the name of one of the styles defined \
below, then that style is applied between the cell's style and its own \
options. This is particularly true of Input and Output.\
\>", "Text"],
  
  Cell[StyleData["CellExpression"],
    PageWidth->Infinity,
    CellMargins->{{6, Inherited}, {Inherited, Inherited}},
    ShowCellLabel->False,
    ShowSpecialCharacters->False,
    AllowInlineCells->False,
    AutoItalicWords->{},
    StyleMenuListing->None,
    FontFamily->"Courier",
    FontSize->12,
    Background->GrayLevel[1]],
  
  Cell[StyleData["InputForm"],
    AllowInlineCells->False,
    StyleMenuListing->None,
    FontFamily->"Courier"],
  
  Cell[StyleData["OutputForm"],
    PageWidth->Infinity,
    TextAlignment->Left,
    LineSpacing->{0.6, 1},
    StyleMenuListing->None,
    FontFamily->"Courier"],
  
  Cell[StyleData["StandardForm"],
    LineSpacing->{1.25, 0},
    StyleMenuListing->None,
    FontFamily->"Courier"],
  
  Cell[StyleData["TraditionalForm"],
    LineSpacing->{1.25, 0},
    TraditionalFunctionNotation->True,
    DelimiterMatching->None,
    StyleMenuListing->None],
  
  Cell["\<\
The style defined below is mixed in to any cell that is in an inline cell \
within another.\
\>", "Text"],
  
  Cell[StyleData["InlineCell"],
    TextAlignment->Left,
    ScriptLevel->1,
    StyleMenuListing->None],
  
  Cell[StyleData["InlineCellEditing"],
    StyleMenuListing->None,
    Background->RGBColor[1, 0.749996, 0.8]]
  }, Open  ]],
  
  Cell[CellGroupData[{
  
  Cell["Notation Package Styles", "Section",
    GeneratedCell->True,
    CellTags->"NotationPackage"],
  
  Cell["\<\
The cells below define certain styles needed by the Notation package. These \
styles serve to make visible otherwise invisible tagboxes.\
\>", "Text",
    GeneratedCell->True,
    CellTags->"NotationPackage"],
  
  Cell[StyleData["NotationTemplateStyle"],
    GeneratedCell->True,
    StyleMenuListing->None,
    Background->RGBColor[1, 1, 0.850004],
    TagBoxOptions->{SyntaxForm->"symbol"},
    CellTags->"NotationPackage"],
  
  Cell[StyleData["NotationPatternWrapperStyle"],
    GeneratedCell->True,
    StyleMenuListing->None,
    Background->RGBColor[1, 0.900008, 0.979995],
    TagBoxOptions->{SyntaxForm->"symbol"},
    CellTags->"NotationPackage"],
  
  Cell[StyleData["NotationMadeBoxesWrapperStyle"],
    GeneratedCell->True,
    StyleMenuListing->None,
    Background->RGBColor[0.900008, 0.889998, 1],
    TagBoxOptions->{SyntaxForm->"symbol"},
    CellTags->"NotationPackage"]
  }, Closed]]
  }, Open  ]]
  }]
]

(*******************************************************************
Cached data follows.  If you edit this Notebook file directly, not
using Mathematica, you must remove the line containing CacheID at
the top of  the file.  The cache data will then be recreated when
you save this file from within Mathematica.
*******************************************************************)

(*CellTagsOutline
CellTagsIndex->{
  "Alternatives"->{
    Cell[11819, 439, 261, 5, 48, "Text",
      CellTags->"Alternatives"]},
  "Apply"->{
    Cell[14892, 531, 106, 3, 30, "Text",
      CellTags->"Apply"]},
  "Blank"->{
    Cell[25078, 902, 171, 4, 48, "Text",
      CellTags->"Blank"]},
  "Partial evaluation1"->{
    Cell[33411, 1198, 198, 4, 30, "Text",
      CellTags->"Partial evaluation1"]},
  "$DisplayFunction"->{
    Cell[35586, 1271, 147, 4, 30, "Text",
      CellTags->"$DisplayFunction"]},
  "ButtonProgramming"->{
    Cell[41237, 1473, 600, 15, 67, "Text",
      CellTags->"ButtonProgramming"]},
  "Pure_Function_Example"->{
    Cell[44313, 1547, 726, 13, 85, "Text",
      CellTags->"Pure_Function_Example"]},
  "ButtonStyles"->{
    Cell[47874, 1658, 1543, 26, 308, "Text",
      CellTags->"ButtonStyles"]},
  "Cases"->{
    Cell[60871, 2010, 147, 4, 30, "Text",
      CellTags->"Cases"],
    Cell[64131, 2129, 210, 5, 80, "Input",
      CellTags->"Cases"],
    Cell[64943, 2156, 167, 4, 56, "Input",
      CellTags->"Cases"]},
  "Clear"->{
    Cell[66381, 2205, 361, 10, 48, "Text",
      CellTags->"Clear"]},
  "MapIndexedExample"->{
    Cell[74297, 2470, 593, 14, 67, "Text",
      CellTags->{"MapIndexedExample", "CoefficientsToPolynomial"}]},
  "CoefficientsToPolynomial"->{
    Cell[74297, 2470, 593, 14, 67, "Text",
      CellTags->{"MapIndexedExample", "CoefficientsToPolynomial"}]},
  "Complement"->{
    Cell[77861, 2585, 237, 6, 30, "Text",
      CellTags->"Complement"]},
  "Compiled_Evaluation"->{
    Cell[83692, 2782, 1147, 18, 145, "Text",
      CellTags->"Compiled_Evaluation"]},
  "Condition"->{
    Cell[98220, 3242, 185, 7, 30, "Text",
      CellTags->"Condition"]},
  "Count"->{
    Cell[104895, 3507, 106, 3, 30, "Text",
      CellTags->"Count"]},
  "DeleteCases"->{
    Cell[109804, 3720, 118, 3, 30, "Text",
      CellTags->"DeleteCases"]},
  "Default details"->{
    Cell[113754, 3893, 143, 4, 30, "Text",
      CellTags->"Default details"]},
  "Dot"->{
    Cell[120688, 4143, 241, 6, 47, "Text",
      CellTags->"Dot"]},
  "Evaluate"->{
    Cell[127154, 4377, 296, 6, 66, "Text",
      CellTags->"Evaluate"]},
  "ExactNumberQ"->{
    Cell[131500, 4523, 614, 12, 103, "Text",
      CellTags->"ExactNumberQ"]},
  "Info3292238823-5325569"->{
    Cell[133711, 4588, 322, 9, 29, "Print",
      CellTags->"Info3292238823-5325569"]},
  "Info3242392617-9633741"->{
    Cell[135137, 4637, 334, 9, 50, "Print",
      CellTags->"Info3242392617-9633741"]},
  "Flat"->{
    Cell[136080, 4671, 366, 10, 48, "Text",
      CellTags->"Flat"]},
  "Attributes warning"->{
    Cell[138096, 4732, 103, 1, 56, "Subsection",
      CellTags->"Attributes warning"]},
  "Info3242392618-3366990"->{
    Cell[141149, 4847, 63, 1, 27, "Print",
      CellTags->"Info3242392618-3366990"],
    Cell[141215, 4850, 503, 15, 65, "Print",
      CellTags->"Info3242392618-3366990"]},
  "Info3242392618-7584819"->{
    Cell[141846, 4876, 63, 1, 27, "Print",
      CellTags->"Info3242392618-7584819"],
    Cell[141912, 4879, 437, 13, 30, "Print",
      CellTags->"Info3242392618-7584819"]},
  "Info3242392618-6169565"->{
    Cell[142521, 4905, 63, 1, 27, "Print",
      CellTags->"Info3242392618-6169565"]},
  "Flatten"->{
    Cell[145733, 5017, 196, 4, 48, "Text",
      CellTags->"Flatten"]},
  "Fold"->{
    Cell[149495, 5149, 132, 4, 30, "Text",
      CellTags->"Fold"]},
  "Partial evaluation 2"->{
    Cell[152351, 5252, 277, 5, 50, "Text",
      CellTags->"Partial evaluation 2"]},
  "FoldList"->{
    Cell[154777, 5332, 226, 5, 48, "Text",
      CellTags->"FoldList"]},
  "Info3242392636-8498059"->{
    Cell[155077, 5344, 326, 9, 50, "Print",
      CellTags->"Info3242392636-8498059"]},
  "Format"->{
    Cell[156608, 5395, 139, 4, 30, "Text",
      CellTags->"Format"]},
  "FreeQ"->{
    Cell[158762, 5469, 378, 11, 48, "Text",
      CellTags->"FreeQ"]},
  "Function"->{
    Cell[160933, 5568, 101, 3, 33, "Text",
      CellTags->"Function"]},
  "No_Argument_Functions"->{
    Cell[172530, 5997, 1184, 22, 180, "Text",
      CellTags->"No_Argument_Functions"]},
  "Hold"->{
    Cell[175642, 6095, 272, 6, 67, "Text",
      CellTags->{"Hold", "HoldAll"}]},
  "HoldAll"->{
    Cell[175642, 6095, 272, 6, 67, "Text",
      CellTags->{"Hold", "HoldAll"}]},
  "HoldAllComplete"->{
    Cell[180611, 6254, 332, 6, 66, "Text",
      CellTags->"HoldAllComplete"]},
  "HoldPattern"->{
    Cell[183414, 6367, 116, 3, 30, "Text",
      CellTags->"HoldPattern"]},
  "Hyperlinks"->{
    Cell[188368, 6582, 101, 1, 56, "Subsection",
      CellTags->"Hyperlinks"]},
  "Email"->{
    Cell[196627, 6811, 880, 28, 450, "Text",
      CellTags->"Email"]},
  "Inner"->{
    Cell[198181, 6871, 384, 8, 66, "Text",
      CellTags->"Inner"]},
  "Insert"->{
    Cell[202686, 7053, 85, 1, 30, "Text",
      CellTags->"Insert"]},
  "Level"->{
    Cell[204208, 7106, 442, 9, 70, "Text",
      CellTags->"Level"]},
  "Level Specification"->{
    Cell[207200, 7212, 1124, 22, 120, "Text",
      CellTags->"Level Specification"]},
  "Info3242392684-5465879"->{
    Cell[208395, 7241, 422, 10, 50, "Print",
      CellTags->"Info3242392684-5465879"]},
  "ListConvolve"->{
    Cell[218447, 7617, 101, 1, 30, "Text",
      CellTags->"ListConvolve"]},
  "ListCorrelate"->{
    Cell[240270, 8304, 103, 1, 30, "Text",
      CellTags->"ListCorrelate"]},
  "Map"->{
    Cell[262647, 9014, 542, 12, 67, "Text",
      CellTags->"Map"]},
  "MapAt"->{
    Cell[267887, 9182, 143, 4, 30, "Text",
      CellTags->"MapAt"]},
  "MapIndexed"->{
    Cell[268571, 9214, 278, 5, 50, "Text",
      CellTags->"MapIndexed"]},
  "MapThread"->{
    Cell[273918, 9409, 251, 6, 30, "Text",
      CellTags->"MapThread"]},
  "MakeBoxes"->{
    Cell[278165, 9566, 410, 8, 67, "Text",
      CellTags->"MakeBoxes"]},
  "MatchQ"->{
    Cell[284085, 9723, 474, 8, 103, "Text",
      CellTags->"MatchQ"],
    Cell[284584, 9735, 99, 2, 40, "Input",
      CellTags->"MatchQ"]},
  "MemberQ"->{
    Cell[287357, 9844, 138, 4, 30, "Text",
      CellTags->"MemberQ"]},
  "Message"->{
    Cell[290187, 9974, 693, 13, 104, "Text",
      CellTags->"Message"]},
  "NHoldAll"->{
    Cell[336331, 11833, 88, 1, 30, "Text",
      CellTags->"NHoldAll"]},
  "OneIdentity"->{
    Cell[338856, 11932, 466, 8, 67, "Text",
      CellTags->"OneIdentity"]},
  "OneIdentity-Default"->{
    Cell[339406, 11946, 160, 4, 30, "Text",
      CellTags->"OneIdentity-Default"],
    Cell[344410, 12107, 408, 8, 47, "Text",
      CellTags->"OneIdentity-Default"]},
  "Info3242474880-2863980"->{
    Cell[339635, 11957, 279, 8, 27, "Print",
      CellTags->"Info3242474880-2863980"],
    Cell[339917, 11967, 576, 16, 62, "Print",
      CellTags->"Info3242474880-2863980"]},
  "Info3242474882-9613789"->{
    Cell[343247, 12071, 279, 8, 27, "Print",
      CellTags->"Info3242474882-9613789"],
    Cell[343529, 12081, 575, 16, 62, "Print",
      CellTags->"Info3242474882-9613789"]},
  "OneIdentity-Flat"->{
    Cell[346349, 12171, 759, 14, 85, "Text",
      CellTags->"OneIdentity-Flat"]},
  "Info3242474882-1460760"->{
    Cell[348494, 12233, 374, 9, 50, "Print",
      CellTags->"Info3242474882-1460760"],
    Cell[348871, 12244, 300, 8, 27, "Print",
      CellTags->"Info3242474882-1460760"]},
  "Optional"->{
    Cell[359306, 12629, 391, 7, 85, "Text",
      CellTags->"Optional"]},
  "Info3285568764-5243668"->{
    Cell[361568, 12708, 63, 1, 27, "Print",
      CellTags->"Info3285568764-5243668"],
    Cell[361634, 12711, 443, 13, 30, "Print",
      CellTags->"Info3285568764-5243668"]},
  "Info3285569129-8870368"->{
    Cell[363139, 12764, 63, 1, 27, "Print",
      CellTags->"Info3285569129-8870368"],
    Cell[363205, 12767, 447, 13, 30, "Print",
      CellTags->"Info3285569129-8870368"]},
  "Options"->{
    Cell[364739, 12832, 287, 7, 48, "Text",
      CellTags->"Options"]},
  "Info3242474884-6448585"->{
    Cell[365099, 12846, 172, 3, 50, "Print",
      CellTags->"Info3242474884-6448585"]},
  "Ordering"->{
    Cell[374105, 13149, 82, 1, 30, "Text",
      CellTags->"Ordering"]},
  "Info3276836798-2710999"->{
    Cell[374261, 13157, 549, 12, 114, "Print",
      CellTags->"Info3276836798-2710999"]},
  "Orderless"->{
    Cell[379820, 13362, 165, 4, 48, "Text",
      CellTags->"Orderless"]},
  "Outer"->{
    Cell[383118, 13478, 188, 4, 48, "Text",
      CellTags->"Outer"]},
  "Part"->{
    Cell[390075, 13687, 209, 5, 48, "Text",
      CellTags->"Part"]},
  "Info3242474896-7343620"->{
    Cell[396722, 13918, 1316, 22, 348, "Print",
      CellTags->"Info3242474896-7343620"]},
  "Position"->{
    Cell[404044, 14132, 379, 7, 66, "Text",
      CellTags->"Position"]},
  "Pattern"->{
    Cell[413012, 14482, 448, 11, 66, "Text",
      CellTags->"Pattern"]},
  "PatternTest"->{
    Cell[414645, 14548, 374, 9, 66, "Text",
      CellTags->"PatternTest"]},
  "Random"->{
    Cell[417910, 14662, 1054, 25, 179, "Text",
      CellTags->"Random"]},
  "Info3242474897-2101131"->{
    Cell[419720, 14723, 476, 11, 70, "Print",
      CellTags->"Info3242474897-2101131"]},
  "Range"->{
    Cell[421665, 14807, 486, 9, 105, "Text",
      CellTags->"Range"]},
  "Repeated RepeatedNull"->{
    Cell[424768, 14904, 402, 7, 67, "Text",
      CellTags->"Repeated RepeatedNull"]},
  "Replace"->{
    Cell[427277, 14979, 529, 10, 122, "Text",
      CellTags->"Replace"]},
  "ReplaceAll;ReplaceRepeated"->{
    Cell[436437, 15294, 113, 1, 30, "Text",
      CellTags->"ReplaceAll;ReplaceRepeated"]},
  "Rule;RuleDelayed"->{
    Cell[458007, 16024, 279, 5, 48, "Text",
      CellTags->"Rule;RuleDelayed"]},
  "Scan"->{
    Cell[462873, 16170, 325, 6, 50, "Text",
      CellTags->"Scan"]},
  "Info3242474919-8383725"->{
    Cell[463638, 16194, 63, 1, 27, "Print",
      CellTags->"Info3242474919-8383725"],
    Cell[463704, 16197, 445, 13, 30, "Print",
      CellTags->"Info3242474919-8383725"]},
  "Info3242474919-9355181"->{
    Cell[464515, 16227, 63, 1, 27, "Print",
      CellTags->"Info3242474919-9355181"],
    Cell[464581, 16230, 627, 19, 135, "Print",
      CellTags->"Info3242474919-9355181"]},
  "Info3242474920-7316245"->{
    Cell[465784, 16270, 63, 1, 27, "Print",
      CellTags->"Info3242474920-7316245"],
    Cell[465850, 16273, 627, 19, 135, "Print",
      CellTags->"Info3242474920-7316245"]},
  "Info3242474920-3777955"->{
    Cell[466849, 16310, 63, 1, 27, "Print",
      CellTags->"Info3242474920-3777955"],
    Cell[466915, 16313, 591, 17, 105, "Print",
      CellTags->"Info3242474920-3777955"]},
  "Info3242474920-7649147"->{
    Cell[468204, 16354, 63, 1, 27, "Print",
      CellTags->"Info3242474920-7649147"],
    Cell[468270, 16357, 720, 23, 207, "Print",
      CellTags->"Info3242474920-7649147"]},
  "Info3242474920-1486452"->{
    Cell[469638, 16405, 63, 1, 27, "Print",
      CellTags->"Info3242474920-1486452"],
    Cell[469704, 16408, 903, 29, 325, "Print",
      CellTags->"Info3242474920-1486452"]},
  "Sequence"->{
    Cell[470698, 16446, 536, 9, 85, "Text",
      CellTags->"Sequence"]},
  "SequenceHold"->{
    Cell[472568, 16508, 103, 1, 30, "Text",
      CellTags->"SequenceHold"]},
  "Info3242474922-7671367"->{
    Cell[481735, 16812, 68, 1, 27, "Print",
      CellTags->"Info3242474922-7671367"],
    Cell[481806, 16815, 456, 13, 30, "Print",
      CellTags->"Info3242474922-7671367"]},
  "Info3242474922-1117472"->{
    Cell[482346, 16836, 68, 1, 27, "Print",
      CellTags->"Info3242474922-1117472"],
    Cell[482417, 16839, 443, 13, 30, "Print",
      CellTags->"Info3242474922-1117472"]},
  "Info3284968730-3180209"->{
    Cell[489847, 17092, 63, 1, 27, "Print",
      CellTags->"Info3284968730-3180209"],
    Cell[489913, 17095, 423, 13, 30, "Print",
      CellTags->"Info3284968730-3180209"]},
  "Info3284968732-8841380"->{
    Cell[490415, 17116, 63, 1, 27, "Print",
      CellTags->"Info3284968732-8841380"],
    Cell[490481, 17119, 426, 13, 30, "Print",
      CellTags->"Info3284968732-8841380"]},
  "Simplify_FullSimplify"->{
    Cell[491097, 17145, 221, 5, 48, "Text",
      CellTags->"Simplify_FullSimplify"]},
  "Pure Functions"->{
    Cell[497269, 17334, 230, 8, 30, "Text",
      CellTags->"Pure Functions"]},
  "Sort"->{
    Cell[497562, 17349, 515, 9, 85, "Text",
      CellTags->"Sort"]},
  "Split"->{
    Cell[504653, 17582, 132, 4, 30, "Text",
      CellTags->"Split"]},
  "Info3242474961-5860318"->{
    Cell[504856, 17593, 464, 11, 50, "Print",
      CellTags->"Info3242474961-5860318"]},
  "TagBox"->{
    Cell[530779, 18501, 398, 9, 70, "Text",
      CellTags->"TagBox"]},
  "Info3242475074-9991669"->{
    Cell[531249, 18517, 356, 9, 30, "Print",
      CellTags->"Info3242475074-9991669"]},
  "Trig option"->{
    Cell[541859, 18900, 113, 3, 30, "Text",
      CellTags->"Trig option"]},
  "Info3242475074-3476455"->{
    Cell[542042, 18910, 236, 4, 50, "Print",
      CellTags->"Info3242475074-3476455"]},
  "ToString"->{
    Cell[543782, 18967, 399, 7, 67, "Text",
      CellTags->"ToString"]},
  "Tr"->{
    Cell[545760, 19037, 138, 4, 30, "Text",
      CellTags->"Tr"]},
  "Unevaluated"->{
    Cell[555395, 19388, 359, 7, 66, "Text",
      CellTags->"Unevaluated"]},
  "Update"->{
    Cell[557370, 19458, 214, 7, 30, "Text",
      CellTags->"Update"]},
  "Upvalues"->{
    Cell[557651, 19472, 356, 6, 67, "Text",
      CellTags->"Upvalues"]},
  "Verbatim"->{
    Cell[571158, 19893, 82, 1, 30, "Text",
      CellTags->"Verbatim"]},
  "Info3247899362-8348536"->{
    Cell[571314, 19901, 423, 10, 50, "Print",
      CellTags->"Info3247899362-8348536"]},
  "$OutputForms"->{
    Cell[574550, 20022, 90, 1, 30, "Text",
      CellTags->"$OutputForms"]},
  "Info3240648369-5591269"->{
    Cell[574718, 20030, 179, 3, 50, "Print",
      CellTags->"Info3240648369-5591269"]},
  "$Pre;$Post"->{
    Cell[577152, 20122, 1392, 28, 273, "Text",
      CellTags->"$Pre;$Post"]},
  "ReplacePart"->{
    Cell[587311, 20470, 300, 5, 45, "ExampleText",
      CellTags->{"ReplacePart", "Evaluate At"}],
    Cell[587614, 20477, 179, 4, 40, "Input",
      CellTags->"ReplacePart"],
    Cell[587796, 20483, 238, 7, 27, "ExampleText",
      CellTags->"ReplacePart"],
    Cell[588059, 20494, 140, 4, 40, "Input",
      CellTags->"ReplacePart"]},
  "Evaluate At"->{
    Cell[587311, 20470, 300, 5, 45, "ExampleText",
      CellTags->{"ReplacePart", "Evaluate At"}]},
  "Evaluate Pattern"->{
    Cell[588367, 20510, 733, 14, 107, "Text",
      CellTags->"Evaluate Pattern"]},
  "S5.12.1"->{
    Cell[633096, 21442, 149, 4, 56, "Input",
      CellTags->"S5.12.1"]},
  "FoldList_Example1"->{
    Cell[634341, 21475, 205, 7, 30, "Text",
      CellTags->"FoldList_Example1"]},
  "RelativePrimes_Fold"->{
    Cell[652524, 22092, 366, 8, 47, "Text",
      CellTags->"RelativePrimes_Fold"]},
  "Algebra_Transformation"->{
    Cell[655430, 22194, 266, 6, 68, "Text",
      CellTags->"Algebra_Transformation"]},
  "Together"->{
    Cell[656910, 22246, 382, 9, 66, "Text",
      CellTags->"Together"]},
  "Tensor_to_Matrix"->{
    Cell[661983, 22398, 90, 1, 30, "Text",
      CellTags->"Tensor_to_Matrix"]},
  "Distribute - Application"->{
    Cell[673235, 22693, 1267, 20, 235, "Text",
      CellTags->"Distribute - Application"]},
  "DeleteRepititions"->{
    Cell[677045, 22790, 618, 14, 85, "Text",
      CellTags->"DeleteRepititions"]},
  "Evaluation-Process"->{
    Cell[678668, 22845, 1697, 41, 269, "Text",
      CellTags->"Evaluation-Process"]},
  "Unevaluated-Advanced"->{
    Cell[690177, 23201, 360, 8, 101, "Text",
      CellTags->"Unevaluated-Advanced"]},
  "Definition-Storage"->{
    Cell[695929, 23413, 1318, 29, 250, "Text",
      CellTags->"Definition-Storage"]},
  "DownValues"->{
    Cell[697307, 23448, 155, 4, 30, "Text",
      CellTags->"DownValues"]},
  "OwnValues"->{
    Cell[700029, 23559, 166, 4, 48, "Text",
      CellTags->"OwnValues"]},
  "NValues"->{
    Cell[700670, 23588, 153, 4, 30, "Text",
      CellTags->"NValues"]},
  "SubValues"->{
    Cell[701756, 23640, 153, 4, 30, "Text",
      CellTags->"SubValues"]},
  "FormatValues"->{
    Cell[703127, 23697, 361, 8, 66, "Text",
      CellTags->"FormatValues"]},
  "DefaultValues"->{
    Cell[705940, 23793, 410, 9, 66, "Text",
      CellTags->"DefaultValues"]},
  "Messages"->{
    Cell[708240, 23874, 95, 1, 30, "Text",
      CellTags->"Messages"]},
  "Info3248519924-1535622"->{
    Cell[709260, 23910, 89, 2, 29, "Print",
      CellTags->"Info3248519924-1535622"]},
  "Lists_Tables"->{
    Cell[716836, 24180, 281, 6, 66, "Text",
      CellTags->"Lists_Tables"]},
  "Pattern-Matching"->{
    Cell[725593, 24503, 1496, 58, 66, "Text",
      CellTags->"Pattern-Matching"]},
  "s_Symbol"->{
    Cell[734293, 24816, 944, 20, 178, "Text",
      CellTags->"s_Symbol"]},
  "Controlling Memory Usage"->{
    Cell[737681, 24929, 92, 1, 56, "Subsection",
      CellTags->"Controlling Memory Usage"]},
  "Tech Support"->{
    Cell[739840, 25008, 1067, 20, 147, "Text",
      CellTags->"Tech Support"]},
  "Speedy_Programming"->{
    Cell[749471, 25344, 153, 4, 31, "Text",
      CellTags->"Speedy_Programming"]},
  "Linked-List"->{
    Cell[755576, 25520, 372, 7, 66, "Text",
      CellTags->"Linked-List"]},
  "Fast Programming"->{
    Cell[776382, 26148, 662, 19, 67, "Text",
      CellTags->"Fast Programming"]},
  "Slow_Functions"->{
    Cell[778080, 26202, 512, 13, 198, "Text",
      CellTags->"Slow_Functions"]}
  }
*)

(*CellTagsIndex
CellTagsIndex->{
  {"Alternatives", 832267, 27719},
  {"Apply", 832355, 27722},
  {"Blank", 832436, 27725},
  {"Partial evaluation1", 832531, 27728},
  {"$DisplayFunction", 832638, 27731},
  {"ButtonProgramming", 832743, 27734},
  {"Pure_Function_Example", 832854, 27737},
  {"ButtonStyles", 832960, 27740},
  {"Cases", 833052, 27743},
  {"Clear", 833272, 27750},
  {"MapIndexedExample", 833367, 27753},
  {"CoefficientsToPolynomial", 833511, 27756},
  {"Complement", 833641, 27759},
  {"Compiled_Evaluation", 833742, 27762},
  {"Condition", 833845, 27765},
  {"Count", 833931, 27768},
  {"DeleteCases", 834020, 27771},
  {"Default details", 834119, 27774},
  {"Dot", 834210, 27777},
  {"Evaluate", 834294, 27780},
  {"ExactNumberQ", 834387, 27783},
  {"Info3292238823-5325569", 834496, 27786},
  {"Info3242392617-9633741", 834614, 27789},
  {"Flat", 834714, 27792},
  {"Attributes warning", 834810, 27795},
  {"Info3242392618-3366990", 834929, 27798},
  {"Info3242392618-7584819", 835134, 27803},
  {"Info3242392618-6169565", 835339, 27808},
  {"Flatten", 835441, 27811},
  {"Fold", 835525, 27814},
  {"Partial evaluation 2", 835622, 27817},
  {"FoldList", 835723, 27820},
  {"Info3242392636-8498059", 835826, 27823},
  {"Format", 835928, 27826},
  {"FreeQ", 836012, 27829},
  {"Function", 836099, 27832},
  {"No_Argument_Functions", 836201, 27835},
  {"Hold", 836302, 27838},
  {"HoldAll", 836399, 27841},
  {"HoldAllComplete", 836504, 27844},
  {"HoldPattern", 836603, 27847},
  {"Hyperlinks", 836697, 27850},
  {"Email", 836791, 27853},
  {"Inner", 836876, 27856},
  {"Insert", 836960, 27859},
  {"Level", 837043, 27862},
  {"Level Specification", 837140, 27865},
  {"Info3242392684-5465879", 837257, 27868},
  {"ListConvolve", 837366, 27871},
  {"ListCorrelate", 837464, 27874},
  {"Map", 837553, 27877},
  {"MapAt", 837635, 27880},
  {"MapIndexed", 837723, 27883},
  {"MapThread", 837815, 27886},
  {"MakeBoxes", 837906, 27889},
  {"MatchQ", 837994, 27892},
  {"MemberQ", 838151, 27897},
  {"Message", 838238, 27900},
  {"NHoldAll", 838328, 27903},
  {"OneIdentity", 838420, 27906},
  {"OneIdentity-Default", 838524, 27909},
  {"Info3242474880-2863980", 838723, 27914},
  {"Info3242474882-9613789", 838931, 27919},
  {"OneIdentity-Flat", 839133, 27924},
  {"Info3242474882-1460760", 839246, 27927},
  {"Optional", 839439, 27932},
  {"Info3285568764-5243668", 839543, 27935},
  {"Info3285569129-8870368", 839750, 27940},
  {"Options", 839942, 27945},
  {"Info3242474884-6448585", 840045, 27948},
  {"Ordering", 840150, 27951},
  {"Info3276836798-2710999", 840253, 27954},
  {"Orderless", 840361, 27957},
  {"Outer", 840449, 27960},
  {"Part", 840532, 27963},
  {"Info3242474896-7343620", 840632, 27966},
  {"Position", 840740, 27969},
  {"Pattern", 840829, 27972},
  {"PatternTest", 840922, 27975},
  {"Random", 841013, 27978},
  {"Info3242474897-2101131", 841118, 27981},
  {"Range", 841221, 27984},
  {"Repeated RepeatedNull", 841322, 27987},
  {"Replace", 841424, 27990},
  {"ReplaceAll;ReplaceRepeated", 841533, 27993},
  {"Rule;RuleDelayed", 841649, 27996},
  {"Scan", 841743, 27999},
  {"Info3242474919-8383725", 841843, 28002},
  {"Info3242474919-9355181", 842050, 28007},
  {"Info3242474920-7316245", 842258, 28012},
  {"Info3242474920-3777955", 842466, 28017},
  {"Info3242474920-7649147", 842674, 28022},
  {"Info3242474920-1486452", 842882, 28027},
  {"Sequence", 843076, 28032},
  {"SequenceHold", 843170, 28035},
  {"Info3242474922-7671367", 843278, 28038},
  {"Info3242474922-1117472", 843485, 28043},
  {"Info3284968730-3180209", 843692, 28048},
  {"Info3284968732-8841380", 843899, 28053},
  {"Simplify_FullSimplify", 844105, 28058},
  {"Pure Functions", 844214, 28061},
  {"Sort", 844306, 28064},
  {"Split", 844389, 28067},
  {"Info3242474961-5860318", 844490, 28070},
  {"TagBox", 844594, 28073},
  {"Info3242475074-9991669", 844696, 28076},
  {"Trig option", 844804, 28079},
  {"Info3242475074-3476455", 844911, 28082},
  {"ToString", 845016, 28085},
  {"Tr", 845100, 28088},
  {"Unevaluated", 845187, 28091},
  {"Update", 845278, 28094},
  {"Upvalues", 845366, 28097},
  {"Verbatim", 845456, 28100},
  {"Info3247899362-8348536", 845559, 28103},
  {"$OutputForms", 845669, 28106},
  {"Info3240648369-5591269", 845776, 28109},
  {"$Pre;$Post", 845883, 28112},
  {"ReplacePart", 845981, 28115},
  {"Evaluate At", 846338, 28124},
  {"Evaluate Pattern", 846463, 28127},
  {"S5.12.1", 846562, 28130},
  {"FoldList_Example1", 846661, 28133},
  {"RelativePrimes_Fold", 846771, 28136},
  {"Algebra_Transformation", 846886, 28139},
  {"Together", 846990, 28142},
  {"Tensor_to_Matrix", 847088, 28145},
  {"Distribute - Application", 847201, 28148},
  {"DeleteRepititions", 847319, 28151},
  {"Evaluation-Process", 847429, 28154},
  {"Unevaluated-Advanced", 847544, 28157},
  {"Definition-Storage", 847657, 28160},
  {"DownValues", 847762, 28163},
  {"OwnValues", 847855, 28166},
  {"NValues", 847945, 28169},
  {"SubValues", 848035, 28172},
  {"FormatValues", 848130, 28175},
  {"DefaultValues", 848229, 28178},
  {"Messages", 848324, 28181},
  {"Info3248519924-1535622", 848427, 28184},
  {"Lists_Tables", 848535, 28187},
  {"Pattern-Matching", 848637, 28190},
  {"s_Symbol", 848737, 28193},
  {"Controlling Memory Usage", 848845, 28196},
  {"Tech Support", 848960, 28199},
  {"Speedy_Programming", 849067, 28202},
  {"Linked-List", 849170, 28205},
  {"Fast Programming", 849271, 28208},
  {"Slow_Functions", 849376, 28211}
  }
*)

(*NotebookFileOutline
Notebook[{
Cell[1705, 50, 316, 10, 121, "Title"],

Cell[CellGroupData[{
Cell[2046, 64, 86, 1, 84, "MiscSection"],
Cell[2135, 67, 350, 6, 66, "Text"],
Cell[2488, 75, 1291, 31, 250, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[3816, 111, 63, 1, 44, "MiscSection"],

Cell[CellGroupData[{
Cell[3904, 116, 80, 1, 57, "Subsection"],
Cell[3987, 119, 1587, 60, 293, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[5611, 184, 81, 1, 46, "Subsection"],
Cell[5695, 187, 3342, 136, 649, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[9074, 328, 48, 0, 46, "Subsection"],
Cell[9125, 330, 2580, 100, 511, "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[11754, 436, 62, 1, 54, "Section"],
Cell[11819, 439, 261, 5, 48, "Text",
  CellTags->"Alternatives"],

Cell[CellGroupData[{
Cell[12105, 448, 167, 3, 62, "Input"],
Cell[12275, 453, 142, 3, 50, "Output"]
}, Open  ]],
Cell[12432, 459, 112, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[12569, 466, 173, 3, 82, "Input"],
Cell[12745, 471, 58, 1, 38, "Output"]
}, Open  ]],
Cell[12818, 475, 465, 10, 85, "Text"],

Cell[CellGroupData[{
Cell[13308, 489, 199, 3, 82, "Input"],
Cell[13510, 494, 70, 1, 38, "Output"]
}, Open  ]],
Cell[13595, 498, 1071, 22, 215, "Text"],
Cell[14669, 522, 159, 2, 61, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[14865, 529, 24, 0, 52, "Section"],
Cell[14892, 531, 106, 3, 30, "Text",
  CellTags->"Apply"],

Cell[CellGroupData[{
Cell[15023, 538, 102, 2, 40, "Input"],
Cell[15128, 542, 161, 2, 35, "Output"]
}, Open  ]],
Cell[15304, 547, 63, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[15392, 551, 109, 2, 60, "Input"],
Cell[15504, 555, 162, 2, 35, "Output"]
}, Open  ]],
Cell[15681, 560, 195, 6, 30, "Text"],

Cell[CellGroupData[{
Cell[15901, 570, 42, 1, 40, "Input"],
Cell[15946, 573, 165, 3, 35, "Output"]
}, Open  ]],
Cell[16126, 579, 169, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[16320, 586, 106, 2, 40, "Input"],
Cell[16429, 590, 46, 1, 35, "Output"]
}, Open  ]],
Cell[16490, 594, 474, 9, 90, "Text"],

Cell[CellGroupData[{
Cell[16989, 607, 49, 1, 40, "Input"],
Cell[17041, 610, 171, 3, 35, "Output"]
}, Open  ]],
Cell[17227, 616, 96, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[17348, 622, 54, 1, 40, "Input"],
Cell[17405, 625, 172, 3, 57, "Output"]
}, Open  ]],
Cell[17592, 631, 162, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[17779, 638, 50, 1, 40, "Input"],
Cell[17832, 641, 40, 1, 35, "Output"]
}, Open  ]],
Cell[17887, 645, 170, 3, 30, "Text"],
Cell[18060, 650, 143, 3, 40, "Input"],
Cell[18206, 655, 48, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[18279, 659, 42, 1, 40, "Input"],
Cell[18324, 662, 123, 2, 35, "Output"]
}, Open  ]],
Cell[18462, 667, 49, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[18536, 671, 43, 1, 40, "Input"],
Cell[18582, 674, 127, 2, 35, "Output"]
}, Open  ]],
Cell[18724, 679, 65, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[18814, 683, 52, 1, 40, "Input"],
Cell[18869, 686, 117, 2, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[19023, 693, 34, 0, 55, "Subsection"],
Cell[19060, 695, 447, 7, 67, "Text"],

Cell[CellGroupData[{
Cell[19532, 706, 184, 3, 80, "Input"],
Cell[19719, 711, 54, 1, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[19810, 717, 46, 1, 40, "Input"],
Cell[19859, 720, 38, 1, 35, "Output"]
}, Open  ]],
Cell[19912, 724, 287, 5, 50, "Text"],

Cell[CellGroupData[{
Cell[20224, 733, 70, 1, 40, "Input"],
Cell[20297, 736, 54, 1, 35, "Output"]
}, Open  ]]
}, Closed]],
Cell[20378, 741, 202, 6, 45, "Subsection"]
}, Closed]],

Cell[CellGroupData[{
Cell[20617, 752, 24, 0, 52, "Section"],
Cell[20644, 754, 441, 10, 70, "Text"],

Cell[CellGroupData[{
Cell[21110, 768, 58, 1, 40, "Input"],
Cell[21171, 771, 172, 3, 50, "Output"]
}, Open  ]],
Cell[21358, 777, 85, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[21468, 783, 61, 1, 40, "Input"],
Cell[21532, 786, 167, 2, 50, "Output"]
}, Open  ]],
Cell[21714, 791, 316, 5, 50, "Text"],

Cell[CellGroupData[{
Cell[22055, 800, 62, 1, 40, "Input"],
Cell[22120, 803, 44, 1, 50, "Output"]
}, Open  ]],
Cell[22179, 807, 167, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[22371, 814, 105, 2, 60, "Input"],
Cell[22479, 818, 177, 3, 35, "Output"]
}, Open  ]],
Cell[22671, 824, 300, 7, 30, "Text"],

Cell[CellGroupData[{
Cell[22996, 835, 63, 1, 40, "Input"],
Cell[23062, 838, 444, 10, 105, "Output"]
}, Open  ]],
Cell[23521, 851, 149, 3, 50, "Text"],

Cell[CellGroupData[{
Cell[23695, 858, 67, 1, 40, "Input"],
Cell[23765, 861, 474, 10, 105, "Output"]
}, Open  ]],
Cell[24254, 874, 140, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[24419, 881, 72, 1, 40, "Input"],
Cell[24494, 884, 459, 10, 105, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[25002, 900, 73, 0, 52, "Section"],
Cell[25078, 902, 171, 4, 48, "Text",
  CellTags->"Blank"],

Cell[CellGroupData[{
Cell[25274, 910, 43, 0, 56, "Subsection"],
Cell[25320, 912, 155, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[25500, 919, 169, 3, 82, "Input"],
Cell[25672, 924, 63, 1, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[25784, 931, 52, 0, 44, "Subsection"],
Cell[25839, 933, 242, 4, 66, "Text"],

Cell[CellGroupData[{
Cell[26106, 941, 158, 3, 82, "Input"],
Cell[26267, 946, 67, 1, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[26383, 953, 58, 0, 44, "Subsection"],
Cell[26444, 955, 249, 4, 66, "Text"],

Cell[CellGroupData[{
Cell[26718, 963, 159, 3, 82, "Input"],
Cell[26880, 968, 70, 1, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[26999, 975, 61, 0, 44, "Subsection"],
Cell[27063, 977, 364, 7, 67, "Text"],

Cell[CellGroupData[{
Cell[27452, 988, 151, 3, 82, "Input"],
Cell[27606, 993, 57, 1, 35, "Output"]
}, Open  ]],
Cell[27678, 997, 90, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[27793, 1003, 152, 3, 82, "Input"],
Cell[27948, 1008, 51, 1, 35, "Output"]
}, Open  ]],
Cell[28014, 1012, 118, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[28157, 1019, 153, 3, 82, "Input"],
Cell[28313, 1024, 52, 1, 35, "Output"]
}, Open  ]],
Cell[28380, 1028, 275, 5, 47, "Text"],

Cell[CellGroupData[{
Cell[28680, 1037, 184, 3, 82, "Input"],
Cell[28867, 1042, 64, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[28980, 1049, 63, 0, 44, "Subsection"],
Cell[29046, 1051, 108, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[29179, 1058, 192, 3, 80, "Input"],
Cell[29374, 1063, 72, 1, 35, "Output"]
}, Open  ]],
Cell[29461, 1067, 183, 4, 30, "Text"],

Cell[CellGroupData[{
Cell[29669, 1075, 184, 3, 80, "Input"],
Cell[29856, 1080, 73, 1, 35, "Output"]
}, Open  ]],
Cell[29944, 1084, 196, 4, 30, "Text"],

Cell[CellGroupData[{
Cell[30165, 1092, 185, 3, 80, "Input"],
Cell[30353, 1097, 71, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[30473, 1104, 64, 0, 44, "Subsection"],
Cell[30540, 1106, 257, 4, 50, "Text"],

Cell[CellGroupData[{
Cell[30822, 1114, 182, 3, 80, "Input"],
Cell[31007, 1119, 87, 1, 35, "Output"]
}, Open  ]],
Cell[31109, 1123, 133, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[31267, 1130, 183, 3, 80, "Input"],
Cell[31453, 1135, 63, 1, 35, "Output"]
}, Open  ]],
Cell[31531, 1139, 172, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[31728, 1146, 184, 3, 80, "Input"],
Cell[31915, 1151, 64, 1, 35, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[32040, 1159, 24, 0, 52, "Section"],
Cell[32067, 1161, 507, 9, 105, "Text"],
Cell[32577, 1172, 54, 1, 40, "Input"],

Cell[CellGroupData[{
Cell[32656, 1177, 73, 0, 55, "Subsection"],
Cell[32732, 1179, 528, 8, 67, "Text"],

Cell[CellGroupData[{
Cell[33285, 1191, 62, 1, 40, "Input"],
Cell[33350, 1194, 46, 1, 35, "Output"]
}, Open  ]],
Cell[33411, 1198, 198, 4, 30, "Text",
  CellTags->"Partial evaluation1"],
Cell[33612, 1204, 192, 4, 70, "Input"],
Cell[33807, 1210, 108, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[33940, 1217, 50, 1, 40, "Input"],
Cell[33993, 1220, 119, 2, 40, "Output"]
}, Open  ]],
Cell[34127, 1225, 1092, 28, 92, "Text"],

Cell[CellGroupData[{
Cell[35244, 1257, 77, 1, 40, "Input"],
Cell[35324, 1260, 140, 3, 40, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[35513, 1269, 70, 0, 45, "Subsection"],
Cell[35586, 1271, 147, 4, 30, "Text",
  CellTags->"$DisplayFunction"],

Cell[CellGroupData[{
Cell[35758, 1279, 63, 1, 40, "Input"],
Cell[35824, 1282, 83, 1, 35, "Output"]
}, Open  ]],
Cell[35922, 1286, 371, 6, 50, "Text"],
Cell[36296, 1294, 444, 8, 205, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[36777, 1307, 91, 2, 45, "Subsection"],
Cell[36871, 1311, 241, 4, 50, "Text"],

Cell[CellGroupData[{
Cell[37137, 1319, 191, 4, 145, "Input"],
Cell[37331, 1325, 63, 1, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[37431, 1331, 67, 1, 40, "Input"],
Cell[37501, 1334, 45, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[37595, 1341, 69, 0, 45, "Subsection"],
Cell[37667, 1343, 374, 6, 50, "Text"],
Cell[38044, 1351, 86, 2, 60, "Input"],
Cell[38133, 1355, 43, 1, 40, "Input"],

Cell[CellGroupData[{
Cell[38201, 1360, 43, 1, 40, "Input"],
Cell[38247, 1363, 75, 1, 35, "Output"]
}, Open  ]],
Cell[38337, 1367, 294, 5, 50, "Text"],

Cell[CellGroupData[{
Cell[38656, 1376, 79, 1, 40, "Input"],
Cell[38738, 1379, 100, 2, 35, "Output"]
}, Open  ]],
Cell[38853, 1384, 117, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[38995, 1391, 48, 1, 40, "Input"],
Cell[39046, 1394, 55, 1, 35, "Output"]
}, Open  ]],
Cell[39116, 1398, 154, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[39295, 1405, 91, 2, 60, "Input"],
Cell[39389, 1409, 76, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[39514, 1416, 48, 0, 45, "Subsection"],
Cell[39565, 1418, 1167, 31, 130, "Text"],
Cell[40735, 1451, 268, 5, 122, "Input"],

Cell[CellGroupData[{
Cell[41028, 1460, 53, 1, 40, "Input"],
Cell[41084, 1463, 52, 1, 35, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[41197, 1471, 37, 0, 52, "Section"],
Cell[41237, 1473, 600, 15, 67, "Text",
  CellTags->"ButtonProgramming"],
Cell[41840, 1490, 378, 8, 147, "Input"],
Cell[42221, 1500, 95, 2, 30, "Text"],
Cell[42319, 1504, 899, 16, 212, "Input"],

Cell[CellGroupData[{
Cell[43243, 1524, 99, 2, 55, "Subsection"],
Cell[43345, 1528, 809, 12, 122, "Text"],
Cell[44157, 1542, 153, 3, 60, "Input"],
Cell[44313, 1547, 726, 13, 85, "Text",
  CellTags->"Pure_Function_Example"],
Cell[45042, 1562, 634, 12, 235, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[45713, 1579, 44, 0, 45, "Subsection"],
Cell[45760, 1581, 113, 3, 30, "Text"],
Cell[45876, 1586, 257, 6, 50, "Text"],
Cell[46136, 1594, 304, 7, 50, "Text"],
Cell[46443, 1603, 299, 10, 30, "Text"],
Cell[46745, 1615, 335, 10, 50, "Text"],
Cell[47083, 1627, 338, 10, 50, "Text"],
Cell[47424, 1639, 368, 11, 50, "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[47841, 1656, 30, 0, 52, "Section"],
Cell[47874, 1658, 1543, 26, 308, "Text",
  CellTags->"ButtonStyles"],
Cell[49420, 1686, 66, 1, 40, "Input"],
Cell[49489, 1689, 477, 8, 122, "Text"],
Cell[49969, 1699, 703, 14, 210, "Input"],
Cell[50675, 1715, 142, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[50842, 1722, 44, 0, 56, "Subsection"],
Cell[50889, 1724, 472, 9, 85, "Text"],
Cell[51364, 1735, 1404, 23, 401, "Input"],
Cell[52771, 1760, 46, 1, 40, "Input"],

Cell[CellGroupData[{
Cell[52842, 1765, 43, 0, 52, "Subsubsection"],
Cell[52888, 1767, 303, 5, 105, "Text"],

Cell[CellGroupData[{
Cell[53216, 1776, 41, 1, 40, "Input"],
Cell[53260, 1779, 42, 1, 40, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[53351, 1786, 46, 0, 45, "Subsubsection"],
Cell[53400, 1788, 327, 5, 66, "Text"],

Cell[CellGroupData[{
Cell[53752, 1797, 41, 1, 43, "Input"],
Cell[53796, 1800, 42, 1, 40, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[53887, 1807, 50, 0, 45, "Subsubsection"],
Cell[53940, 1809, 383, 6, 85, "Text"],

Cell[CellGroupData[{
Cell[54348, 1819, 41, 1, 50, "Input"],
Cell[54392, 1822, 42, 1, 70, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[54483, 1829, 50, 0, 45, "Subsubsection"],
Cell[54536, 1831, 419, 7, 85, "Text"],

Cell[CellGroupData[{
Cell[54980, 1842, 41, 1, 50, "Input"],
Cell[55024, 1845, 42, 1, 70, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[55115, 1852, 54, 0, 45, "Subsubsection"],
Cell[55172, 1854, 439, 7, 85, "Text"],

Cell[CellGroupData[{
Cell[55636, 1865, 41, 1, 50, "Input"],
Cell[55680, 1868, 42, 1, 70, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[55783, 1876, 47, 0, 44, "Subsection"],
Cell[55833, 1878, 623, 9, 85, "Text"],
Cell[56459, 1889, 455, 13, 75, "Text"],
Cell[56917, 1904, 192, 4, 30, "Text"],
Cell[57112, 1910, 403, 9, 40, 32, 0, "StyleData", "EvaluateCell2", "All",
  StyleMenuListing->None,
  ButtonStyleMenuListing->Automatic],
Cell[57518, 1921, 295, 5, 47, "Text"],
Cell[57816, 1928, 712, 16, 90, "DisplayFormula"],
Cell[58531, 1946, 117, 3, 30, "Text"],
Cell[58651, 1951, 714, 16, 90, "DisplayFormula"],
Cell[59368, 1969, 1125, 25, 180, "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[60542, 2000, 24, 0, 52, "Section"],
Cell[60569, 2002, 63, 0, 30, "Text"],
Cell[60635, 2004, 233, 4, 103, "Input"],
Cell[60871, 2010, 147, 4, 30, "Text",
  CellTags->"Cases"],

Cell[CellGroupData[{
Cell[61043, 2018, 67, 1, 40, "Input"],
Cell[61113, 2021, 81, 1, 38, "Output"]
}, Open  ]],
Cell[61209, 2025, 183, 6, 32, "Text"],

Cell[CellGroupData[{
Cell[61417, 2035, 119, 3, 46, "Input"],
Cell[61539, 2040, 107, 2, 41, "Output"]
}, Open  ]],
Cell[61661, 2045, 175, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[61861, 2052, 154, 4, 68, "Input"],
Cell[62018, 2058, 225, 4, 120, "Output"]
}, Open  ]],
Cell[62258, 2065, 165, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[62448, 2072, 126, 3, 46, "Input"],
Cell[62577, 2077, 107, 2, 41, "Output"]
}, Open  ]],
Cell[62699, 2082, 55, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[62779, 2086, 34, 1, 40, "Input"],
Cell[62816, 2089, 42, 1, 47, "Output"]
}, Open  ]],
Cell[62873, 2093, 589, 10, 105, "Text"],

Cell[CellGroupData[{
Cell[63487, 2107, 128, 3, 46, "Input"],
Cell[63618, 2112, 51, 1, 41, "Output"]
}, Open  ]],
Cell[63684, 2116, 422, 9, 66, "Text"],

Cell[CellGroupData[{
Cell[64131, 2129, 210, 5, 80, "Input",
  CellTags->"Cases"],
Cell[64344, 2136, 146, 2, 54, "Output"]
}, Open  ]],
Cell[64505, 2141, 413, 11, 66, "Text"],

Cell[CellGroupData[{
Cell[64943, 2156, 167, 4, 56, "Input",
  CellTags->"Cases"],
Cell[65113, 2162, 185, 3, 54, "Output"]
}, Open  ]],
Cell[65313, 2168, 277, 7, 48, "Text"],

Cell[CellGroupData[{
Cell[65615, 2179, 34, 0, 56, "Subsection"],
Cell[65652, 2181, 316, 5, 66, "Text"],

Cell[CellGroupData[{
Cell[65993, 2190, 200, 3, 82, "Input"],
Cell[66196, 2195, 79, 1, 38, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[66336, 2203, 42, 0, 52, "Section"],
Cell[66381, 2205, 361, 10, 48, "Text",
  CellTags->"Clear"],
Cell[66745, 2217, 55, 0, 30, "Text"],
Cell[66803, 2219, 47, 1, 40, "Input"],
Cell[66853, 2222, 119, 3, 30, "Text"],
Cell[66975, 2227, 74, 1, 40, "Input"],
Cell[67052, 2230, 71, 0, 30, "Text"],
Cell[67126, 2232, 54, 1, 40, "Input"],
Cell[67183, 2235, 110, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[67318, 2242, 30, 0, 56, "Subsection"],
Cell[67351, 2244, 1314, 36, 291, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[68702, 2285, 33, 0, 44, "Subsection"],
Cell[68738, 2287, 1283, 40, 198, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[70058, 2332, 31, 0, 44, "Subsection"],
Cell[70092, 2334, 840, 18, 198, "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[70981, 2358, 47, 0, 52, "Section"],
Cell[71031, 2360, 343, 9, 48, "Text"],

Cell[CellGroupData[{
Cell[71399, 2373, 185, 3, 83, "Input"],
Cell[71587, 2378, 48, 1, 38, "Output"]
}, Open  ]],
Cell[71650, 2382, 413, 7, 68, "Text"],

Cell[CellGroupData[{
Cell[72088, 2393, 117, 2, 61, "Input"],
Cell[72208, 2397, 48, 1, 38, "Output"]
}, Open  ]],
Cell[72271, 2401, 141, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[72437, 2408, 56, 1, 40, "Input"],
Cell[72496, 2411, 82, 1, 38, "Output"]
}, Open  ]],
Cell[72593, 2415, 99, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[72717, 2421, 56, 1, 40, "Input"],
Cell[72776, 2424, 82, 1, 38, "Output"]
}, Open  ]],
Cell[72873, 2428, 345, 6, 67, "Text"],

Cell[CellGroupData[{
Cell[73243, 2438, 47, 1, 40, "Input"],
Cell[73293, 2441, 295, 4, 81, "Output"]
}, Open  ]],
Cell[73603, 2448, 691, 20, 48, "Text"],
Cell[74297, 2470, 593, 14, 67, "Text",
  CellTags->{"MapIndexedExample", "CoefficientsToPolynomial"}],
Cell[74893, 2486, 877, 25, 61, "Input"],
Cell[75773, 2513, 127, 3, 30, "Text"],
Cell[75903, 2518, 375, 7, 83, "Input"],
Cell[76281, 2527, 183, 4, 48, "Text"],
Cell[76467, 2533, 271, 5, 61, "Input"],
Cell[76741, 2540, 90, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[76856, 2546, 199, 4, 61, "Input"],
Cell[77058, 2552, 79, 1, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[77174, 2558, 209, 5, 62, "Input"],
Cell[77386, 2565, 92, 1, 38, "Output"]
}, Open  ]],
Cell[77493, 2569, 299, 9, 30, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[77829, 2583, 29, 0, 52, "Section"],
Cell[77861, 2585, 237, 6, 30, "Text",
  CellTags->"Complement"],

Cell[CellGroupData[{
Cell[78123, 2595, 236, 5, 100, "Input"],
Cell[78362, 2602, 43, 1, 35, "Output"]
}, Open  ]],
Cell[78420, 2606, 249, 5, 50, "Text"],

Cell[CellGroupData[{
Cell[78694, 2615, 101, 2, 40, "Input"],
Cell[78798, 2619, 46, 1, 35, "Output"]
}, Open  ]],
Cell[78859, 2623, 119, 3, 30, "Text"],
Cell[78981, 2628, 449, 7, 67, "Text"],

Cell[CellGroupData[{
Cell[79455, 2639, 222, 3, 80, "Input"],
Cell[79680, 2644, 52, 1, 35, "Output"]
}, Open  ]],
Cell[79747, 2648, 296, 5, 50, "Text"],

Cell[CellGroupData[{
Cell[80068, 2657, 107, 2, 40, "Input"],
Cell[80178, 2661, 47, 1, 35, "Output"]
}, Open  ]],
Cell[80240, 2665, 161, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[80426, 2672, 289, 6, 122, "Input"],
Cell[80718, 2680, 44, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[80811, 2687, 26, 0, 52, "Section"],
Cell[80840, 2689, 364, 9, 50, "Text"],

Cell[CellGroupData[{
Cell[81229, 2702, 133, 3, 55, "Subsection"],
Cell[81365, 2707, 301, 5, 50, "Text"],
Cell[81669, 2714, 144, 3, 65, "Input"],

Cell[CellGroupData[{
Cell[81838, 2721, 69, 1, 40, "Input"],
Cell[81910, 2724, 53, 1, 35, "Output"]
}, Open  ]],
Cell[81978, 2728, 358, 8, 50, "Text"],
Cell[82339, 2738, 146, 3, 80, "Input"],
Cell[82488, 2743, 57, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[82570, 2747, 514, 14, 175, "Input"],
Cell[83087, 2763, 484, 11, 70, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[83620, 2780, 69, 0, 45, "Subsection"],
Cell[83692, 2782, 1147, 18, 145, "Text",
  CellTags->"Compiled_Evaluation"],

Cell[CellGroupData[{
Cell[84864, 2804, 130, 3, 50, "Subsubsection"],
Cell[84997, 2809, 279, 5, 50, "Text"],
Cell[85279, 2816, 112, 2, 40, "Input"],
Cell[85394, 2820, 199, 5, 30, "Text"],
Cell[85596, 2827, 119, 3, 40, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[85752, 2835, 174, 4, 45, "Subsubsection"],
Cell[85929, 2841, 556, 8, 67, "Text"],

Cell[CellGroupData[{
Cell[86510, 2853, 143, 3, 60, "Input"],
Cell[86656, 2858, 202, 3, 57, "Output"]
}, Open  ]],
Cell[86873, 2864, 244, 4, 50, "Text"],

Cell[CellGroupData[{
Cell[87142, 2872, 165, 4, 60, "Input"],
Cell[87310, 2878, 363, 5, 80, "Output"]
}, Open  ]],
Cell[87688, 2886, 391, 8, 50, "Text"],
Cell[88082, 2896, 102, 2, 32, "Text"],
Cell[88187, 2900, 564, 15, 290, "Text"],
Cell[88754, 2917, 111, 2, 32, "Text"],
Cell[88868, 2921, 117, 4, 70, "Text"],
Cell[88988, 2927, 98, 2, 32, "Text"],
Cell[89089, 2931, 237, 6, 110, "Text"],
Cell[89329, 2939, 121, 2, 32, "Text"],
Cell[89453, 2943, 352, 8, 150, "Text"],
Cell[89808, 2953, 96, 2, 32, "Text"],
Cell[89907, 2957, 200, 5, 90, "Text"],
Cell[90110, 2964, 108, 2, 32, "Text"],
Cell[90221, 2968, 255, 7, 130, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[90513, 2980, 144, 2, 45, "Subsubsection"],
Cell[90660, 2984, 238, 4, 50, "Text"],
Cell[90901, 2990, 118, 2, 60, "Input"],

Cell[CellGroupData[{
Cell[91044, 2996, 40, 1, 40, "Input"],
Cell[91087, 2999, 38, 1, 35, "Output"]
}, Open  ]],
Cell[91140, 3003, 209, 4, 50, "Text"],

Cell[CellGroupData[{
Cell[91374, 3011, 115, 2, 60, "Input"],
Cell[91492, 3015, 38, 1, 35, "Output"]
}, Open  ]],
Cell[91545, 3019, 277, 5, 50, "Text"],
Cell[91825, 3026, 83, 1, 40, "Input"],

Cell[CellGroupData[{
Cell[91933, 3031, 40, 1, 40, "Input"],
Cell[91976, 3034, 38, 1, 35, "Output"]
}, Open  ]],
Cell[92029, 3038, 556, 8, 85, "Text"],

Cell[CellGroupData[{
Cell[92610, 3050, 383, 10, 100, "Input"],
Cell[92996, 3062, 52, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[93097, 3069, 142, 2, 45, "Subsubsection"],
Cell[93242, 3073, 170, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[93437, 3080, 161, 4, 60, "Input"],
Cell[93601, 3086, 38, 1, 35, "Output"]
}, Open  ]],
Cell[93654, 3090, 604, 9, 85, "Text"],

Cell[CellGroupData[{
Cell[94283, 3103, 131, 2, 60, "Input"],
Cell[94417, 3107, 38, 1, 35, "Output"]
}, Open  ]],
Cell[94470, 3111, 177, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[94672, 3118, 169, 4, 60, "Input"],
Cell[94844, 3124, 39, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[94932, 3131, 175, 4, 45, "Subsubsection"],
Cell[95110, 3137, 485, 7, 67, "Text"],
Cell[95598, 3146, 146, 4, 40, "Input"],

Cell[CellGroupData[{
Cell[95769, 3154, 40, 1, 40, "Input"],
Cell[95812, 3157, 35, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[95896, 3164, 165, 4, 45, "Subsubsection"],
Cell[96064, 3170, 339, 6, 50, "Text"],
Cell[96406, 3178, 139, 3, 80, "Input"],
Cell[96548, 3183, 378, 6, 50, "Text"],

Cell[CellGroupData[{
Cell[96951, 3193, 289, 7, 145, "Input"],
Cell[97243, 3202, 52, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[97344, 3209, 170, 4, 45, "Subsubsection"],
Cell[97517, 3215, 371, 6, 50, "Text"],
Cell[97891, 3223, 74, 1, 40, "Input"],

Cell[CellGroupData[{
Cell[97990, 3228, 40, 1, 40, "Input"],
Cell[98033, 3231, 68, 1, 35, "Output"]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[98174, 3240, 43, 0, 52, "Section"],
Cell[98220, 3242, 185, 7, 30, "Text",
  CellTags->"Condition"],

Cell[CellGroupData[{
Cell[98430, 3253, 46, 0, 56, "Subsection"],
Cell[98479, 3255, 250, 4, 47, "Text"],

Cell[CellGroupData[{
Cell[98754, 3263, 153, 3, 82, "Input"],
Cell[98910, 3268, 35, 1, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[98982, 3274, 153, 3, 82, "Input"],
Cell[99138, 3279, 36, 1, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[99211, 3285, 153, 3, 82, "Input"],
Cell[99367, 3290, 36, 1, 35, "Output"]
}, Open  ]],
Cell[99418, 3294, 234, 4, 47, "Text"],
Cell[99655, 3300, 56, 1, 40, "Input"],
Cell[99714, 3303, 136, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[99875, 3310, 142, 3, 80, "Input"],
Cell[100020, 3315, 41, 1, 35, "Output"]
}, Open  ]],
Cell[100076, 3319, 132, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[100233, 3326, 158, 3, 80, "Input"],
Cell[100394, 3331, 44, 1, 35, "Output"]
}, Open  ]],
Cell[100453, 3335, 405, 7, 67, "Text"],

Cell[CellGroupData[{
Cell[100883, 3346, 72, 2, 60, "Input"],
Cell[100958, 3350, 41, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[101048, 3357, 36, 0, 44, "Subsection"],
Cell[101087, 3359, 146, 3, 48, "Text"],
Cell[101236, 3364, 129, 2, 61, "Input"],
Cell[101368, 3368, 104, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[101497, 3375, 106, 2, 61, "Input"],
Cell[101606, 3379, 38, 1, 38, "Output"]
}, Open  ]],
Cell[101659, 3383, 90, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[101774, 3389, 98, 2, 60, "Input"],
Cell[101875, 3393, 35, 1, 35, "Output"]
}, Open  ]],
Cell[101925, 3397, 174, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[102124, 3404, 37, 1, 40, "Input"],
Cell[102164, 3407, 38, 1, 35, "Output"]
}, Open  ]],
Cell[102217, 3411, 1347, 29, 180, "Text"],
Cell[103567, 3442, 174, 3, 80, "Input"],

Cell[CellGroupData[{
Cell[103766, 3449, 37, 1, 40, "Input"],
Cell[103806, 3452, 38, 1, 35, "Output"]
}, Open  ]],
Cell[103859, 3456, 201, 4, 30, "Text"],

Cell[CellGroupData[{
Cell[104085, 3464, 81, 2, 60, "Input"],
Cell[104169, 3468, 35, 1, 35, "Output"]
}, Open  ]],
Cell[104219, 3472, 140, 3, 30, "Text"],
Cell[104362, 3477, 186, 3, 80, "Input"],

Cell[CellGroupData[{
Cell[104573, 3484, 37, 1, 40, "Input"],
Cell[104613, 3487, 38, 1, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[104688, 3493, 81, 2, 60, "Input"],
Cell[104772, 3497, 35, 1, 35, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[104868, 3505, 24, 0, 52, "Section"],
Cell[104895, 3507, 106, 3, 30, "Text",
  CellTags->"Count"],

Cell[CellGroupData[{
Cell[105026, 3514, 102, 2, 40, "Input"],
Cell[105131, 3518, 161, 2, 59, "Output"]
}, Open  ]],
Cell[105307, 3523, 111, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[105443, 3530, 50, 1, 40, "Input"],
Cell[105496, 3533, 35, 1, 38, "Output"]
}, Open  ]],
Cell[105546, 3537, 130, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[105701, 3544, 139, 3, 82, "Input"],
Cell[105843, 3549, 70, 1, 38, "Output"],
Cell[105916, 3552, 70, 1, 38, "Output"],
Cell[105989, 3555, 70, 1, 38, "Output"]
}, Open  ]],
Cell[106074, 3559, 59, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[106158, 3563, 55, 1, 40, "Input"],
Cell[106216, 3566, 35, 1, 38, "Output"]
}, Open  ]],
Cell[106266, 3570, 128, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[106419, 3577, 295, 6, 146, "Input"],
Cell[106717, 3585, 50, 1, 38, "Output"],
Cell[106770, 3588, 50, 1, 38, "Output"],
Cell[106823, 3591, 50, 1, 38, "Output"],
Cell[106876, 3594, 50, 1, 38, "Output"],
Cell[106929, 3597, 50, 1, 38, "Output"],
Cell[106982, 3600, 50, 1, 38, "Output"]
}, Open  ]],
Cell[107047, 3604, 73, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[107145, 3608, 58, 1, 40, "Input"],
Cell[107206, 3611, 36, 1, 38, "Output"]
}, Open  ]],
Cell[107257, 3615, 128, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[107410, 3622, 334, 10, 231, "Input"],
Cell[107747, 3634, 161, 2, 59, "Output"],
Cell[107911, 3638, 70, 1, 38, "Output"],
Cell[107984, 3641, 70, 1, 38, "Output"],
Cell[108057, 3644, 70, 1, 38, "Output"],
Cell[108130, 3647, 50, 1, 38, "Output"],
Cell[108183, 3650, 50, 1, 38, "Output"],
Cell[108236, 3653, 50, 1, 38, "Output"],
Cell[108289, 3656, 50, 1, 38, "Output"],
Cell[108342, 3659, 50, 1, 38, "Output"],
Cell[108395, 3662, 50, 1, 38, "Output"]
}, Open  ]],
Cell[108460, 3666, 294, 7, 48, "Text"],

Cell[CellGroupData[{
Cell[108779, 3677, 37, 0, 52, "Subsubsection"],
Cell[108819, 3679, 266, 5, 50, "Text"],

Cell[CellGroupData[{
Cell[109110, 3688, 196, 4, 80, "Input"],
Cell[109309, 3694, 35, 1, 35, "Output"]
}, Open  ]],
Cell[109359, 3698, 122, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[109506, 3705, 166, 3, 60, "Input"],
Cell[109675, 3710, 35, 1, 35, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[109771, 3718, 30, 0, 52, "Section"],
Cell[109804, 3720, 118, 3, 30, "Text",
  CellTags->"DeleteCases"],
Cell[109925, 3725, 85, 1, 40, "Input"],
Cell[110013, 3728, 172, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[110210, 3735, 57, 1, 40, "Input"],
Cell[110270, 3738, 72, 1, 38, "Output"]
}, Open  ]],
Cell[110357, 3742, 301, 7, 48, "Text"],

Cell[CellGroupData[{
Cell[110683, 3753, 65, 1, 40, "Input"],
Cell[110751, 3756, 60, 1, 38, "Output"]
}, Open  ]],
Cell[110826, 3760, 117, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[110968, 3767, 62, 1, 40, "Input"],
Cell[111033, 3770, 72, 1, 38, "Output"]
}, Open  ]],
Cell[111120, 3774, 71, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[111216, 3778, 70, 1, 40, "Input"],
Cell[111289, 3781, 56, 1, 38, "Output"]
}, Open  ]],
Cell[111360, 3785, 106, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[111491, 3792, 65, 1, 40, "Input"],
Cell[111559, 3795, 56, 1, 38, "Output"]
}, Open  ]],
Cell[111630, 3799, 115, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[111770, 3806, 80, 1, 40, "Input"],
Cell[111853, 3809, 60, 1, 38, "Output"]
}, Open  ]],
Cell[111928, 3813, 294, 7, 48, "Text"],

Cell[CellGroupData[{
Cell[112247, 3824, 34, 0, 56, "Subsection"],
Cell[112284, 3826, 173, 3, 30, "Text"],
Cell[112460, 3831, 123, 2, 60, "Input"],
Cell[112586, 3835, 122, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[112733, 3842, 87, 1, 40, "Input"],
Cell[112823, 3845, 51, 1, 35, "Output"]
}, Open  ]],
Cell[112889, 3849, 128, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[113042, 3856, 86, 1, 40, "Input"],
Cell[113131, 3859, 48, 1, 35, "Output"]
}, Open  ]],
Cell[113194, 3863, 110, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[113329, 3870, 88, 1, 40, "Input"],
Cell[113420, 3873, 51, 1, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[113508, 3879, 105, 2, 40, "Input"],
Cell[113616, 3883, 48, 1, 35, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[113725, 3891, 26, 0, 52, "Section"],
Cell[113754, 3893, 143, 4, 30, "Text",
  CellTags->"Default details"],

Cell[CellGroupData[{
Cell[113922, 3901, 32, 0, 55, "Subsection"],
Cell[113957, 3903, 689, 13, 67, "Text"],

Cell[CellGroupData[{
Cell[114671, 3920, 186, 3, 80, "Input"],
Cell[114860, 3925, 41, 1, 37, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[114938, 3931, 75, 1, 40, "Input"],
Cell[115016, 3934, 41, 1, 37, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[115106, 3941, 34, 0, 45, "Subsection"],
Cell[115143, 3943, 138, 3, 30, "Text"],
Cell[115284, 3948, 312, 5, 122, "Input"],
Cell[115599, 3955, 203, 4, 30, "Text"],

Cell[CellGroupData[{
Cell[115827, 3963, 46, 1, 40, "Input"],
Cell[115876, 3966, 46, 1, 37, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[115959, 3972, 49, 1, 40, "Input"],
Cell[116011, 3975, 52, 1, 50, "Output"]
}, Open  ]],
Cell[116078, 3979, 412, 7, 50, "Text"],

Cell[CellGroupData[{
Cell[116515, 3990, 42, 1, 40, "Input"],
Cell[116560, 3993, 45, 1, 37, "Output"]
}, Open  ]],
Cell[116620, 3997, 411, 7, 50, "Text"],

Cell[CellGroupData[{
Cell[117056, 4008, 44, 1, 40, "Input"],
Cell[117103, 4011, 52, 1, 50, "Output"]
}, Open  ]],
Cell[117170, 4015, 209, 4, 30, "Text"],
Cell[117382, 4021, 69, 1, 40, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[117488, 4027, 36, 0, 45, "Subsection"],
Cell[117527, 4029, 320, 5, 50, "Text"],
Cell[117850, 4036, 273, 5, 122, "Input"],
Cell[118126, 4043, 144, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[118295, 4050, 46, 1, 40, "Input"],
Cell[118344, 4053, 46, 1, 37, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[118427, 4059, 54, 1, 40, "Input"],
Cell[118484, 4062, 58, 1, 50, "Output"]
}, Open  ]],
Cell[118557, 4066, 393, 6, 50, "Text"],

Cell[CellGroupData[{
Cell[118975, 4076, 42, 1, 40, "Input"],
Cell[119020, 4079, 45, 1, 37, "Output"]
}, Open  ]],
Cell[119080, 4083, 421, 7, 67, "Text"],

Cell[CellGroupData[{
Cell[119526, 4094, 49, 1, 40, "Input"],
Cell[119578, 4097, 59, 1, 50, "Output"]
}, Open  ]],
Cell[119652, 4101, 214, 4, 30, "Text"],

Cell[CellGroupData[{
Cell[119891, 4109, 54, 1, 40, "Input"],
Cell[119948, 4112, 159, 3, 30, "Message"],
Cell[120110, 4117, 159, 3, 30, "Message"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[120330, 4127, 29, 0, 52, "Section"],
Cell[120362, 4129, 264, 7, 48, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[120663, 4141, 22, 0, 52, "Section"],
Cell[120688, 4143, 241, 6, 47, "Text",
  CellTags->"Dot"],

Cell[CellGroupData[{
Cell[120954, 4153, 102, 2, 60, "Input"],
Cell[121059, 4157, 52, 1, 35, "Output"]
}, Open  ]],
Cell[121126, 4161, 134, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[121285, 4168, 60, 1, 40, "Input"],
Cell[121348, 4171, 57, 1, 35, "Output"]
}, Open  ]],
Cell[121420, 4175, 233, 7, 30, "Text"],

Cell[CellGroupData[{
Cell[121678, 4186, 75, 1, 40, "Input"],
Cell[121756, 4189, 52, 1, 35, "Output"]
}, Open  ]],
Cell[121823, 4193, 94, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[121942, 4199, 62, 0, 55, "Subsection"],
Cell[122007, 4201, 169, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[122201, 4208, 238, 4, 100, "Input"],
Cell[122442, 4214, 86, 1, 35, "Output"],
Cell[122531, 4217, 38, 1, 35, "Output"]
}, Open  ]],
Cell[122584, 4221, 120, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[122729, 4228, 225, 4, 100, "Input"],
Cell[122957, 4234, 86, 1, 35, "Output"],
Cell[123046, 4237, 38, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[123133, 4244, 53, 0, 45, "Subsection"],
Cell[123189, 4246, 487, 13, 50, "Text"],

Cell[CellGroupData[{
Cell[123701, 4263, 174, 3, 80, "Input"],
Cell[123878, 4268, 149, 2, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[124076, 4276, 52, 0, 45, "Subsection"],
Cell[124131, 4278, 171, 4, 30, "Text"],

Cell[CellGroupData[{
Cell[124327, 4286, 219, 4, 80, "Input"],
Cell[124549, 4292, 574, 9, 100, "Output"]
}, Open  ]],
Cell[125138, 4304, 102, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[125265, 4311, 75, 1, 40, "Input"],
Cell[125343, 4314, 38, 1, 35, "Output"]
}, Open  ]],
Cell[125396, 4318, 435, 10, 50, "Text"],

Cell[CellGroupData[{
Cell[125856, 4332, 316, 6, 100, "Input"],
Cell[126175, 4340, 38, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[126262, 4347, 64, 0, 45, "Subsection"],
Cell[126329, 4349, 375, 7, 67, "Text"],

Cell[CellGroupData[{
Cell[126729, 4360, 227, 4, 105, "Input"],
Cell[126959, 4366, 104, 2, 35, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[127124, 4375, 27, 0, 52, "Section"],
Cell[127154, 4377, 296, 6, 66, "Text",
  CellTags->"Evaluate"],
Cell[127453, 4385, 252, 5, 125, "Input"],
Cell[127708, 4392, 143, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[127876, 4399, 49, 1, 40, "Input"],
Cell[127928, 4402, 54, 1, 38, "Output"]
}, Open  ]],
Cell[127997, 4406, 350, 7, 66, "Text"],

Cell[CellGroupData[{
Cell[128372, 4417, 59, 1, 40, "Input"],
Cell[128434, 4420, 55, 1, 38, "Output"]
}, Open  ]],
Cell[128504, 4424, 118, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[128647, 4431, 59, 1, 40, "Input"],
Cell[128709, 4434, 56, 1, 38, "Output"]
}, Open  ]],
Cell[128780, 4438, 367, 6, 85, "Text"],

Cell[CellGroupData[{
Cell[129172, 4448, 61, 1, 40, "Input"],
Cell[129236, 4451, 66, 1, 38, "Output"]
}, Open  ]],
Cell[129317, 4455, 131, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[129473, 4462, 142, 2, 61, "Input"],
Cell[129618, 4466, 57, 1, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[129712, 4472, 54, 0, 56, "Subsection"],
Cell[129769, 4474, 679, 13, 140, "Text"],
Cell[130451, 4489, 156, 3, 83, "Input"],
Cell[130610, 4494, 131, 3, 40, "Input"],
Cell[130744, 4499, 103, 2, 40, "Input"],
Cell[130850, 4503, 396, 7, 88, "Text"],
Cell[131249, 4512, 133, 3, 54, "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[131431, 4521, 66, 0, 52, "Section"],
Cell[131500, 4523, 614, 12, 103, "Text",
  CellTags->"ExactNumberQ"],

Cell[CellGroupData[{
Cell[132139, 4539, 413, 7, 112, "Input"],
Cell[132555, 4548, 52, 1, 38, "Output"],
Cell[132610, 4551, 125, 2, 59, "Output"]
}, Open  ]],
Cell[132750, 4556, 206, 4, 63, "Commentary"],

Cell[CellGroupData[{
Cell[132981, 4564, 379, 6, 109, "Input"],
Cell[133363, 4572, 70, 1, 38, "Output"],
Cell[133436, 4575, 104, 2, 38, "Output"]
}, Open  ]],
Cell[133555, 4580, 83, 1, 46, "Commentary"],

Cell[CellGroupData[{
Cell[133663, 4585, 45, 1, 40, "Input"],
Cell[133711, 4588, 322, 9, 29, "Print",
  CellTags->"Info3292238823-5325569"]
}, Open  ]],
Cell[134048, 4600, 159, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[134232, 4607, 344, 6, 90, "Input"],
Cell[134579, 4615, 101, 2, 38, "Output"],
Cell[134683, 4619, 69, 1, 38, "Output"]
}, Open  ]],
Cell[134767, 4623, 296, 7, 65, "Commentary"],

Cell[CellGroupData[{
Cell[135088, 4634, 46, 1, 40, "Input"],
Cell[135137, 4637, 334, 9, 50, "Print",
  CellTags->"Info3242392617-9633741"]
}, Open  ]],

Cell[CellGroupData[{
Cell[135508, 4651, 321, 5, 91, "Input"],
Cell[135832, 4658, 101, 2, 38, "Output"],
Cell[135936, 4662, 69, 1, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[136054, 4669, 23, 0, 52, "Section"],
Cell[136080, 4671, 366, 10, 48, "Text",
  CellTags->"Flat"],

Cell[CellGroupData[{
Cell[136471, 4685, 126, 3, 82, "Input"],
Cell[136600, 4690, 44, 1, 38, "Output"]
}, Open  ]],
Cell[136659, 4694, 947, 15, 157, "Text"],

Cell[CellGroupData[{
Cell[137631, 4713, 84, 2, 61, "Input"],
Cell[137718, 4717, 62, 1, 38, "Output"]
}, Open  ]],
Cell[137795, 4721, 276, 7, 48, "Text"],

Cell[CellGroupData[{
Cell[138096, 4732, 103, 1, 56, "Subsection",
  CellTags->"Attributes warning"],
Cell[138202, 4735, 460, 7, 67, "Text"],

Cell[CellGroupData[{
Cell[138687, 4746, 245, 6, 100, "Input"],
Cell[138935, 4754, 54, 1, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[139026, 4760, 140, 3, 40, "Input"],
Cell[139169, 4765, 38, 1, 35, "Output"]
}, Open  ]],
Cell[139222, 4769, 194, 4, 30, "Text"],

Cell[CellGroupData[{
Cell[139441, 4777, 246, 6, 100, "Input"],
Cell[139690, 4785, 44, 1, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[139771, 4791, 136, 3, 40, "Input"],
Cell[139910, 4796, 38, 1, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[139985, 4802, 130, 3, 50, "Subsubsection"],

Cell[CellGroupData[{
Cell[140140, 4809, 322, 8, 145, "Input"],
Cell[140465, 4819, 54, 1, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[140556, 4825, 141, 3, 40, "Input"],
Cell[140700, 4830, 44, 1, 35, "Output"]
}, Open  ]],
Cell[140759, 4834, 323, 6, 50, "Text"],

Cell[CellGroupData[{
Cell[141107, 4844, 39, 1, 40, "Input"],
Cell[141149, 4847, 63, 1, 27, "Print",
  CellTags->"Info3242392618-3366990"],
Cell[141215, 4850, 503, 15, 65, "Print",
  CellTags->"Info3242392618-3366990"]
}, Open  ]],
Cell[141733, 4868, 46, 1, 40, "Input"],

Cell[CellGroupData[{
Cell[141804, 4873, 39, 1, 40, "Input"],
Cell[141846, 4876, 63, 1, 27, "Print",
  CellTags->"Info3242392618-7584819"],
Cell[141912, 4879, 437, 13, 30, "Print",
  CellTags->"Info3242392618-7584819"]
}, Open  ]],
Cell[142364, 4895, 46, 1, 40, "Input"],
Cell[142413, 4898, 43, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[142481, 4902, 37, 1, 40, "Input"],
Cell[142521, 4905, 63, 1, 27, "Print",
  CellTags->"Info3242392618-6169565"]
}, Open  ]],

Cell[CellGroupData[{
Cell[142621, 4911, 51, 1, 40, "Input"],
Cell[142675, 4914, 52, 1, 35, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[142788, 4922, 75, 0, 44, "Subsection"],
Cell[142866, 4924, 818, 12, 120, "Text"],

Cell[CellGroupData[{
Cell[143709, 4940, 141, 4, 105, "Input"],
Cell[143853, 4946, 47, 1, 35, "Output"]
}, Open  ]],
Cell[143915, 4950, 540, 9, 85, "Text"],
Cell[144458, 4961, 290, 5, 105, "Input"],
Cell[144751, 4968, 169, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[144945, 4975, 63, 1, 40, "Input"],
Cell[145011, 4978, 41, 1, 35, "Output"]
}, Open  ]],
Cell[145067, 4982, 200, 4, 47, "Text"],

Cell[CellGroupData[{
Cell[145292, 4990, 49, 1, 40, "Input"],
Cell[145344, 4993, 54, 1, 35, "Output"]
}, Open  ]],
Cell[145413, 4997, 118, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[145556, 5004, 49, 1, 40, "Input"],
Cell[145608, 5007, 35, 1, 35, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[145704, 5015, 26, 0, 52, "Section"],
Cell[145733, 5017, 196, 4, 48, "Text",
  CellTags->"Flatten"],

Cell[CellGroupData[{
Cell[145954, 5025, 68, 1, 40, "Input"],
Cell[146025, 5028, 52, 1, 38, "Output"]
}, Open  ]],
Cell[146092, 5032, 118, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[146235, 5039, 73, 1, 40, "Input"],
Cell[146311, 5042, 53, 1, 38, "Output"]
}, Open  ]],
Cell[146379, 5046, 550, 8, 103, "Text"],

Cell[CellGroupData[{
Cell[146954, 5058, 209, 5, 103, "Input"],
Cell[147166, 5065, 107, 2, 38, "Output"]
}, Open  ]],
Cell[147288, 5070, 265, 5, 66, "Text"],

Cell[CellGroupData[{
Cell[147578, 5079, 187, 5, 61, "Input"],
Cell[147768, 5086, 81, 1, 38, "Output"]
}, Open  ]],
Cell[147864, 5090, 284, 5, 66, "Text"],

Cell[CellGroupData[{
Cell[148173, 5099, 175, 4, 61, "Input"],
Cell[148351, 5105, 59, 1, 38, "Output"]
}, Open  ]],
Cell[148425, 5109, 231, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[148681, 5117, 193, 4, 61, "Input"],
Cell[148877, 5123, 79, 1, 38, "Output"]
}, Open  ]],
Cell[148971, 5127, 127, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[149123, 5134, 215, 4, 61, "Input"],
Cell[149341, 5140, 79, 1, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[149469, 5147, 23, 0, 52, "Section"],
Cell[149495, 5149, 132, 4, 30, "Text",
  CellTags->"Fold"],

Cell[CellGroupData[{
Cell[149652, 5157, 66, 3, 55, "Input"],
Cell[149721, 5162, 53, 1, 35, "Output"]
}, Open  ]],
Cell[149789, 5166, 761, 16, 230, "Text"],

Cell[CellGroupData[{
Cell[150575, 5186, 74, 1, 40, "Input"],
Cell[150652, 5189, 51, 1, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[150740, 5195, 78, 1, 40, "Input"],
Cell[150821, 5198, 47, 1, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[150905, 5204, 123, 3, 40, "Input"],
Cell[151031, 5209, 41, 1, 35, "Output"]
}, Open  ]],
Cell[151087, 5213, 193, 4, 40, "Text"],

Cell[CellGroupData[{
Cell[151305, 5221, 297, 5, 102, "Input"],
Cell[151605, 5228, 86, 1, 35, "Output"]
}, Open  ]],
Cell[151706, 5232, 273, 5, 50, "Text"],

Cell[CellGroupData[{
Cell[152004, 5241, 258, 5, 100, "Input"],
Cell[152265, 5248, 71, 1, 35, "Output"]
}, Open  ]],
Cell[152351, 5252, 277, 5, 50, "Text",
  CellTags->"Partial evaluation 2"],
Cell[152631, 5259, 152, 3, 40, "Input"],
Cell[152786, 5264, 136, 3, 30, "Text"],
Cell[152925, 5269, 192, 4, 70, "Input"],
Cell[153120, 5275, 108, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[153253, 5282, 50, 1, 40, "Input"],
Cell[153306, 5285, 119, 2, 40, "Output"]
}, Open  ]],
Cell[153440, 5290, 152, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[153617, 5297, 84, 1, 40, "Input"],
Cell[153704, 5300, 140, 3, 40, "Output"]
}, Open  ]],
Cell[153859, 5306, 851, 19, 130, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[154747, 5330, 27, 0, 52, "Section"],
Cell[154777, 5332, 226, 5, 48, "Text",
  CellTags->"FoldList"],

Cell[CellGroupData[{
Cell[155028, 5341, 46, 1, 40, "Input"],
Cell[155077, 5344, 326, 9, 50, "Print",
  CellTags->"Info3242392636-8498059"]
}, Open  ]],
Cell[155418, 5356, 437, 9, 85, "Text"],

Cell[CellGroupData[{
Cell[155880, 5369, 344, 7, 61, "Input"],
Cell[156227, 5378, 89, 1, 38, "Output"]
}, Open  ]],
Cell[156331, 5382, 212, 6, 30, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[156580, 5393, 25, 0, 52, "Section"],
Cell[156608, 5395, 139, 4, 30, "Text",
  CellTags->"Format"],

Cell[CellGroupData[{
Cell[156772, 5403, 406, 9, 235, "Input"],
Cell[157181, 5414, 96, 2, 38, "Output"]
}, Open  ]],
Cell[157292, 5419, 67, 0, 30, "Text"],
Cell[157362, 5421, 115, 2, 61, "Input"],
Cell[157480, 5425, 316, 5, 48, "Text"],

Cell[CellGroupData[{
Cell[157821, 5434, 524, 13, 256, "Input"],
Cell[158348, 5449, 68, 2, 50, "Output"]
}, Open  ]],
Cell[158431, 5454, 117, 3, 30, "Text"],
Cell[158551, 5459, 147, 3, 83, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[158735, 5467, 24, 0, 52, "Section"],
Cell[158762, 5469, 378, 11, 48, "Text",
  CellTags->"FreeQ"],

Cell[CellGroupData[{
Cell[159165, 5484, 62, 1, 41, "Input"],
Cell[159230, 5487, 39, 1, 38, "Output"]
}, Open  ]],
Cell[159284, 5491, 102, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[159411, 5498, 65, 1, 41, "Input"],
Cell[159479, 5501, 38, 1, 38, "Output"]
}, Open  ]],
Cell[159532, 5505, 108, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[159665, 5512, 53, 1, 40, "Input"],
Cell[159721, 5515, 39, 1, 38, "Output"]
}, Open  ]],
Cell[159775, 5519, 294, 7, 48, "Text"],

Cell[CellGroupData[{
Cell[160094, 5530, 34, 0, 56, "Subsection"],
Cell[160131, 5532, 251, 4, 50, "Text"],

Cell[CellGroupData[{
Cell[160407, 5540, 73, 1, 40, "Input"],
Cell[160483, 5543, 39, 1, 35, "Output"]
}, Open  ]],
Cell[160537, 5547, 138, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[160700, 5554, 101, 2, 40, "Input"],
Cell[160804, 5558, 38, 1, 35, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[160903, 5566, 27, 0, 52, "Section"],
Cell[160933, 5568, 101, 3, 33, "Text",
  CellTags->"Function"],
Cell[161037, 5573, 336, 6, 86, "Text"],

Cell[CellGroupData[{
Cell[161398, 5583, 159, 3, 61, "Input"],
Cell[161560, 5588, 59, 1, 38, "Output"]
}, Open  ]],
Cell[161634, 5592, 268, 5, 66, "Text"],

Cell[CellGroupData[{
Cell[161927, 5601, 117, 2, 61, "Input"],
Cell[162047, 5605, 59, 1, 38, "Output"]
}, Open  ]],
Cell[162121, 5609, 137, 3, 48, "Text"],
Cell[162261, 5614, 57, 1, 40, "Input"],

Cell[CellGroupData[{
Cell[162343, 5619, 63, 0, 56, "Subsection"],
Cell[162409, 5621, 96, 2, 30, "Text"],
Cell[162508, 5625, 47, 1, 40, "Input"],
Cell[162558, 5628, 424, 7, 70, "Text"],
Cell[162985, 5637, 182, 4, 100, "Input"],
Cell[163170, 5643, 76, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[163271, 5647, 45, 1, 40, "Input"],
Cell[163319, 5650, 48, 1, 35, "Output"]
}, Open  ]],
Cell[163382, 5654, 290, 5, 50, "Text"],

Cell[CellGroupData[{
Cell[163697, 5663, 55, 1, 40, "Input"],
Cell[163755, 5666, 53, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[163857, 5673, 133, 5, 44, "Subsection"],
Cell[163993, 5680, 47, 1, 40, "Input"],
Cell[164043, 5683, 92, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[164160, 5689, 115, 2, 60, "Input"],
Cell[164278, 5693, 48, 1, 35, "Output"]
}, Open  ]],
Cell[164341, 5697, 508, 8, 67, "Text"],
Cell[164852, 5707, 179, 3, 80, "Input"],

Cell[CellGroupData[{
Cell[165056, 5714, 43, 1, 40, "Input"],
Cell[165102, 5717, 48, 1, 35, "Output"]
}, Open  ]],
Cell[165165, 5721, 366, 6, 50, "Text"],

Cell[CellGroupData[{
Cell[165556, 5731, 40, 1, 40, "Input"],
Cell[165599, 5734, 79, 1, 35, "Output"]
}, Open  ]],
Cell[165693, 5738, 442, 13, 50, "Text"],

Cell[CellGroupData[{
Cell[166160, 5755, 170, 3, 80, "Input"],
Cell[166333, 5760, 41, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[166423, 5767, 78, 0, 44, "Subsection"],
Cell[166504, 5769, 47, 1, 40, "Input"],
Cell[166554, 5772, 256, 5, 66, "Text"],

Cell[CellGroupData[{
Cell[166835, 5781, 103, 2, 88, "Input"],
Cell[166941, 5785, 56, 1, 50, "Output"]
}, Open  ]],
Cell[167012, 5789, 342, 6, 66, "Text"],
Cell[167357, 5797, 113, 2, 63, "Input"],

Cell[CellGroupData[{
Cell[167495, 5803, 51, 1, 63, "Input"],
Cell[167549, 5806, 56, 1, 50, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[167642, 5812, 35, 0, 52, "Subsubsection"],
Cell[167680, 5814, 47, 1, 40, "Input"],
Cell[167730, 5817, 374, 6, 85, "Text"],
Cell[168107, 5825, 115, 2, 63, "Input"],

Cell[CellGroupData[{
Cell[168247, 5831, 54, 1, 63, "Input"],
Cell[168304, 5834, 50, 1, 50, "Output"]
}, Open  ]],
Cell[168369, 5838, 367, 10, 66, "Text"],

Cell[CellGroupData[{
Cell[168761, 5852, 40, 1, 40, "Input"],
Cell[168804, 5855, 36, 1, 38, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[168901, 5863, 55, 0, 44, "Subsection"],
Cell[168959, 5865, 47, 1, 40, "Input"],
Cell[169009, 5868, 486, 8, 65, "Text"],
Cell[169498, 5878, 145, 2, 60, "Input"],
Cell[169646, 5882, 125, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[169796, 5889, 95, 2, 60, "Input"],
Cell[169894, 5893, 47, 1, 35, "Output"]
}, Open  ]],
Cell[169956, 5897, 148, 3, 30, "Text"],
Cell[170107, 5902, 491, 12, 105, "Input"],
Cell[170601, 5916, 139, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[170765, 5923, 95, 2, 60, "Input"],
Cell[170863, 5927, 47, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[170959, 5934, 61, 0, 44, "Subsection"],
Cell[171023, 5936, 47, 1, 40, "Input"],
Cell[171073, 5939, 241, 4, 50, "Text"],
Cell[171317, 5945, 227, 4, 60, "Input"],
Cell[171547, 5951, 120, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[171692, 5958, 89, 2, 60, "Input"],
Cell[171784, 5962, 41, 1, 35, "Output"]
}, Open  ]],
Cell[171840, 5966, 118, 3, 30, "Text"],
Cell[171961, 5971, 184, 4, 40, "Input"],
Cell[172148, 5977, 54, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[172227, 5981, 89, 2, 60, "Input"],
Cell[172319, 5985, 41, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[172409, 5992, 58, 0, 44, "Subsection"],
Cell[172470, 5994, 57, 1, 40, "Input"],
Cell[172530, 5997, 1184, 22, 180, "Text",
  CellTags->"No_Argument_Functions"],

Cell[CellGroupData[{
Cell[173739, 6023, 213, 4, 82, "Input"],
Cell[173955, 6029, 128, 2, 35, "Output"]
}, Open  ]],
Cell[174098, 6034, 162, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[174285, 6041, 77, 1, 40, "Input"],
Cell[174365, 6044, 53, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[174467, 6051, 49, 0, 44, "Subsection"],
Cell[174519, 6053, 49, 1, 40, "Input"],
Cell[174571, 6056, 324, 5, 50, "Text"],
Cell[174898, 6063, 130, 2, 40, "Input"],
Cell[175031, 6067, 54, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[175110, 6071, 54, 1, 40, "Input"],
Cell[175167, 6074, 60, 1, 30, "Print"],
Cell[175230, 6077, 93, 1, 35, "Output"]
}, Open  ]]
}, Closed]],
Cell[175350, 6082, 205, 6, 41, "Subsection"]
}, Closed]],

Cell[CellGroupData[{
Cell[175592, 6093, 47, 0, 52, "Section"],
Cell[175642, 6095, 272, 6, 67, "Text",
  CellTags->{"Hold", "HoldAll"}],
Cell[175917, 6103, 133, 3, 82, "Input"],
Cell[176053, 6108, 132, 3, 30, "Text"],
Cell[176188, 6113, 47, 1, 40, "Input"],
Cell[176238, 6116, 167, 5, 30, "Text"],

Cell[CellGroupData[{
Cell[176430, 6125, 209, 4, 103, "Input"],
Cell[176642, 6131, 390, 14, 38, "Output"]
}, Open  ]],
Cell[177047, 6148, 522, 9, 140, "Text"],

Cell[CellGroupData[{
Cell[177594, 6161, 84, 2, 61, "Input"],
Cell[177681, 6165, 35, 1, 38, "Output"]
}, Open  ]],
Cell[177731, 6169, 337, 6, 67, "Text"],

Cell[CellGroupData[{
Cell[178093, 6179, 91, 2, 56, "Subsection"],
Cell[178187, 6183, 67, 0, 30, "Text"],
Cell[178257, 6185, 108, 2, 40, "Input"],
Cell[178368, 6189, 104, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[178497, 6196, 81, 1, 40, "Input"],
Cell[178581, 6199, 1074, 15, 314, "Output"]
}, Open  ]],
Cell[179670, 6217, 106, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[179801, 6224, 83, 1, 40, "Input"],
Cell[179887, 6227, 308, 4, 101, "Output"]
}, Open  ]],
Cell[180210, 6234, 105, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[180340, 6241, 82, 1, 40, "Input"],
Cell[180425, 6244, 88, 1, 38, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[180574, 6252, 34, 0, 52, "Section"],
Cell[180611, 6254, 332, 6, 66, "Text",
  CellTags->"HoldAllComplete"],

Cell[CellGroupData[{
Cell[180968, 6264, 190, 3, 82, "Input"],
Cell[181161, 6269, 102, 2, 38, "Output"]
}, Open  ]],
Cell[181278, 6274, 140, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[181443, 6281, 190, 3, 103, "Input"],
Cell[181636, 6286, 146, 2, 60, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[181819, 6293, 73, 0, 56, "Subsection"],
Cell[181895, 6295, 67, 0, 30, "Text"],
Cell[181965, 6297, 108, 2, 40, "Input"],
Cell[182076, 6301, 116, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[182217, 6308, 89, 1, 40, "Input"],
Cell[182309, 6311, 112, 2, 38, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[182482, 6320, 27, 0, 52, "Section"],
Cell[182512, 6322, 62, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[182599, 6326, 71, 1, 40, "Input"],
Cell[182673, 6329, 465, 19, 38, "Output"]
}, Open  ]],
Cell[183153, 6351, 67, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[183245, 6355, 47, 1, 40, "Input"],
Cell[183295, 6358, 37, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[183381, 6365, 30, 0, 52, "Section"],
Cell[183414, 6367, 116, 3, 30, "Text",
  CellTags->"HoldPattern"],

Cell[CellGroupData[{
Cell[183555, 6374, 65, 1, 40, "Input"],
Cell[183623, 6377, 38, 1, 38, "Output"]
}, Open  ]],
Cell[183676, 6381, 383, 8, 104, "Text"],

Cell[CellGroupData[{
Cell[184084, 6393, 56, 1, 40, "Input"],
Cell[184143, 6396, 38, 1, 38, "Output"]
}, Open  ]],
Cell[184196, 6400, 148, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[184369, 6407, 78, 1, 40, "Input"],
Cell[184450, 6410, 39, 1, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[184526, 6416, 82, 1, 40, "Input"],
Cell[184611, 6419, 39, 1, 38, "Output"]
}, Open  ]],
Cell[184665, 6423, 124, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[184814, 6430, 132, 2, 61, "Input"],
Cell[184949, 6434, 47, 1, 38, "Output"]
}, Open  ]],
Cell[185011, 6438, 204, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[185240, 6446, 81, 1, 40, "Input"],
Cell[185324, 6449, 43, 1, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[185404, 6455, 60, 1, 40, "Input"],
Cell[185467, 6458, 43, 1, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[185547, 6464, 76, 1, 40, "Input"],
Cell[185626, 6467, 43, 1, 38, "Output"]
}, Open  ]],
Cell[185684, 6471, 116, 3, 30, "Text"],
Cell[185803, 6476, 200, 4, 48, "Text"],
Cell[186006, 6482, 142, 2, 62, "Input"],
Cell[186151, 6486, 340, 9, 48, "Text"],

Cell[CellGroupData[{
Cell[186516, 6499, 67, 1, 41, "Input"],
Cell[186586, 6502, 41, 1, 38, "Output"]
}, Open  ]],
Cell[186642, 6506, 223, 5, 49, "Text"],

Cell[CellGroupData[{
Cell[186890, 6515, 92, 1, 41, "Input"],
Cell[186985, 6518, 83, 1, 38, "Output"]
}, Open  ]],
Cell[187083, 6522, 126, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[187234, 6529, 86, 1, 41, "Input"],
Cell[187323, 6532, 65, 1, 38, "Output"]
}, Open  ]],
Cell[187403, 6536, 106, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[187534, 6543, 64, 1, 41, "Input"],
Cell[187601, 6546, 65, 1, 38, "Output"]
}, Open  ]],
Cell[187681, 6550, 232, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[187938, 6558, 102, 2, 62, "Input"],
Cell[188043, 6562, 53, 1, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[188133, 6568, 80, 1, 41, "Input"],
Cell[188216, 6571, 49, 1, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[188314, 6578, 29, 0, 52, "Section"],

Cell[CellGroupData[{
Cell[188368, 6582, 101, 1, 56, "Subsection",
  CellTags->"Hyperlinks"],
Cell[188472, 6585, 1462, 22, 427, "Text"],
Cell[189937, 6609, 122, 3, 30, "Text"],
Cell[190062, 6614, 148, 6, 30, "Text"],
Cell[190213, 6622, 505, 12, 47, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[190755, 6639, 116, 3, 44, "Subsection"],
Cell[190874, 6644, 247, 4, 50, "Text"],
Cell[191124, 6650, 171, 6, 30, "Text"],
Cell[191298, 6658, 176, 4, 50, "Text"],
Cell[191477, 6664, 127, 5, 30, "Text"],
Cell[191607, 6671, 281, 6, 70, "Text"],
Cell[191891, 6679, 177, 7, 142, "Commentary"],
Cell[192071, 6688, 289, 7, 50, "Text"],
Cell[192363, 6697, 198, 7, 142, "Commentary"],
Cell[192564, 6706, 514, 11, 147, "Text"],
Cell[193081, 6719, 171, 6, 30, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[193289, 6730, 93, 2, 44, "Subsection"],
Cell[193385, 6734, 1976, 35, 305, "Text"],
Cell[195364, 6771, 171, 6, 30, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[195572, 6782, 60, 0, 44, "Subsection"],
Cell[195635, 6784, 659, 11, 290, "Text"],
Cell[196297, 6797, 214, 7, 30, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[196548, 6809, 76, 0, 44, "Subsection"],
Cell[196627, 6811, 880, 28, 450, "Text",
  CellTags->"Email"],
Cell[197510, 6841, 217, 5, 37, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[197764, 6851, 32, 0, 44, "Subsection"],
Cell[197799, 6853, 306, 10, 30, "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[198154, 6869, 24, 0, 52, "Section"],
Cell[198181, 6871, 384, 8, 66, "Text",
  CellTags->"Inner"],

Cell[CellGroupData[{
Cell[198590, 6883, 120, 2, 61, "Input"],
Cell[198713, 6887, 52, 1, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[198802, 6893, 73, 1, 40, "Input"],
Cell[198878, 6896, 52, 1, 38, "Output"]
}, Open  ]],
Cell[198945, 6900, 68, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[199038, 6904, 66, 1, 40, "Input"],
Cell[199107, 6907, 62, 1, 38, "Output"]
}, Open  ]],
Cell[199184, 6911, 139, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[199348, 6918, 63, 1, 40, "Input"],
Cell[199414, 6921, 61, 1, 38, "Output"]
}, Open  ]],
Cell[199490, 6925, 174, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[199689, 6932, 68, 1, 40, "Input"],
Cell[199760, 6935, 62, 1, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[199859, 6941, 61, 0, 56, "Subsection"],
Cell[199923, 6943, 315, 8, 48, "Text"],
Cell[200241, 6953, 235, 8, 30, "Text"],

Cell[CellGroupData[{
Cell[200501, 6965, 239, 4, 103, "Input"],
Cell[200743, 6971, 38, 1, 38, "Output"]
}, Open  ]],
Cell[200796, 6975, 268, 6, 48, "Text"],

Cell[CellGroupData[{
Cell[201089, 6985, 50, 1, 40, "Input"],
Cell[201142, 6988, 206, 3, 80, "Output"]
}, Open  ]],
Cell[201363, 6994, 232, 7, 48, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[201632, 7006, 120, 5, 44, "Subsection"],
Cell[201755, 7013, 241, 6, 48, "Text"],

Cell[CellGroupData[{
Cell[202021, 7023, 253, 4, 103, "Input"],
Cell[202277, 7029, 38, 1, 38, "Output"]
}, Open  ]],
Cell[202330, 7033, 126, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[202481, 7040, 75, 1, 40, "Input"],
Cell[202559, 7043, 38, 1, 38, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[202658, 7051, 25, 0, 52, "Section"],
Cell[202686, 7053, 85, 1, 30, "Text",
  CellTags->"Insert"],
Cell[202774, 7056, 169, 3, 61, "Input"],
Cell[202946, 7061, 202, 5, 50, "Text"],

Cell[CellGroupData[{
Cell[203173, 7070, 111, 2, 40, "Input"],
Cell[203287, 7074, 123, 2, 59, "Output"]
}, Open  ]],
Cell[203425, 7079, 415, 11, 67, "Text"],
Cell[203843, 7092, 301, 7, 49, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[204181, 7104, 24, 0, 52, "Section"],
Cell[204208, 7106, 442, 9, 70, "Text",
  CellTags->"Level"],

Cell[CellGroupData[{
Cell[204675, 7119, 226, 4, 80, "Input"],
Cell[204904, 7125, 66, 1, 35, "Output"]
}, Open  ]],
Cell[204985, 7129, 429, 7, 67, "Text"],

Cell[CellGroupData[{
Cell[205439, 7140, 177, 4, 60, "Input"],
Cell[205619, 7146, 66, 1, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[205722, 7152, 34, 0, 55, "Subsection"],
Cell[205759, 7154, 154, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[205938, 7161, 69, 1, 40, "Input"],
Cell[206010, 7164, 93, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[206152, 7171, 55, 0, 45, "Subsection"],
Cell[206210, 7173, 229, 4, 50, "Text"],

Cell[CellGroupData[{
Cell[206464, 7181, 191, 4, 80, "Input"],
Cell[206658, 7187, 131, 2, 65, "Output"]
}, Open  ]],
Cell[206804, 7192, 111, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[206940, 7199, 68, 1, 40, "Input"],
Cell[207011, 7202, 87, 1, 65, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[207159, 7210, 38, 0, 52, "Section"],
Cell[207200, 7212, 1124, 22, 120, "Text",
  CellTags->"Level Specification"],

Cell[CellGroupData[{
Cell[208349, 7238, 43, 1, 40, "Input"],
Cell[208395, 7241, 422, 10, 50, "Print",
  CellTags->"Info3242392684-5465879"]
}, Open  ]],
Cell[208832, 7254, 175, 4, 90, "Input"],
Cell[209010, 7260, 603, 11, 85, "Text"],

Cell[CellGroupData[{
Cell[209638, 7275, 66, 0, 55, "Subsection"],
Cell[209707, 7277, 263, 5, 50, "Text"],

Cell[CellGroupData[{
Cell[209995, 7286, 47, 1, 40, "Input"],
Cell[210045, 7289, 102, 2, 65, "Output"]
}, Open  ]],
Cell[210162, 7294, 117, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[210304, 7301, 47, 1, 40, "Input"],
Cell[210354, 7304, 157, 3, 65, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[210560, 7313, 78, 0, 45, "Subsection"],
Cell[210641, 7315, 247, 4, 50, "Text"],

Cell[CellGroupData[{
Cell[210913, 7323, 49, 1, 40, "Input"],
Cell[210965, 7326, 82, 1, 65, "Output"]
}, Open  ]],
Cell[211062, 7330, 185, 4, 30, "Text"],

Cell[CellGroupData[{
Cell[211272, 7338, 50, 1, 40, "Input"],
Cell[211325, 7341, 36, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[211410, 7348, 78, 0, 45, "Subsection"],
Cell[211491, 7350, 298, 5, 50, "Text"],

Cell[CellGroupData[{
Cell[211814, 7359, 52, 1, 40, "Input"],
Cell[211869, 7362, 168, 3, 65, "Output"]
}, Open  ]],
Cell[212052, 7368, 153, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[212230, 7375, 52, 1, 40, "Input"],
Cell[212285, 7378, 236, 5, 65, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[212570, 7389, 63, 0, 45, "Subsection"],
Cell[212636, 7391, 254, 4, 50, "Text"],

Cell[CellGroupData[{
Cell[212915, 7399, 83, 1, 50, "Subsubsection"],
Cell[213001, 7402, 264, 5, 50, "Text"],
Cell[213268, 7409, 312, 5, 50, "Text"],

Cell[CellGroupData[{
Cell[213605, 7418, 57, 1, 40, "Input"],
Cell[213665, 7421, 43, 1, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[213745, 7427, 45, 1, 40, "Input"],
Cell[213793, 7430, 84, 1, 50, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[213914, 7436, 54, 1, 40, "Input"],
Cell[213971, 7439, 92, 1, 50, "Output"]
}, Open  ]],
Cell[214078, 7443, 153, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[214256, 7450, 54, 1, 40, "Input"],
Cell[214313, 7453, 74, 1, 65, "Output"]
}, Open  ]],
Cell[214402, 7457, 279, 5, 50, "Text"],

Cell[CellGroupData[{
Cell[214706, 7466, 55, 1, 40, "Input"],
Cell[214764, 7469, 36, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[214849, 7476, 68, 0, 45, "Subsubsection"],
Cell[214920, 7478, 390, 6, 50, "Text"],

Cell[CellGroupData[{
Cell[215335, 7488, 52, 1, 40, "Input"],
Cell[215390, 7491, 144, 2, 65, "Output"]
}, Open  ]],
Cell[215549, 7496, 240, 4, 50, "Text"],

Cell[CellGroupData[{
Cell[215814, 7504, 52, 1, 40, "Input"],
Cell[215869, 7507, 256, 4, 65, "Output"]
}, Open  ]],
Cell[216140, 7514, 106, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[216271, 7521, 81, 1, 40, "Input"],
Cell[216355, 7524, 38, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[216442, 7531, 118, 3, 45, "Subsubsection"],
Cell[216563, 7536, 139, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[216727, 7543, 57, 1, 40, "Input"],
Cell[216787, 7546, 180, 3, 65, "Output"]
}, Open  ]],
Cell[216982, 7552, 127, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[217134, 7559, 62, 1, 40, "Input"],
Cell[217199, 7562, 80, 1, 55, "Output"]
}, Open  ]],
Cell[217294, 7566, 150, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[217469, 7573, 113, 2, 40, "Input"],
Cell[217585, 7577, 38, 1, 35, "Output"]
}, Open  ]],
Cell[217638, 7581, 238, 4, 50, "Text"],

Cell[CellGroupData[{
Cell[217901, 7589, 57, 1, 40, "Input"],
Cell[217961, 7592, 36, 1, 35, "Output"]
}, Open  ]],
Cell[218012, 7596, 99, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[218136, 7602, 62, 1, 40, "Input"],
Cell[218201, 7605, 139, 2, 55, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[218413, 7615, 31, 0, 52, "Section"],
Cell[218447, 7617, 101, 1, 30, "Text",
  CellTags->"ListConvolve"],

Cell[CellGroupData[{
Cell[218573, 7622, 242, 4, 105, "Input"],
Cell[218818, 7628, 146, 2, 37, "Output"]
}, Open  ]],
Cell[218979, 7633, 123, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[219127, 7640, 567, 16, 163, "Input"],
Cell[219697, 7658, 38, 1, 37, "Output"]
}, Open  ]],
Cell[219750, 7662, 98, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[219873, 7668, 245, 4, 82, "Input"],
Cell[220121, 7674, 38, 1, 37, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[220196, 7680, 132, 4, 55, "Subsection"],
Cell[220331, 7686, 93, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[220449, 7692, 116, 2, 40, "Input"],
Cell[220568, 7696, 265, 4, 57, "Output"]
}, Open  ]],
Cell[220848, 7703, 438, 7, 65, "Text"],

Cell[CellGroupData[{
Cell[221311, 7714, 746, 20, 162, "Input"],
Cell[222060, 7736, 38, 1, 35, "Output"]
}, Open  ]],
Cell[222113, 7740, 124, 3, 40, "Text"],

Cell[CellGroupData[{
Cell[222262, 7747, 106, 2, 40, "Input"],
Cell[222371, 7751, 265, 4, 57, "Output"]
}, Open  ]],
Cell[222651, 7758, 425, 7, 65, "Text"],

Cell[CellGroupData[{
Cell[223101, 7769, 736, 20, 162, "Input"],
Cell[223840, 7791, 38, 1, 35, "Output"]
}, Open  ]],
Cell[223893, 7795, 125, 3, 40, "Text"],

Cell[CellGroupData[{
Cell[224043, 7802, 111, 2, 40, "Input"],
Cell[224157, 7806, 377, 5, 77, "Output"]
}, Open  ]],
Cell[224549, 7814, 418, 7, 65, "Text"],

Cell[CellGroupData[{
Cell[224992, 7825, 891, 23, 227, "Input"],
Cell[225886, 7850, 38, 1, 35, "Output"]
}, Open  ]],
Cell[225939, 7854, 268, 6, 60, "Text"],

Cell[CellGroupData[{
Cell[226232, 7864, 111, 2, 40, "Input"],
Cell[226346, 7868, 146, 2, 35, "Output"]
}, Open  ]],
Cell[226507, 7873, 418, 7, 65, "Text"],

Cell[CellGroupData[{
Cell[226950, 7884, 591, 17, 162, "Input"],
Cell[227544, 7903, 38, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[227631, 7910, 44, 0, 45, "Subsection"],
Cell[227678, 7912, 137, 5, 30, "Text"],

Cell[CellGroupData[{
Cell[227840, 7921, 112, 2, 40, "Input"],
Cell[227955, 7925, 365, 5, 77, "Output"]
}, Open  ]],
Cell[228335, 7933, 331, 6, 47, "Text"],

Cell[CellGroupData[{
Cell[228691, 7943, 976, 14, 277, "Input"],
Cell[229670, 7959, 38, 1, 35, "Output"]
}, Open  ]],
Cell[229723, 7963, 191, 6, 40, "Text"],

Cell[CellGroupData[{
Cell[229939, 7973, 137, 2, 40, "Input"],
Cell[230079, 7977, 377, 5, 77, "Output"]
}, Open  ]],
Cell[230471, 7985, 331, 7, 47, "Text"],

Cell[CellGroupData[{
Cell[230827, 7996, 990, 14, 277, "Input"],
Cell[231820, 8012, 38, 1, 35, "Output"]
}, Open  ]],
Cell[231873, 8016, 228, 7, 40, "Text"],

Cell[CellGroupData[{
Cell[232126, 8027, 121, 2, 40, "Input"],
Cell[232250, 8031, 377, 5, 77, "Output"]
}, Open  ]],
Cell[232642, 8039, 124, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[232791, 8046, 974, 14, 277, "Input"],
Cell[233768, 8062, 38, 1, 35, "Output"]
}, Open  ]],
Cell[233821, 8066, 294, 9, 40, "Text"],

Cell[CellGroupData[{
Cell[234140, 8079, 210, 4, 60, "Input"],
Cell[234353, 8085, 38, 1, 35, "Output"]
}, Open  ]],
Cell[234406, 8089, 245, 7, 40, "Text"],

Cell[CellGroupData[{
Cell[234676, 8100, 254, 4, 60, "Input"],
Cell[234933, 8106, 38, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[235020, 8113, 53, 0, 45, "Subsection"],
Cell[235076, 8115, 193, 5, 30, "Text"],

Cell[CellGroupData[{
Cell[235294, 8124, 117, 2, 40, "Input"],
Cell[235414, 8128, 189, 3, 57, "Output"]
}, Open  ]],
Cell[235618, 8134, 306, 9, 47, "Text"],

Cell[CellGroupData[{
Cell[235949, 8147, 120, 2, 40, "Input"],
Cell[236072, 8151, 189, 3, 57, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[236310, 8160, 48, 0, 45, "Subsection"],
Cell[236361, 8162, 74, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[236460, 8166, 474, 14, 162, "Input"],
Cell[236937, 8182, 127, 2, 35, "Output"]
}, Open  ]],
Cell[237079, 8187, 128, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[237232, 8194, 224, 4, 82, "Input"],
Cell[237459, 8200, 38, 1, 27, "Output"]
}, Open  ]],
Cell[237512, 8204, 279, 7, 40, "Text"],

Cell[CellGroupData[{
Cell[237816, 8215, 139, 2, 45, "Input"],
Cell[237958, 8219, 38, 1, 27, "Output"]
}, Open  ]],
Cell[238011, 8223, 138, 4, 40, "Text"],

Cell[CellGroupData[{
Cell[238174, 8231, 86, 1, 27, "Input"],
Cell[238263, 8234, 123, 2, 35, "Output"]
}, Open  ]],
Cell[238401, 8239, 128, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[238554, 8246, 381, 7, 147, "Input"],
Cell[238938, 8255, 38, 1, 35, "Output"]
}, Open  ]],
Cell[238991, 8259, 180, 4, 40, "Text"],

Cell[CellGroupData[{
Cell[239196, 8267, 151, 2, 40, "Input"],
Cell[239350, 8271, 38, 1, 35, "Output"]
}, Open  ]],
Cell[239403, 8275, 401, 7, 75, "Text"],
Cell[239807, 8284, 61, 1, 40, "Input"],
Cell[239871, 8287, 81, 1, 40, "Input"],
Cell[239955, 8290, 81, 1, 40, "Input"],
Cell[240039, 8293, 147, 3, 30, "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[240235, 8302, 32, 0, 52, "Section"],
Cell[240270, 8304, 103, 1, 30, "Text",
  CellTags->"ListCorrelate"],

Cell[CellGroupData[{
Cell[240398, 8309, 232, 4, 105, "Input"],
Cell[240633, 8315, 146, 2, 35, "Output"]
}, Open  ]],
Cell[240794, 8320, 124, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[240943, 8327, 568, 16, 162, "Input"],
Cell[241514, 8345, 38, 1, 35, "Output"]
}, Open  ]],
Cell[241567, 8349, 98, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[241690, 8355, 245, 4, 82, "Input"],
Cell[241938, 8361, 38, 1, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[242013, 8367, 132, 4, 55, "Subsection"],
Cell[242148, 8373, 94, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[242267, 8379, 117, 2, 40, "Input"],
Cell[242387, 8383, 265, 4, 57, "Output"]
}, Open  ]],
Cell[242667, 8390, 438, 7, 65, "Text"],

Cell[CellGroupData[{
Cell[243130, 8401, 747, 20, 162, "Input"],
Cell[243880, 8423, 38, 1, 35, "Output"]
}, Open  ]],
Cell[243933, 8427, 125, 3, 40, "Text"],

Cell[CellGroupData[{
Cell[244083, 8434, 107, 2, 40, "Input"],
Cell[244193, 8438, 265, 4, 57, "Output"]
}, Open  ]],
Cell[244473, 8445, 425, 7, 65, "Text"],

Cell[CellGroupData[{
Cell[244923, 8456, 737, 20, 162, "Input"],
Cell[245663, 8478, 38, 1, 35, "Output"]
}, Open  ]],
Cell[245716, 8482, 126, 3, 40, "Text"],

Cell[CellGroupData[{
Cell[245867, 8489, 112, 2, 40, "Input"],
Cell[245982, 8493, 146, 2, 35, "Output"]
}, Open  ]],
Cell[246143, 8498, 418, 7, 65, "Text"],

Cell[CellGroupData[{
Cell[246586, 8509, 892, 23, 227, "Input"],
Cell[247481, 8534, 39, 1, 27, "Output"]
}, Open  ]],
Cell[247535, 8538, 270, 6, 57, "Text"],

Cell[CellGroupData[{
Cell[247830, 8548, 112, 2, 27, "Input"],
Cell[247945, 8552, 377, 5, 45, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[248359, 8562, 42, 1, 27, "Input"],
Cell[248404, 8565, 35, 1, 27, "Output"]
}, Open  ]],
Cell[248454, 8569, 418, 7, 47, "Text"],

Cell[CellGroupData[{
Cell[248897, 8580, 892, 23, 175, "Input"],
Cell[249792, 8605, 38, 1, 27, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[249879, 8612, 44, 0, 45, "Subsection"],
Cell[249926, 8614, 137, 5, 30, "Text"],

Cell[CellGroupData[{
Cell[250088, 8623, 113, 2, 40, "Input"],
Cell[250204, 8627, 365, 5, 77, "Output"]
}, Open  ]],
Cell[250584, 8635, 332, 6, 47, "Text"],

Cell[CellGroupData[{
Cell[250941, 8645, 1026, 15, 277, "Input"],
Cell[251970, 8662, 38, 1, 27, "Output"]
}, Open  ]],
Cell[252023, 8666, 190, 6, 40, "Text"],

Cell[CellGroupData[{
Cell[252238, 8676, 152, 3, 27, "Input"],
Cell[252393, 8681, 377, 5, 45, "Output"]
}, Open  ]],
Cell[252785, 8689, 331, 7, 47, "Text"],

Cell[CellGroupData[{
Cell[253141, 8700, 1053, 15, 220, "Input"],
Cell[254197, 8717, 38, 1, 27, "Output"]
}, Open  ]],
Cell[254250, 8721, 239, 8, 40, "Text"],

Cell[CellGroupData[{
Cell[254514, 8733, 122, 2, 27, "Input"],
Cell[254639, 8737, 377, 5, 45, "Output"]
}, Open  ]],
Cell[255031, 8745, 124, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[255180, 8752, 1037, 15, 220, "Input"],
Cell[256220, 8769, 38, 1, 27, "Output"]
}, Open  ]],
Cell[256273, 8773, 294, 9, 40, "Text"],

Cell[CellGroupData[{
Cell[256592, 8786, 212, 4, 45, "Input"],
Cell[256807, 8792, 38, 1, 27, "Output"]
}, Open  ]],
Cell[256860, 8796, 256, 8, 40, "Text"],

Cell[CellGroupData[{
Cell[257141, 8808, 256, 4, 45, "Input"],
Cell[257400, 8814, 38, 1, 27, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[257487, 8821, 53, 0, 45, "Subsection"],
Cell[257543, 8823, 193, 5, 30, "Text"],

Cell[CellGroupData[{
Cell[257761, 8832, 118, 2, 40, "Input"],
Cell[257882, 8836, 189, 3, 57, "Output"]
}, Open  ]],
Cell[258086, 8842, 319, 11, 47, "Text"],

Cell[CellGroupData[{
Cell[258430, 8857, 121, 2, 40, "Input"],
Cell[258554, 8861, 189, 3, 57, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[258792, 8870, 49, 0, 45, "Subsection"],
Cell[258844, 8872, 72, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[258941, 8876, 475, 14, 162, "Input"],
Cell[259419, 8892, 127, 2, 35, "Output"]
}, Open  ]],
Cell[259561, 8897, 126, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[259712, 8904, 166, 3, 60, "Input"],
Cell[259881, 8909, 38, 1, 27, "Output"]
}, Open  ]],
Cell[259934, 8913, 292, 9, 40, "Text"],

Cell[CellGroupData[{
Cell[260251, 8926, 141, 2, 45, "Input"],
Cell[260395, 8930, 38, 1, 27, "Output"]
}, Open  ]],
Cell[260448, 8934, 139, 4, 40, "Text"],

Cell[CellGroupData[{
Cell[260612, 8942, 87, 1, 27, "Input"],
Cell[260702, 8945, 123, 2, 27, "Output"]
}, Open  ]],
Cell[260840, 8950, 126, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[260991, 8957, 320, 6, 97, "Input"],
Cell[261314, 8965, 38, 1, 27, "Output"]
}, Open  ]],
Cell[261367, 8969, 181, 4, 40, "Text"],

Cell[CellGroupData[{
Cell[261573, 8977, 154, 2, 27, "Input"],
Cell[261730, 8981, 38, 1, 27, "Output"]
}, Open  ]],
Cell[261783, 8985, 402, 7, 57, "Text"],
Cell[262188, 8994, 62, 1, 27, "Input"],
Cell[262253, 8997, 82, 1, 27, "Input"],
Cell[262338, 9000, 87, 1, 27, "Input"],
Cell[262428, 9003, 145, 3, 30, "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[262622, 9012, 22, 0, 52, "Section"],
Cell[262647, 9014, 542, 12, 67, "Text",
  CellTags->"Map"],

Cell[CellGroupData[{
Cell[263214, 9030, 197, 4, 105, "Input"],
Cell[263414, 9036, 138, 2, 50, "Output"]
}, Open  ]],
Cell[263567, 9041, 189, 4, 30, "Text"],

Cell[CellGroupData[{
Cell[263781, 9049, 67, 1, 40, "Input"],
Cell[263851, 9052, 138, 2, 50, "Output"]
}, Open  ]],
Cell[264004, 9057, 572, 10, 107, "Text"],

Cell[CellGroupData[{
Cell[264601, 9071, 62, 1, 40, "Input"],
Cell[264666, 9074, 150, 2, 50, "Output"]
}, Open  ]],
Cell[264831, 9079, 429, 9, 70, "Text"],

Cell[CellGroupData[{
Cell[265285, 9092, 71, 1, 40, "Input"],
Cell[265359, 9095, 148, 2, 50, "Output"]
}, Open  ]],
Cell[265522, 9100, 184, 5, 50, "Text"],

Cell[CellGroupData[{
Cell[265731, 9109, 53, 1, 52, "Input"],
Cell[265787, 9112, 115, 2, 65, "Output"]
}, Open  ]],
Cell[265917, 9117, 113, 4, 50, "Text"],

Cell[CellGroupData[{
Cell[266055, 9125, 61, 1, 40, "Input"],
Cell[266119, 9128, 158, 2, 50, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[266314, 9135, 34, 0, 55, "Subsection"],
Cell[266351, 9137, 603, 9, 85, "Text"],

Cell[CellGroupData[{
Cell[266979, 9150, 188, 3, 80, "Input"],
Cell[267170, 9155, 57, 1, 35, "Output"]
}, Open  ]],
Cell[267242, 9159, 384, 6, 50, "Text"],

Cell[CellGroupData[{
Cell[267651, 9169, 70, 1, 40, "Input"],
Cell[267724, 9172, 75, 1, 35, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[267860, 9180, 24, 0, 52, "Section"],
Cell[267887, 9182, 143, 4, 30, "Text",
  CellTags->"MapAt"],

Cell[CellGroupData[{
Cell[268055, 9190, 131, 2, 60, "Input"],
Cell[268189, 9194, 57, 1, 35, "Output"]
}, Open  ]],
Cell[268261, 9198, 64, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[268350, 9202, 75, 1, 40, "Input"],
Cell[268428, 9205, 62, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[268539, 9212, 29, 0, 52, "Section"],
Cell[268571, 9214, 278, 5, 50, "Text",
  CellTags->"MapIndexed"],

Cell[CellGroupData[{
Cell[268874, 9223, 174, 3, 80, "Input"],
Cell[269051, 9228, 524, 19, 122, "Output"]
}, Open  ]],
Cell[269590, 9250, 601, 12, 87, "Text"],

Cell[CellGroupData[{
Cell[270216, 9266, 88, 1, 40, "Input"],
Cell[270307, 9269, 500, 19, 122, "Output"]
}, Open  ]],
Cell[270822, 9291, 104, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[270951, 9298, 83, 1, 40, "Input"],
Cell[271037, 9301, 469, 14, 122, "Output"]
}, Open  ]],
Cell[271521, 9318, 130, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[271676, 9325, 85, 1, 40, "Input"],
Cell[271764, 9328, 457, 14, 122, "Output"]
}, Open  ]],
Cell[272236, 9345, 230, 6, 30, "Text"],

Cell[CellGroupData[{
Cell[272491, 9355, 71, 1, 40, "Input"],
Cell[272565, 9358, 111, 2, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[272713, 9365, 111, 2, 40, "Input"],
Cell[272827, 9369, 133, 2, 35, "Output"]
}, Open  ]],
Cell[272975, 9374, 379, 8, 50, "Text"],

Cell[CellGroupData[{
Cell[273379, 9386, 34, 0, 55, "Subsection"],
Cell[273416, 9388, 212, 4, 30, "Text"],

Cell[CellGroupData[{
Cell[273653, 9396, 79, 1, 40, "Input"],
Cell[273735, 9399, 91, 1, 35, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[273887, 9407, 28, 0, 52, "Section"],
Cell[273918, 9409, 251, 6, 30, "Text",
  CellTags->"MapThread"],

Cell[CellGroupData[{
Cell[274194, 9419, 185, 3, 80, "Input"],
Cell[274382, 9424, 107, 2, 35, "Output"]
}, Open  ]],
Cell[274504, 9429, 189, 4, 30, "Text"],

Cell[CellGroupData[{
Cell[274718, 9437, 83, 1, 40, "Input"],
Cell[274804, 9440, 38, 1, 35, "Output"]
}, Open  ]],
Cell[274857, 9444, 93, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[274975, 9450, 402, 7, 227, "Input"],
Cell[275380, 9459, 43, 1, 35, "Output"]
}, Open  ]],
Cell[275438, 9463, 71, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[275534, 9467, 95, 2, 60, "Input"],
Cell[275632, 9471, 124, 2, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[275793, 9478, 44, 1, 40, "Input"],
Cell[275840, 9481, 124, 2, 35, "Output"]
}, Open  ]],
Cell[275979, 9486, 171, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[276175, 9493, 98, 2, 60, "Input"],
Cell[276276, 9497, 133, 2, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[276446, 9504, 44, 1, 40, "Input"],
Cell[276493, 9507, 133, 2, 35, "Output"]
}, Open  ]],
Cell[276641, 9512, 312, 8, 70, "Text"],

Cell[CellGroupData[{
Cell[276978, 9524, 174, 3, 80, "Input"],
Cell[277155, 9529, 64, 1, 35, "Output"]
}, Open  ]],
Cell[277234, 9533, 128, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[277387, 9540, 55, 1, 40, "Input"],
Cell[277445, 9543, 159, 2, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[277641, 9550, 155, 2, 60, "Input"],
Cell[277799, 9554, 286, 4, 57, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[278134, 9564, 28, 0, 52, "Section"],
Cell[278165, 9566, 410, 8, 67, "Text",
  CellTags->"MakeBoxes"],
Cell[278578, 9576, 1636, 26, 290, "Text"],
Cell[280217, 9604, 246, 4, 82, "Input"],
Cell[280466, 9610, 130, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[280621, 9617, 127, 2, 60, "Input"],
Cell[280751, 9621, 97, 2, 65, "Output"]
}, Open  ]],
Cell[280863, 9626, 67, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[280955, 9630, 56, 1, 40, "Input"],
Cell[281014, 9633, 273, 5, 57, "Output"]
}, Open  ]],
Cell[281302, 9641, 131, 3, 30, "Text"],
Cell[281436, 9646, 1033, 19, 240, "Text"],

Cell[CellGroupData[{
Cell[282494, 9669, 37, 0, 55, "Subsection"],
Cell[282534, 9671, 106, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[282665, 9678, 68, 1, 57, "Input"],
Cell[282736, 9681, 66, 1, 50, "Output"]
}, Open  ]],
Cell[282817, 9685, 319, 5, 47, "Text"],
Cell[283139, 9692, 526, 10, 147, "Input"],
Cell[283668, 9704, 61, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[283754, 9708, 118, 2, 57, "Input"],
Cell[283875, 9712, 121, 2, 50, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[284057, 9721, 25, 0, 52, "Section"],
Cell[284085, 9723, 474, 8, 103, "Text",
  CellTags->"MatchQ"],

Cell[CellGroupData[{
Cell[284584, 9735, 99, 2, 40, "Input",
  CellTags->"MatchQ"],
Cell[284686, 9739, 47, 1, 38, "Output"]
}, Open  ]],
Cell[284748, 9743, 187, 6, 30, "Text"],

Cell[CellGroupData[{
Cell[284960, 9753, 174, 3, 125, "Input"],
Cell[285137, 9758, 60, 1, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[285234, 9764, 118, 2, 82, "Input"],
Cell[285355, 9768, 54, 1, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[285446, 9774, 154, 3, 82, "Input"],
Cell[285603, 9779, 54, 1, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[285694, 9785, 327, 6, 146, "Input"],
Cell[286024, 9793, 74, 1, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[286135, 9799, 90, 1, 40, "Input"],
Cell[286228, 9802, 47, 1, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[286312, 9808, 371, 6, 188, "Input"],
Cell[286686, 9816, 87, 1, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[286810, 9822, 130, 2, 61, "Input"],
Cell[286943, 9826, 38, 1, 38, "Output"]
}, Open  ]],
Cell[286996, 9830, 295, 7, 48, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[287328, 9842, 26, 0, 52, "Section"],
Cell[287357, 9844, 138, 4, 30, "Text",
  CellTags->"MemberQ"],

Cell[CellGroupData[{
Cell[287520, 9852, 126, 2, 62, "Input"],
Cell[287649, 9856, 38, 1, 38, "Output"]
}, Open  ]],
Cell[287702, 9860, 191, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[287918, 9868, 66, 1, 41, "Input"],
Cell[287987, 9871, 39, 1, 38, "Output"]
}, Open  ]],
Cell[288041, 9875, 252, 7, 48, "Text"],

Cell[CellGroupData[{
Cell[288318, 9886, 79, 1, 41, "Input"],
Cell[288400, 9889, 38, 1, 38, "Output"]
}, Open  ]],
Cell[288453, 9893, 180, 6, 30, "Text"],

Cell[CellGroupData[{
Cell[288658, 9903, 79, 1, 41, "Input"],
Cell[288740, 9906, 39, 1, 38, "Output"]
}, Open  ]],
Cell[288794, 9910, 175, 6, 30, "Text"],

Cell[CellGroupData[{
Cell[288994, 9920, 92, 1, 41, "Input"],
Cell[289089, 9923, 38, 1, 38, "Output"]
}, Open  ]],
Cell[289142, 9927, 296, 7, 48, "Text"],

Cell[CellGroupData[{
Cell[289463, 9938, 34, 0, 56, "Subsection"],
Cell[289500, 9940, 173, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[289698, 9947, 60, 1, 41, "Input"],
Cell[289761, 9950, 39, 1, 38, "Output"]
}, Open  ]],
Cell[289815, 9954, 136, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[289976, 9961, 80, 1, 41, "Input"],
Cell[290059, 9964, 38, 1, 38, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[290158, 9972, 26, 0, 52, "Section"],
Cell[290187, 9974, 693, 13, 104, "Text",
  CellTags->"Message"],

Cell[CellGroupData[{
Cell[290905, 9991, 106, 2, 65, "Input"],
Cell[291014, 9995, 38, 1, 40, "Output"]
}, Open  ]],
Cell[291067, 9999, 226, 6, 48, "Text"],

Cell[CellGroupData[{
Cell[291318, 10009, 50, 1, 40, "Input"],
Cell[291371, 10012, 50, 1, 47, "Output"]
}, Open  ]],
Cell[291436, 10016, 174, 3, 48, "Text"],
Cell[291613, 10021, 127, 2, 61, "Input"],
Cell[291743, 10025, 543, 8, 103, "Text"],
Cell[292289, 10035, 105, 2, 40, "Input"],
Cell[292397, 10039, 453, 11, 70, "Text"],

Cell[CellGroupData[{
Cell[292875, 10054, 62, 1, 56, "Input"],
Cell[292940, 10057, 56, 1, 38, "Output"]
}, Open  ]],
Cell[293011, 10061, 489, 9, 85, "Text"],

Cell[CellGroupData[{
Cell[293525, 10074, 46, 0, 56, "Subsection"],
Cell[293574, 10076, 300, 5, 47, "Text"],
Cell[293877, 10083, 1474, 30, 385, "Input"],
Cell[295354, 10115, 88, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[295467, 10121, 136, 2, 60, "Input"],
Cell[295606, 10125, 41, 1, 35, "Output"],
Cell[295650, 10128, 41, 1, 35, "Output"]
}, Open  ]],
Cell[295706, 10132, 163, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[295894, 10139, 87, 1, 40, "Input"],
Cell[295984, 10142, 88, 1, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[296109, 10148, 93, 1, 40, "Input"],
Cell[296205, 10151, 101, 2, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[296355, 10159, 38, 0, 44, "Subsection"],
Cell[296396, 10161, 1584, 42, 175, "Text"],
Cell[297983, 10205, 150, 2, 82, "Input"],
Cell[298136, 10209, 147, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[298308, 10216, 48, 1, 40, "Input"],
Cell[298359, 10219, 138, 3, 27, "Message"],
Cell[298500, 10224, 49, 1, 38, "Output"]
}, Open  ]],
Cell[298564, 10228, 240, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[298829, 10236, 44, 0, 52, "Subsubsection"],
Cell[298876, 10238, 102, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[299003, 10245, 63, 1, 40, "Input"],
Cell[299069, 10248, 112, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[299218, 10255, 68, 1, 40, "Input"],
Cell[299289, 10258, 121, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[299447, 10265, 68, 1, 40, "Input"],
Cell[299518, 10268, 156, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[299711, 10276, 67, 1, 40, "Input"],
Cell[299781, 10279, 147, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[299965, 10287, 67, 1, 40, "Input"],
Cell[300035, 10290, 146, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[300218, 10298, 74, 1, 40, "Input"],
Cell[300295, 10301, 171, 3, 46, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[300503, 10309, 73, 1, 40, "Input"],
Cell[300579, 10312, 166, 3, 46, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[300782, 10320, 73, 1, 40, "Input"],
Cell[300858, 10323, 165, 3, 46, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[301060, 10331, 74, 1, 40, "Input"],
Cell[301137, 10334, 158, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[301332, 10342, 74, 1, 40, "Input"],
Cell[301409, 10345, 162, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[301608, 10353, 79, 1, 40, "Input"],
Cell[301690, 10356, 180, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[301907, 10364, 79, 1, 40, "Input"],
Cell[301989, 10367, 171, 3, 27, "Message"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[302209, 10376, 42, 0, 45, "Subsubsection"],
Cell[302254, 10378, 95, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[302374, 10384, 62, 1, 40, "Input"],
Cell[302439, 10387, 152, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[302628, 10395, 64, 1, 40, "Input"],
Cell[302695, 10398, 130, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[302862, 10405, 67, 1, 40, "Input"],
Cell[302932, 10408, 138, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[303107, 10416, 67, 1, 40, "Input"],
Cell[303177, 10419, 154, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[303368, 10427, 68, 1, 40, "Input"],
Cell[303439, 10430, 175, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[303651, 10438, 68, 1, 40, "Input"],
Cell[303722, 10441, 188, 3, 50, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[303947, 10449, 68, 1, 40, "Input"],
Cell[304018, 10452, 184, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[304239, 10460, 67, 1, 40, "Input"],
Cell[304309, 10463, 157, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[304503, 10471, 66, 1, 40, "Input"],
Cell[304572, 10474, 129, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[304738, 10481, 67, 1, 40, "Input"],
Cell[304808, 10484, 145, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[304990, 10492, 68, 1, 40, "Input"],
Cell[305061, 10495, 159, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[305257, 10503, 68, 1, 40, "Input"],
Cell[305328, 10506, 142, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[305507, 10514, 68, 1, 40, "Input"],
Cell[305578, 10517, 155, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[305770, 10525, 67, 1, 40, "Input"],
Cell[305840, 10528, 153, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[306030, 10536, 67, 1, 40, "Input"],
Cell[306100, 10539, 127, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[306264, 10546, 69, 1, 40, "Input"],
Cell[306336, 10549, 147, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[306520, 10557, 67, 1, 40, "Input"],
Cell[306590, 10560, 190, 3, 50, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[306817, 10568, 68, 1, 40, "Input"],
Cell[306888, 10571, 180, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[307105, 10579, 69, 1, 40, "Input"],
Cell[307177, 10582, 131, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[307345, 10589, 67, 1, 40, "Input"],
Cell[307415, 10592, 160, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[307612, 10600, 68, 1, 40, "Input"],
Cell[307683, 10603, 151, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[307871, 10611, 66, 1, 40, "Input"],
Cell[307940, 10614, 147, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[308124, 10622, 67, 1, 40, "Input"],
Cell[308194, 10625, 156, 3, 27, "Message"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[308399, 10634, 32, 0, 45, "Subsubsection"],
Cell[308434, 10636, 88, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[308547, 10642, 61, 1, 40, "Input"],
Cell[308611, 10645, 147, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[308795, 10653, 68, 1, 40, "Input"],
Cell[308866, 10656, 146, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[309049, 10664, 67, 1, 40, "Input"],
Cell[309119, 10667, 152, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[309308, 10675, 68, 1, 40, "Input"],
Cell[309379, 10678, 165, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[309581, 10686, 68, 1, 40, "Input"],
Cell[309652, 10689, 166, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[309855, 10697, 68, 1, 40, "Input"],
Cell[309926, 10700, 161, 3, 30, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[310124, 10708, 68, 1, 40, "Input"],
Cell[310195, 10711, 154, 3, 30, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[310386, 10719, 67, 1, 40, "Input"],
Cell[310456, 10722, 140, 3, 30, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[310633, 10730, 67, 1, 40, "Input"],
Cell[310703, 10733, 152, 3, 30, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[310892, 10741, 66, 1, 40, "Input"],
Cell[310961, 10744, 146, 3, 30, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[311144, 10752, 68, 1, 40, "Input"],
Cell[311215, 10755, 120, 2, 30, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[311372, 10762, 68, 1, 40, "Input"],
Cell[311443, 10765, 160, 3, 30, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[311640, 10773, 68, 1, 40, "Input"],
Cell[311711, 10776, 152, 3, 30, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[311900, 10784, 68, 1, 40, "Input"],
Cell[311971, 10787, 144, 3, 30, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[312152, 10795, 69, 1, 40, "Input"],
Cell[312224, 10798, 157, 3, 30, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[312418, 10806, 67, 1, 40, "Input"],
Cell[312488, 10809, 116, 2, 30, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[312641, 10816, 66, 1, 40, "Input"],
Cell[312710, 10819, 125, 2, 30, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[312872, 10826, 75, 1, 40, "Input"],
Cell[312950, 10829, 207, 3, 30, "Message"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[313206, 10838, 33, 0, 45, "Subsubsection"],
Cell[313242, 10840, 90, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[313357, 10846, 54, 1, 40, "Input"],
Cell[313414, 10849, 115, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[313566, 10856, 57, 1, 40, "Input"],
Cell[313626, 10859, 123, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[313786, 10866, 61, 1, 40, "Input"],
Cell[313850, 10869, 106, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[313993, 10876, 66, 1, 40, "Input"],
Cell[314062, 10879, 179, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[314278, 10887, 69, 1, 40, "Input"],
Cell[314350, 10890, 151, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[314538, 10898, 68, 1, 40, "Input"],
Cell[314609, 10901, 145, 3, 27, "Message"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[314803, 10910, 34, 0, 45, "Subsubsection"],
Cell[314840, 10912, 91, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[314956, 10918, 56, 1, 40, "Input"],
Cell[315015, 10921, 123, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[315175, 10928, 62, 1, 40, "Input"],
Cell[315240, 10931, 129, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[315406, 10938, 62, 1, 40, "Input"],
Cell[315471, 10941, 153, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[315661, 10949, 69, 1, 40, "Input"],
Cell[315733, 10952, 170, 3, 27, "Message"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[315952, 10961, 48, 0, 45, "Subsubsection"],
Cell[316003, 10963, 110, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[316138, 10970, 56, 1, 40, "Input"],
Cell[316197, 10973, 111, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[316345, 10980, 62, 1, 40, "Input"],
Cell[316410, 10983, 130, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[316577, 10990, 61, 1, 40, "Input"],
Cell[316641, 10993, 150, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[316828, 11001, 62, 1, 40, "Input"],
Cell[316893, 11004, 131, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[317061, 11011, 62, 1, 40, "Input"],
Cell[317126, 11014, 114, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[317277, 11021, 62, 1, 40, "Input"],
Cell[317342, 11024, 112, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[317491, 11031, 62, 1, 40, "Input"],
Cell[317556, 11034, 115, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[317708, 11041, 62, 1, 40, "Input"],
Cell[317773, 11044, 110, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[317920, 11051, 63, 1, 40, "Input"],
Cell[317986, 11054, 101, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[318124, 11061, 62, 1, 40, "Input"],
Cell[318189, 11064, 106, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[318332, 11071, 62, 1, 40, "Input"],
Cell[318397, 11074, 107, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[318541, 11081, 62, 1, 40, "Input"],
Cell[318606, 11084, 93, 1, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[318736, 11090, 68, 1, 40, "Input"],
Cell[318807, 11093, 115, 2, 27, "Message"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[318971, 11101, 36, 0, 45, "Subsubsection"],
Cell[319010, 11103, 99, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[319134, 11109, 56, 1, 40, "Input"],
Cell[319193, 11112, 137, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[319367, 11120, 61, 1, 40, "Input"],
Cell[319431, 11123, 156, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[319624, 11131, 63, 1, 40, "Input"],
Cell[319690, 11134, 116, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[319843, 11141, 61, 1, 40, "Input"],
Cell[319907, 11144, 132, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[320076, 11151, 62, 1, 40, "Input"],
Cell[320141, 11154, 144, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[320322, 11162, 63, 1, 40, "Input"],
Cell[320388, 11165, 154, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[320579, 11173, 61, 1, 40, "Input"],
Cell[320643, 11176, 107, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[320787, 11183, 62, 1, 40, "Input"],
Cell[320852, 11186, 132, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[321021, 11193, 67, 1, 40, "Input"],
Cell[321091, 11196, 118, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[321246, 11203, 66, 1, 40, "Input"],
Cell[321315, 11206, 156, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[321508, 11214, 67, 1, 40, "Input"],
Cell[321578, 11217, 210, 3, 50, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[321825, 11225, 68, 1, 40, "Input"],
Cell[321896, 11228, 217, 4, 50, "Message"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[322162, 11238, 33, 0, 45, "Subsubsection"],
Cell[322198, 11240, 96, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[322319, 11246, 57, 1, 40, "Input"],
Cell[322379, 11249, 140, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[322556, 11257, 62, 1, 40, "Input"],
Cell[322621, 11260, 139, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[322797, 11268, 62, 1, 40, "Input"],
Cell[322862, 11271, 148, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[323047, 11279, 69, 1, 40, "Input"],
Cell[323119, 11282, 199, 3, 50, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[323355, 11290, 70, 1, 40, "Input"],
Cell[323428, 11293, 199, 3, 50, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[323664, 11301, 68, 1, 40, "Input"],
Cell[323735, 11304, 161, 3, 27, "Message"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[323945, 11313, 38, 0, 45, "Subsubsection"],
Cell[323986, 11315, 95, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[324106, 11321, 103, 2, 40, "Input"],
Cell[324212, 11325, 138, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[324387, 11333, 56, 1, 40, "Input"],
Cell[324446, 11336, 106, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[324589, 11343, 55, 1, 40, "Input"],
Cell[324647, 11346, 86, 1, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[324770, 11352, 54, 1, 40, "Input"],
Cell[324827, 11355, 127, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[324991, 11362, 55, 1, 40, "Input"],
Cell[325049, 11365, 109, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[325195, 11372, 58, 1, 40, "Input"],
Cell[325256, 11375, 88, 1, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[325381, 11381, 63, 1, 40, "Input"],
Cell[325447, 11384, 116, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[325600, 11391, 62, 1, 40, "Input"],
Cell[325665, 11394, 103, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[325805, 11401, 62, 1, 40, "Input"],
Cell[325870, 11404, 119, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[326026, 11411, 61, 1, 40, "Input"],
Cell[326090, 11414, 156, 3, 46, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[326283, 11422, 62, 1, 40, "Input"],
Cell[326348, 11425, 125, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[326510, 11432, 61, 1, 40, "Input"],
Cell[326574, 11435, 111, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[326722, 11442, 62, 1, 40, "Input"],
Cell[326787, 11445, 147, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[326971, 11453, 61, 1, 40, "Input"],
Cell[327035, 11456, 114, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[327186, 11463, 63, 1, 40, "Input"],
Cell[327252, 11466, 120, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[327409, 11473, 65, 1, 40, "Input"],
Cell[327477, 11476, 108, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[327622, 11483, 64, 1, 40, "Input"],
Cell[327689, 11486, 130, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[327856, 11493, 63, 1, 40, "Input"],
Cell[327922, 11496, 138, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[328097, 11504, 62, 1, 40, "Input"],
Cell[328162, 11507, 119, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[328318, 11514, 62, 1, 40, "Input"],
Cell[328383, 11517, 125, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[328545, 11524, 65, 1, 40, "Input"],
Cell[328613, 11527, 116, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[328766, 11534, 60, 1, 40, "Input"],
Cell[328829, 11537, 118, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[328984, 11544, 61, 1, 40, "Input"],
Cell[329048, 11547, 150, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[329235, 11555, 63, 1, 40, "Input"],
Cell[329301, 11558, 116, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[329454, 11565, 63, 1, 40, "Input"],
Cell[329520, 11568, 103, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[329660, 11575, 67, 1, 40, "Input"],
Cell[329730, 11578, 126, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[329893, 11585, 68, 1, 40, "Input"],
Cell[329964, 11588, 121, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[330122, 11595, 66, 1, 40, "Input"],
Cell[330191, 11598, 125, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[330353, 11605, 67, 1, 40, "Input"],
Cell[330423, 11608, 152, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[330612, 11616, 68, 1, 40, "Input"],
Cell[330683, 11619, 174, 3, 46, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[330894, 11627, 70, 1, 40, "Input"],
Cell[330967, 11630, 139, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[331143, 11638, 68, 1, 40, "Input"],
Cell[331214, 11641, 103, 2, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[331354, 11648, 75, 1, 40, "Input"],
Cell[331432, 11651, 140, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[331609, 11659, 72, 1, 40, "Input"],
Cell[331684, 11662, 146, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[331867, 11670, 81, 1, 40, "Input"],
Cell[331951, 11673, 160, 3, 27, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[332148, 11681, 80, 1, 40, "Input"],
Cell[332231, 11684, 178, 3, 46, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[332446, 11692, 75, 1, 40, "Input"],
Cell[332524, 11695, 281, 4, 83, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[332842, 11704, 234, 5, 103, "Input"],
Cell[333079, 11711, 103, 2, 27, "Message"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[333243, 11720, 59, 0, 44, "Subsection"],
Cell[333305, 11722, 171, 5, 86, "Text"],
Cell[333479, 11729, 229, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[333733, 11737, 106, 2, 61, "Input"],
Cell[333842, 11741, 40, 1, 38, "Output"]
}, Open  ]],
Cell[333897, 11745, 500, 9, 103, "Text"],

Cell[CellGroupData[{
Cell[334422, 11758, 102, 2, 61, "Input"],
Cell[334527, 11762, 45, 1, 38, "Output"]
}, Open  ]],
Cell[334587, 11766, 163, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[334775, 11773, 101, 2, 61, "Input"],
Cell[334879, 11777, 72, 1, 38, "Output"]
}, Open  ]],
Cell[334966, 11781, 150, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[335141, 11788, 97, 2, 61, "Input"],
Cell[335241, 11792, 40, 1, 38, "Output"]
}, Open  ]],
Cell[335296, 11796, 59, 0, 30, "Text"],
Cell[335358, 11798, 59, 1, 40, "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[335466, 11805, 27, 0, 52, "Section"],
Cell[335496, 11807, 334, 7, 67, "Text"],

Cell[CellGroupData[{
Cell[335855, 11818, 143, 2, 61, "Input"],
Cell[336001, 11822, 228, 3, 80, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[336278, 11831, 50, 0, 52, "Section"],
Cell[336331, 11833, 88, 1, 30, "Text",
  CellTags->"NHoldAll"],
Cell[336422, 11836, 100, 2, 61, "Input"],
Cell[336525, 11840, 88, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[336638, 11846, 67, 1, 54, "Input"],
Cell[336708, 11849, 76, 1, 47, "Output"]
}, Open  ]],
Cell[336799, 11853, 144, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[336968, 11860, 79, 1, 54, "Input"],
Cell[337050, 11863, 141, 2, 47, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[337228, 11870, 94, 2, 56, "Subsection"],
Cell[337325, 11874, 67, 0, 30, "Text"],
Cell[337395, 11876, 108, 2, 40, "Input"],
Cell[337506, 11880, 192, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[337723, 11888, 82, 1, 40, "Input"],
Cell[337808, 11891, 43, 1, 38, "Output"]
}, Open  ]],
Cell[337866, 11895, 203, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[338094, 11903, 83, 1, 40, "Input"],
Cell[338180, 11906, 71, 1, 38, "Output"]
}, Open  ]],
Cell[338266, 11910, 176, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[338467, 11917, 84, 1, 40, "Input"],
Cell[338554, 11920, 208, 3, 80, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[338823, 11930, 30, 0, 52, "Section"],
Cell[338856, 11932, 466, 8, 67, "Text",
  CellTags->"OneIdentity"],

Cell[CellGroupData[{
Cell[339347, 11944, 56, 0, 55, "Subsection"],
Cell[339406, 11946, 160, 4, 30, "Text",
  CellTags->"OneIdentity-Default"],

Cell[CellGroupData[{
Cell[339591, 11954, 41, 1, 40, "Input"],
Cell[339635, 11957, 279, 8, 27, "Print",
  CellTags->"Info3242474880-2863980"],
Cell[339917, 11967, 576, 16, 62, "Print",
  CellTags->"Info3242474880-2863980"]
}, Open  ]],
Cell[340508, 11986, 732, 13, 102, "Text"],

Cell[CellGroupData[{
Cell[341265, 12003, 275, 6, 82, "Input"],
Cell[341543, 12011, 52, 1, 55, "Output"]
}, Open  ]],
Cell[341610, 12015, 178, 4, 30, "Text"],

Cell[CellGroupData[{
Cell[341813, 12023, 357, 8, 125, "Input"],
Cell[342173, 12033, 59, 1, 55, "Output"]
}, Open  ]],
Cell[342247, 12037, 244, 4, 47, "Text"],

Cell[CellGroupData[{
Cell[342516, 12045, 374, 8, 125, "Input"],
Cell[342893, 12055, 74, 1, 55, "Output"]
}, Open  ]],
Cell[342982, 12059, 115, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[343122, 12066, 122, 3, 82, "Input"],
Cell[343247, 12071, 279, 8, 27, "Print",
  CellTags->"Info3242474882-9613789"],
Cell[343529, 12081, 575, 16, 62, "Print",
  CellTags->"Info3242474882-9613789"]
}, Open  ]],
Cell[344119, 12100, 288, 5, 47, "Text"],
Cell[344410, 12107, 408, 8, 47, "Text",
  CellTags->"OneIdentity-Default"],

Cell[CellGroupData[{
Cell[344843, 12119, 129, 3, 82, "Input"],
Cell[344975, 12124, 35, 1, 35, "Output"]
}, Open  ]],
Cell[345025, 12128, 366, 6, 65, "Text"],

Cell[CellGroupData[{
Cell[345416, 12138, 149, 3, 82, "Input"],
Cell[345568, 12143, 41, 1, 35, "Output"]
}, Open  ]],
Cell[345624, 12147, 360, 6, 65, "Text"],

Cell[CellGroupData[{
Cell[346009, 12157, 188, 3, 82, "Input"],
Cell[346200, 12162, 41, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[346290, 12169, 56, 0, 45, "Subsection"],
Cell[346349, 12171, 759, 14, 85, "Text",
  CellTags->"OneIdentity-Flat"],

Cell[CellGroupData[{
Cell[347133, 12189, 165, 3, 82, "Input"],
Cell[347301, 12194, 56, 1, 35, "Output"]
}, Open  ]],
Cell[347372, 12198, 388, 6, 65, "Text"],

Cell[CellGroupData[{
Cell[347785, 12208, 160, 3, 82, "Input"],
Cell[347948, 12213, 53, 1, 35, "Output"]
}, Open  ]],
Cell[348016, 12217, 240, 4, 47, "Text"],
Cell[348259, 12223, 167, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[348451, 12230, 40, 1, 40, "Input"],
Cell[348494, 12233, 374, 9, 50, "Print",
  CellTags->"Info3242474882-1460760"],
Cell[348871, 12244, 300, 8, 27, "Print",
  CellTags->"Info3242474882-1460760"]
}, Open  ]],
Cell[349186, 12255, 391, 9, 47, "Text"],

Cell[CellGroupData[{
Cell[349602, 12268, 92, 1, 40, "Input"],
Cell[349697, 12271, 56, 1, 35, "Output"]
}, Open  ]],
Cell[349768, 12275, 194, 4, 47, "Text"],

Cell[CellGroupData[{
Cell[349987, 12283, 167, 2, 60, "Input"],
Cell[350157, 12287, 62, 1, 35, "Output"]
}, Open  ]],
Cell[350234, 12291, 94, 2, 30, "Text"],
Cell[350331, 12295, 65, 1, 40, "Input"],
Cell[350399, 12298, 1192, 40, 65, "Text"],

Cell[CellGroupData[{
Cell[351616, 12342, 190, 4, 105, "Input"],
Cell[351809, 12348, 54, 1, 35, "Output"]
}, Open  ]],
Cell[351878, 12352, 974, 34, 102, "Text"],

Cell[CellGroupData[{
Cell[352877, 12390, 160, 4, 105, "Input"],
Cell[353040, 12396, 66, 1, 35, "Output"]
}, Open  ]],
Cell[353121, 12400, 313, 5, 47, "Text"],

Cell[CellGroupData[{
Cell[353459, 12409, 166, 4, 105, "Input"],
Cell[353628, 12415, 50, 1, 35, "Output"]
}, Open  ]],
Cell[353693, 12419, 525, 8, 85, "Text"],

Cell[CellGroupData[{
Cell[354243, 12431, 179, 4, 105, "Input"],
Cell[354425, 12437, 55, 1, 35, "Output"]
}, Open  ]],
Cell[354495, 12441, 758, 17, 257, "Text"],

Cell[CellGroupData[{
Cell[355278, 12462, 204, 5, 82, "Input"],
Cell[355485, 12469, 370, 13, 27, "Print"],
Cell[355858, 12484, 370, 13, 27, "Print"],
Cell[356231, 12499, 370, 13, 27, "Print"],
Cell[356604, 12514, 362, 13, 27, "Print"],
Cell[356969, 12529, 362, 13, 27, "Print"],
Cell[357334, 12544, 362, 13, 27, "Print"],
Cell[357699, 12559, 362, 13, 27, "Print"],
Cell[358064, 12574, 354, 13, 27, "Print"],
Cell[358421, 12589, 354, 13, 27, "Print"],
Cell[358778, 12604, 354, 13, 27, "Print"],
Cell[359135, 12619, 51, 1, 35, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[359247, 12627, 56, 0, 52, "Section"],
Cell[359306, 12629, 391, 7, 85, "Text",
  CellTags->"Optional"],

Cell[CellGroupData[{
Cell[359722, 12640, 44, 0, 56, "Subsection"],
Cell[359769, 12642, 89, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[359883, 12648, 221, 5, 80, "Input"],
Cell[360107, 12655, 57, 1, 37, "Output"]
}, Open  ]],
Cell[360179, 12659, 249, 4, 50, "Text"],

Cell[CellGroupData[{
Cell[360453, 12667, 37, 1, 40, "Input"],
Cell[360493, 12670, 57, 1, 37, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[360599, 12677, 44, 0, 44, "Subsection"],
Cell[360646, 12679, 312, 5, 50, "Text"],

Cell[CellGroupData[{
Cell[360983, 12688, 194, 3, 80, "Input"],
Cell[361180, 12693, 81, 1, 37, "Output"]
}, Open  ]],
Cell[361276, 12697, 227, 4, 50, "Text"],

Cell[CellGroupData[{
Cell[361528, 12705, 37, 1, 40, "Input"],
Cell[361568, 12708, 63, 1, 27, "Print",
  CellTags->"Info3285568764-5243668"],
Cell[361634, 12711, 443, 13, 30, "Print",
  CellTags->"Info3285568764-5243668"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[362126, 12730, 44, 0, 44, "Subsection"],
Cell[362173, 12732, 324, 6, 50, "Text"],

Cell[CellGroupData[{
Cell[362522, 12742, 201, 3, 80, "Input"],
Cell[362726, 12747, 101, 2, 37, "Output"]
}, Open  ]],
Cell[362842, 12752, 232, 5, 50, "Text"],

Cell[CellGroupData[{
Cell[363099, 12761, 37, 1, 40, "Input"],
Cell[363139, 12764, 63, 1, 27, "Print",
  CellTags->"Info3285569129-8870368"],
Cell[363205, 12767, 447, 13, 30, "Print",
  CellTags->"Info3285569129-8870368"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[363701, 12786, 54, 0, 44, "Subsection"],
Cell[363758, 12788, 359, 9, 66, "Text"],
Cell[364120, 12799, 156, 3, 82, "Input"],
Cell[364279, 12804, 108, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[364412, 12811, 80, 2, 61, "Input"],
Cell[364495, 12815, 40, 1, 38, "Output"],
Cell[364538, 12818, 40, 1, 38, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[364639, 12826, 35, 0, 52, "Section"],

Cell[CellGroupData[{
Cell[364699, 12830, 37, 0, 56, "Subsection"],
Cell[364739, 12832, 287, 7, 48, "Text",
  CellTags->"Options"],

Cell[CellGroupData[{
Cell[365051, 12843, 45, 1, 40, "Input"],
Cell[365099, 12846, 172, 3, 50, "Print",
  CellTags->"Info3242474884-6448585"]
}, Open  ]],
Cell[365286, 12852, 203, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[365514, 12860, 278, 5, 103, "Input"],
Cell[365795, 12867, 38, 1, 38, "Output"],
Cell[365836, 12870, 38, 1, 38, "Output"],
Cell[365877, 12873, 38, 1, 38, "Output"]
}, Open  ]],
Cell[365930, 12877, 90, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[366045, 12883, 136, 2, 40, "Input"],
Cell[366184, 12887, 38, 1, 38, "Output"]
}, Open  ]],
Cell[366237, 12891, 168, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[366430, 12898, 285, 5, 125, "Input"],
Cell[366718, 12905, 39, 1, 38, "Output"],
Cell[366760, 12908, 39, 1, 38, "Output"],
Cell[366802, 12911, 39, 1, 38, "Output"],
Cell[366844, 12914, 39, 1, 38, "Output"],
Cell[366886, 12917, 39, 1, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[366974, 12924, 44, 0, 44, "Subsection"],
Cell[367021, 12926, 474, 10, 85, "Text"],
Cell[367498, 12938, 92, 1, 40, "Input"],
Cell[367593, 12941, 95, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[367713, 12947, 396, 8, 103, "Input"],
Cell[368112, 12957, 46, 1, 38, "Output"],
Cell[368161, 12960, 121, 3, 38, "Output"],
Cell[368285, 12965, 121, 3, 38, "Output"],
Cell[368409, 12970, 121, 3, 38, "Output"]
}, Open  ]],
Cell[368545, 12976, 109, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[368679, 12983, 85, 1, 40, "Input"],
Cell[368767, 12986, 86, 1, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[368902, 12993, 52, 0, 44, "Subsection"],
Cell[368957, 12995, 426, 12, 105, "Text"],
Cell[369386, 13009, 606, 11, 231, "Input"],
Cell[369995, 13022, 127, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[370147, 13029, 232, 4, 82, "Input"],
Cell[370382, 13035, 107, 2, 38, "Output"],
Cell[370492, 13039, 110, 2, 38, "Output"],
Cell[370605, 13043, 109, 2, 38, "Output"]
}, Open  ]],
Cell[370729, 13048, 217, 4, 48, "Text"],
Cell[370949, 13054, 149, 3, 61, "Input"],
Cell[371101, 13059, 133, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[371259, 13066, 133, 3, 40, "Input"],
Cell[371395, 13071, 193, 3, 46, "Message"],
Cell[371591, 13076, 101, 2, 38, "Output"]
}, Open  ]],
Cell[371707, 13081, 379, 7, 86, "Text"],
Cell[372089, 13090, 642, 11, 231, "Input"],
Cell[372734, 13103, 158, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[372917, 13110, 538, 10, 146, "Input"],
Cell[373458, 13122, 107, 2, 38, "Output"],
Cell[373568, 13126, 110, 2, 38, "Output"],
Cell[373681, 13130, 109, 2, 38, "Output"],
Cell[373793, 13134, 111, 2, 38, "Output"],
Cell[373907, 13138, 107, 2, 38, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[374075, 13147, 27, 0, 52, "Section"],
Cell[374105, 13149, 82, 1, 30, "Text",
  CellTags->"Ordering"],

Cell[CellGroupData[{
Cell[374212, 13154, 46, 1, 40, "Input"],
Cell[374261, 13157, 549, 12, 114, "Print",
  CellTags->"Info3276836798-2710999"]
}, Open  ]],
Cell[374825, 13172, 62, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[374912, 13176, 181, 3, 61, "Input"],
Cell[375096, 13181, 61, 1, 38, "Output"]
}, Open  ]],
Cell[375172, 13185, 255, 4, 66, "Text"],

Cell[CellGroupData[{
Cell[375452, 13193, 92, 2, 61, "Input"],
Cell[375547, 13197, 320, 7, 38, "Output"],
Cell[375870, 13206, 320, 7, 38, "Output"]
}, Open  ]],
Cell[376205, 13216, 314, 5, 66, "Text"],

Cell[CellGroupData[{
Cell[376544, 13225, 49, 1, 40, "Input"],
Cell[376596, 13228, 46, 1, 38, "Output"]
}, Open  ]],
Cell[376657, 13232, 76, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[376758, 13236, 54, 1, 40, "Input"],
Cell[376815, 13239, 46, 1, 38, "Output"]
}, Open  ]],
Cell[376876, 13243, 214, 8, 30, "Text"],

Cell[CellGroupData[{
Cell[377115, 13255, 54, 1, 40, "Input"],
Cell[377172, 13258, 43, 1, 38, "Output"]
}, Open  ]],
Cell[377230, 13262, 278, 8, 48, "Text"],

Cell[CellGroupData[{
Cell[377533, 13274, 59, 1, 40, "Input"],
Cell[377595, 13277, 52, 1, 38, "Output"]
}, Open  ]],
Cell[377662, 13281, 168, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[377855, 13288, 62, 1, 40, "Input"],
Cell[377920, 13291, 49, 1, 38, "Output"]
}, Open  ]],
Cell[377984, 13295, 245, 4, 66, "Text"],

Cell[CellGroupData[{
Cell[378254, 13303, 64, 1, 40, "Input"],
Cell[378321, 13306, 61, 1, 38, "Output"]
}, Open  ]],
Cell[378397, 13310, 129, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[378551, 13317, 99, 2, 61, "Input"],
Cell[378653, 13321, 320, 7, 38, "Output"],
Cell[378976, 13330, 320, 7, 38, "Output"]
}, Open  ]],
Cell[379311, 13340, 160, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[379496, 13347, 180, 4, 61, "Input"],
Cell[379679, 13353, 61, 1, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[379789, 13360, 28, 0, 52, "Section"],
Cell[379820, 13362, 165, 4, 48, "Text",
  CellTags->"Orderless"],

Cell[CellGroupData[{
Cell[380010, 13370, 146, 3, 82, "Input"],
Cell[380159, 13375, 50, 1, 38, "Output"]
}, Open  ]],
Cell[380224, 13379, 163, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[380412, 13386, 50, 1, 40, "Input"],
Cell[380465, 13389, 51, 1, 38, "Output"]
}, Open  ]],
Cell[380531, 13393, 191, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[380747, 13401, 92, 2, 61, "Input"],
Cell[380842, 13405, 40, 1, 38, "Output"]
}, Open  ]],
Cell[380897, 13409, 440, 7, 85, "Text"],

Cell[CellGroupData[{
Cell[381362, 13420, 118, 2, 61, "Input"],
Cell[381483, 13424, 59, 1, 38, "Output"]
}, Open  ]],
Cell[381557, 13428, 585, 9, 103, "Text"],

Cell[CellGroupData[{
Cell[382167, 13441, 139, 2, 61, "Input"],
Cell[382309, 13445, 60, 1, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[382418, 13452, 24, 0, 52, "Section"],
Cell[382445, 13454, 74, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[382544, 13458, 65, 1, 40, "Input"],
Cell[382612, 13461, 113, 2, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[382762, 13468, 75, 1, 40, "Input"],
Cell[382840, 13471, 263, 4, 80, "Output"]
}, Open  ]],
Cell[383118, 13478, 188, 4, 48, "Text",
  CellTags->"Outer"],
Cell[383309, 13484, 291, 5, 87, "Output"],
Cell[383603, 13491, 59, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[383687, 13495, 228, 4, 61, "Input"],
Cell[383918, 13501, 147, 2, 59, "Output"]
}, Open  ]],
Cell[384080, 13506, 108, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[384213, 13513, 166, 4, 37, "Input"],
Cell[384382, 13519, 147, 2, 59, "Output"]
}, Open  ]],
Cell[384544, 13524, 94, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[384663, 13530, 114, 2, 40, "Input"],
Cell[384780, 13534, 1404, 38, 91, "Output"]
}, Open  ]],
Cell[386199, 13575, 97, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[386321, 13581, 105, 2, 40, "Input"],
Cell[386429, 13585, 795, 12, 208, "Output"]
}, Open  ]],
Cell[387239, 13600, 93, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[387357, 13606, 120, 2, 61, "Input"],
Cell[387480, 13610, 1180, 30, 91, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[388697, 13645, 120, 2, 61, "Input"],
Cell[388820, 13649, 1180, 30, 91, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[390049, 13685, 23, 0, 52, "Section"],
Cell[390075, 13687, 209, 5, 48, "Text",
  CellTags->"Part"],

Cell[CellGroupData[{
Cell[390309, 13696, 51, 1, 40, "Input"],
Cell[390363, 13699, 38, 1, 38, "Output"]
}, Open  ]],
Cell[390416, 13703, 109, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[390550, 13710, 59, 1, 40, "Input"],
Cell[390612, 13713, 38, 1, 38, "Output"]
}, Open  ]],
Cell[390665, 13717, 206, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[390896, 13725, 344, 6, 146, "Input"],
Cell[391243, 13733, 424, 10, 111, "Output"]
}, Open  ]],
Cell[391682, 13746, 339, 6, 66, "Text"],

Cell[CellGroupData[{
Cell[392046, 13756, 75, 1, 40, "Input"],
Cell[392124, 13759, 263, 8, 73, "Output"]
}, Open  ]],
Cell[392402, 13770, 128, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[392555, 13777, 54, 1, 40, "Input"],
Cell[392612, 13780, 49, 1, 38, "Output"]
}, Open  ]],
Cell[392676, 13784, 140, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[392841, 13791, 54, 1, 40, "Input"],
Cell[392898, 13794, 49, 1, 38, "Output"]
}, Open  ]],
Cell[392962, 13798, 804, 13, 158, "Text"],

Cell[CellGroupData[{
Cell[393791, 13815, 125, 2, 61, "Input"],
Cell[393919, 13819, 419, 10, 111, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[394375, 13834, 125, 2, 61, "Input"],
Cell[394503, 13838, 415, 10, 111, "Output"]
}, Open  ]],
Cell[394933, 13851, 116, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[395074, 13858, 70, 1, 40, "Input"],
Cell[395147, 13861, 351, 10, 111, "Output"]
}, Open  ]],
Cell[395513, 13874, 117, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[395655, 13881, 169, 3, 61, "Input"],
Cell[395827, 13886, 423, 10, 113, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[396299, 13902, 28, 0, 52, "Section"],
Cell[396330, 13904, 317, 7, 49, "Text"],

Cell[CellGroupData[{
Cell[396672, 13915, 47, 1, 40, "Input"],
Cell[396722, 13918, 1316, 22, 348, "Print",
  CellTags->"Info3242474896-7343620"]
}, Open  ]],
Cell[398053, 13943, 218, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[398296, 13951, 89, 2, 61, "Input"],
Cell[398388, 13955, 268, 4, 80, "Output"]
}, Open  ]],
Cell[398671, 13962, 99, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[398795, 13968, 53, 1, 40, "Input"],
Cell[398851, 13971, 347, 5, 101, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[399235, 13981, 54, 1, 40, "Input"],
Cell[399292, 13984, 129, 2, 59, "Output"]
}, Open  ]],
Cell[399436, 13989, 211, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[399672, 13997, 56, 1, 40, "Input"],
Cell[399731, 14000, 272, 4, 80, "Output"]
}, Open  ]],
Cell[400018, 14007, 191, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[400234, 14015, 56, 1, 40, "Input"],
Cell[400293, 14018, 272, 4, 80, "Output"]
}, Open  ]],
Cell[400580, 14025, 128, 3, 30, "Text"],
Cell[400711, 14030, 341, 6, 167, "Input"],

Cell[CellGroupData[{
Cell[401077, 14040, 78, 1, 40, "Input"],
Cell[401158, 14043, 1314, 32, 91, "Output"]
}, Open  ]],
Cell[402487, 14078, 125, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[402637, 14085, 92, 2, 61, "Input"],
Cell[402732, 14089, 113, 2, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[402882, 14096, 51, 1, 40, "Input"],
Cell[402936, 14099, 123, 2, 59, "Output"]
}, Open  ]],
Cell[403074, 14104, 903, 21, 265, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[404014, 14130, 27, 0, 52, "Section"],
Cell[404044, 14132, 379, 7, 66, "Text",
  CellTags->"Position"],

Cell[CellGroupData[{
Cell[404448, 14143, 263, 5, 111, "Input"],
Cell[404714, 14150, 77, 1, 38, "Output"]
}, Open  ]],
Cell[404806, 14154, 294, 5, 66, "Text"],

Cell[CellGroupData[{
Cell[405125, 14163, 166, 3, 82, "Input"],
Cell[405294, 14168, 39, 1, 38, "Output"],
Cell[405336, 14171, 42, 1, 47, "Output"],
Cell[405381, 14174, 43, 1, 38, "Output"]
}, Open  ]],
Cell[405439, 14178, 383, 6, 85, "Text"],

Cell[CellGroupData[{
Cell[405847, 14188, 52, 1, 40, "Input"],
Cell[405902, 14191, 166, 3, 65, "Output"]
}, Open  ]],
Cell[406083, 14197, 139, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[406247, 14204, 57, 1, 40, "Input"],
Cell[406307, 14207, 38, 1, 38, "Output"]
}, Open  ]],
Cell[406360, 14211, 124, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[406509, 14218, 52, 1, 40, "Input"],
Cell[406564, 14221, 36, 1, 38, "Output"]
}, Open  ]],
Cell[406615, 14225, 297, 7, 48, "Text"],

Cell[CellGroupData[{
Cell[406937, 14236, 54, 0, 56, "Subsection"],
Cell[406994, 14238, 338, 8, 48, "Text"],

Cell[CellGroupData[{
Cell[407357, 14250, 54, 1, 40, "Input"],
Cell[407414, 14253, 77, 1, 38, "Output"]
}, Open  ]],
Cell[407506, 14257, 139, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[407670, 14264, 57, 1, 40, "Input"],
Cell[407730, 14267, 56, 1, 38, "Output"]
}, Open  ]],
Cell[407801, 14271, 105, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[407931, 14278, 59, 1, 40, "Input"],
Cell[407993, 14281, 48, 1, 38, "Output"]
}, Open  ]],
Cell[408056, 14285, 154, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[408235, 14292, 62, 1, 40, "Input"],
Cell[408300, 14295, 60, 1, 38, "Output"]
}, Open  ]],
Cell[408375, 14299, 110, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[408510, 14306, 72, 1, 40, "Input"],
Cell[408585, 14309, 77, 1, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[408711, 14316, 57, 0, 44, "Subsection"],
Cell[408771, 14318, 87, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[408883, 14324, 192, 3, 82, "Input"],
Cell[409078, 14329, 111, 2, 38, "Output"]
}, Open  ]],
Cell[409204, 14334, 91, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[409320, 14340, 52, 1, 40, "Input"],
Cell[409375, 14343, 74, 1, 38, "Output"]
}, Open  ]],
Cell[409464, 14347, 315, 7, 48, "Text"],

Cell[CellGroupData[{
Cell[409804, 14358, 85, 1, 40, "Input"],
Cell[409892, 14361, 69, 1, 38, "Output"]
}, Open  ]],
Cell[409976, 14365, 155, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[410156, 14372, 86, 1, 40, "Input"],
Cell[410245, 14375, 111, 2, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[410405, 14383, 34, 0, 44, "Subsection"],
Cell[410442, 14385, 640, 21, 66, "Text"],

Cell[CellGroupData[{
Cell[411107, 14410, 53, 1, 40, "Input"],
Cell[411163, 14413, 87, 1, 38, "Output"]
}, Open  ]],
Cell[411265, 14417, 344, 6, 66, "Text"],

Cell[CellGroupData[{
Cell[411634, 14427, 69, 1, 40, "Input"],
Cell[411706, 14430, 36, 1, 38, "Output"]
}, Open  ]],
Cell[411757, 14434, 266, 5, 49, "Text"],

Cell[CellGroupData[{
Cell[412048, 14443, 133, 2, 61, "Input"],
Cell[412184, 14447, 51, 1, 38, "Output"]
}, Open  ]],
Cell[412250, 14451, 304, 6, 67, "Text"],

Cell[CellGroupData[{
Cell[412579, 14461, 82, 1, 40, "Input"],
Cell[412664, 14464, 36, 1, 38, "Output"]
}, Open  ]],
Cell[412715, 14468, 208, 6, 53, "Subsubsection"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[412972, 14480, 37, 0, 52, "Section"],
Cell[413012, 14482, 448, 11, 66, "Text",
  CellTags->"Pattern"],
Cell[413463, 14495, 221, 4, 48, "Text"],
Cell[413687, 14501, 80, 1, 40, "Input"],
Cell[413770, 14504, 174, 5, 30, "Text"],

Cell[CellGroupData[{
Cell[413969, 14513, 55, 1, 41, "Input"],
Cell[414027, 14516, 64, 1, 38, "Output"]
}, Open  ]],
Cell[414106, 14520, 147, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[414278, 14527, 48, 1, 41, "Input"],
Cell[414329, 14530, 49, 1, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[414415, 14536, 55, 1, 41, "Input"],
Cell[414473, 14539, 56, 1, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[414578, 14546, 64, 0, 52, "Section"],
Cell[414645, 14548, 374, 9, 66, "Text",
  CellTags->"PatternTest"],

Cell[CellGroupData[{
Cell[415044, 14561, 176, 3, 88, "Input"],
Cell[415223, 14566, 80, 1, 47, "Output"]
}, Open  ]],
Cell[415318, 14570, 116, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[415459, 14577, 183, 3, 88, "Input"],
Cell[415645, 14582, 82, 1, 47, "Output"]
}, Open  ]],
Cell[415742, 14586, 137, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[415904, 14593, 213, 4, 88, "Input"],
Cell[416120, 14599, 79, 1, 47, "Output"]
}, Open  ]],
Cell[416214, 14603, 389, 8, 66, "Text"],

Cell[CellGroupData[{
Cell[416628, 14615, 200, 3, 88, "Input"],
Cell[416831, 14620, 89, 1, 47, "Output"]
}, Open  ]],
Cell[416935, 14624, 169, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[417129, 14631, 215, 4, 88, "Input"],
Cell[417347, 14637, 87, 1, 47, "Output"]
}, Open  ]],
Cell[417449, 14641, 154, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[417628, 14648, 159, 3, 82, "Input"],
Cell[417790, 14653, 43, 1, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[417882, 14660, 25, 0, 52, "Section"],
Cell[417910, 14662, 1054, 25, 179, "Text",
  CellTags->"Random"],
Cell[418967, 14689, 109, 2, 57, "Input"],
Cell[419079, 14693, 193, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[419297, 14701, 60, 1, 40, "Input"],
Cell[419360, 14704, 54, 1, 38, "Output"]
}, Open  ]],
Cell[419429, 14708, 147, 3, 48, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[419613, 14716, 30, 0, 52, "Section"],

Cell[CellGroupData[{
Cell[419668, 14720, 49, 1, 40, "Input"],
Cell[419720, 14723, 476, 11, 70, "Print",
  CellTags->"Info3242474897-2101131"]
}, Open  ]],
Cell[420211, 14737, 126, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[420362, 14744, 66, 1, 40, "Input"],
Cell[420431, 14747, 53, 1, 50, "Output"]
}, Open  ]],
Cell[420499, 14751, 91, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[420615, 14757, 54, 1, 40, "Input"],
Cell[420672, 14760, 69, 1, 37, "Output"]
}, Open  ]],
Cell[420756, 14764, 134, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[420915, 14771, 64, 1, 40, "Input"],
Cell[420982, 14774, 39, 1, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[421058, 14780, 92, 1, 82, "Input"],
Cell[421153, 14783, 35, 1, 35, "Output"]
}, Open  ]],
Cell[421203, 14787, 227, 4, 47, "Text"],

Cell[CellGroupData[{
Cell[421455, 14795, 64, 1, 40, "Input"],
Cell[421522, 14798, 67, 1, 50, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[421638, 14805, 24, 0, 52, "Section"],
Cell[421665, 14807, 486, 9, 105, "Text",
  CellTags->"Range"],

Cell[CellGroupData[{
Cell[422176, 14820, 56, 1, 40, "Input"],
Cell[422235, 14823, 184, 3, 50, "Output"]
}, Open  ]],
Cell[422434, 14829, 68, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[422527, 14833, 54, 1, 40, "Input"],
Cell[422584, 14836, 117, 2, 50, "Output"]
}, Open  ]],
Cell[422716, 14841, 479, 7, 65, "Text"],

Cell[CellGroupData[{
Cell[423220, 14852, 109, 2, 60, "Input"],
Cell[423332, 14856, 118, 2, 37, "Output"]
}, Open  ]],
Cell[423465, 14861, 58, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[423548, 14865, 60, 1, 40, "Input"],
Cell[423611, 14868, 106, 2, 35, "Output"]
}, Open  ]],
Cell[423732, 14873, 616, 12, 85, "Text"],

Cell[CellGroupData[{
Cell[424373, 14889, 151, 3, 40, "Input"],
Cell[424527, 14894, 125, 2, 55, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[424701, 14902, 64, 0, 52, "Section"],
Cell[424768, 14904, 402, 7, 67, "Text",
  CellTags->"Repeated RepeatedNull"],

Cell[CellGroupData[{
Cell[425195, 14915, 221, 4, 82, "Input"],
Cell[425419, 14921, 561, 15, 37, "Output"]
}, Open  ]],
Cell[425995, 14939, 303, 5, 48, "Text"],

Cell[CellGroupData[{
Cell[426323, 14948, 222, 4, 82, "Input"],
Cell[426548, 14954, 651, 17, 37, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[427248, 14977, 26, 0, 52, "Section"],
Cell[427277, 14979, 529, 10, 122, "Text",
  CellTags->"Replace"],

Cell[CellGroupData[{
Cell[427831, 14993, 201, 3, 82, "Input"],
Cell[428035, 14998, 78, 1, 38, "Output"]
}, Open  ]],
Cell[428128, 15002, 359, 8, 66, "Text"],

Cell[CellGroupData[{
Cell[428512, 15014, 90, 1, 40, "Input"],
Cell[428605, 15017, 105, 2, 38, "Output"]
}, Open  ]],
Cell[428725, 15022, 86, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[428836, 15028, 87, 1, 40, "Input"],
Cell[428926, 15031, 78, 1, 38, "Output"]
}, Open  ]],
Cell[429019, 15035, 207, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[429251, 15043, 90, 1, 40, "Input"],
Cell[429344, 15046, 84, 1, 38, "Output"]
}, Open  ]],
Cell[429443, 15050, 150, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[429618, 15057, 90, 1, 40, "Input"],
Cell[429711, 15060, 84, 1, 38, "Output"]
}, Open  ]],
Cell[429810, 15064, 149, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[429984, 15071, 102, 2, 40, "Input"],
Cell[430089, 15075, 84, 1, 38, "Output"]
}, Open  ]],
Cell[430188, 15079, 353, 8, 48, "Text"],

Cell[CellGroupData[{
Cell[430566, 15091, 123, 3, 40, "Input"],
Cell[430692, 15096, 53, 1, 38, "Output"]
}, Open  ]],
Cell[430760, 15100, 727, 14, 140, "Text"],

Cell[CellGroupData[{
Cell[431512, 15118, 155, 3, 40, "Input"],
Cell[431670, 15123, 90, 1, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[431797, 15129, 76, 0, 56, "Subsection"],
Cell[431876, 15131, 473, 7, 103, "Text"],
Cell[432352, 15140, 275, 5, 103, "Input"],

Cell[CellGroupData[{
Cell[432652, 15149, 65, 1, 40, "Input"],
Cell[432720, 15152, 40, 1, 38, "Output"]
}, Open  ]],
Cell[432775, 15156, 1126, 17, 251, "Text"],

Cell[CellGroupData[{
Cell[433926, 15177, 141, 3, 40, "Input"],
Cell[434070, 15182, 35, 1, 29, "Print"],
Cell[434108, 15185, 39, 1, 29, "Print"],
Cell[434150, 15188, 35, 1, 29, "Print"],
Cell[434188, 15191, 46, 1, 29, "Print"],
Cell[434237, 15194, 57, 1, 29, "Print"],
Cell[434297, 15197, 58, 1, 38, "Output"]
}, Open  ]],
Cell[434370, 15201, 134, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[434529, 15208, 153, 2, 60, "Input"],
Cell[434685, 15212, 75, 1, 53, "Output"]
}, Open  ]],
Cell[434775, 15216, 246, 7, 48, "Text"],

Cell[CellGroupData[{
Cell[435046, 15227, 128, 2, 60, "Input"],
Cell[435177, 15231, 76, 1, 53, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[435302, 15238, 34, 0, 44, "Subsection"],
Cell[435339, 15240, 323, 5, 66, "Text"],

Cell[CellGroupData[{
Cell[435687, 15249, 161, 3, 40, "Input"],
Cell[435851, 15254, 34, 1, 29, "Print"],
Cell[435888, 15257, 35, 1, 29, "Print"],
Cell[435926, 15260, 35, 1, 29, "Print"],
Cell[435964, 15263, 39, 1, 29, "Print"],
Cell[436006, 15266, 35, 1, 29, "Print"],
Cell[436044, 15269, 34, 1, 29, "Print"],
Cell[436081, 15272, 38, 1, 29, "Print"],
Cell[436122, 15275, 35, 1, 29, "Print"],
Cell[436160, 15278, 46, 1, 29, "Print"],
Cell[436209, 15281, 57, 1, 29, "Print"],
Cell[436269, 15284, 58, 1, 38, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[436388, 15292, 46, 0, 52, "Section"],
Cell[436437, 15294, 113, 1, 30, "Text",
  CellTags->"ReplaceAll;ReplaceRepeated"],

Cell[CellGroupData[{
Cell[436575, 15299, 160, 3, 82, "Input"],
Cell[436738, 15304, 44, 1, 38, "Output"]
}, Open  ]],
Cell[436797, 15308, 98, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[436920, 15314, 42, 1, 40, "Input"],
Cell[436965, 15317, 49, 1, 38, "Output"]
}, Open  ]],
Cell[437029, 15321, 359, 8, 48, "Text"],

Cell[CellGroupData[{
Cell[437413, 15333, 74, 1, 54, "Input"],
Cell[437490, 15336, 44, 1, 55, "Output"]
}, Open  ]],
Cell[437549, 15340, 253, 5, 48, "Text"],

Cell[CellGroupData[{
Cell[437827, 15349, 80, 1, 40, "Input"],
Cell[437910, 15352, 44, 1, 38, "Output"]
}, Open  ]],
Cell[437969, 15356, 177, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[438171, 15364, 138, 2, 40, "Input"],
Cell[438312, 15368, 72, 1, 38, "Output"]
}, Open  ]],
Cell[438399, 15372, 315, 7, 48, "Text"],

Cell[CellGroupData[{
Cell[438739, 15383, 149, 2, 60, "Input"],
Cell[438891, 15387, 76, 1, 53, "Output"]
}, Open  ]],
Cell[438982, 15391, 237, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[439244, 15399, 119, 2, 40, "Input"],
Cell[439366, 15403, 90, 1, 38, "Output"]
}, Open  ]],
Cell[439471, 15407, 206, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[439702, 15415, 118, 2, 40, "Input"],
Cell[439823, 15419, 125, 2, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[439985, 15426, 76, 0, 56, "Subsection"],
Cell[440064, 15428, 303, 5, 66, "Text"],

Cell[CellGroupData[{
Cell[440392, 15437, 171, 3, 61, "Input"],
Cell[440566, 15442, 57, 1, 29, "Print"],
Cell[440626, 15445, 34, 1, 29, "Print"],
Cell[440663, 15448, 39, 1, 29, "Print"],
Cell[440705, 15451, 35, 1, 29, "Print"],
Cell[440743, 15454, 35, 1, 29, "Print"],
Cell[440781, 15457, 46, 1, 29, "Print"],
Cell[440830, 15460, 38, 1, 29, "Print"],
Cell[440871, 15463, 35, 1, 29, "Print"],
Cell[440909, 15466, 34, 1, 29, "Print"],
Cell[440946, 15469, 35, 1, 29, "Print"],
Cell[440984, 15472, 58, 1, 38, "Output"]
}, Open  ]],
Cell[441057, 15476, 139, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[441221, 15483, 128, 2, 60, "Input"],
Cell[441352, 15487, 76, 1, 53, "Output"]
}, Open  ]],
Cell[441443, 15491, 216, 6, 30, "Text"],

Cell[CellGroupData[{
Cell[441684, 15501, 153, 2, 60, "Input"],
Cell[441840, 15505, 75, 1, 53, "Output"]
}, Open  ]],
Cell[441930, 15509, 350, 7, 66, "Text"],

Cell[CellGroupData[{
Cell[442305, 15520, 171, 4, 62, "Input"],
Cell[442479, 15526, 891, 29, 60, "Output"]
}, Open  ]],
Cell[443385, 15558, 482, 11, 66, "Text"],

Cell[CellGroupData[{
Cell[443892, 15573, 212, 4, 62, "Input"],
Cell[444107, 15579, 1816, 46, 146, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[445984, 15632, 30, 0, 52, "Section"],
Cell[446017, 15634, 187, 6, 31, "Text"],
Cell[446207, 15642, 167, 3, 61, "Input"],
Cell[446377, 15647, 109, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[446511, 15654, 214, 4, 103, "Input"],
Cell[446728, 15660, 115, 2, 38, "Output"]
}, Open  ]],
Cell[446858, 15665, 73, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[446956, 15669, 58, 1, 40, "Input"],
Cell[447017, 15672, 115, 2, 38, "Output"]
}, Open  ]],
Cell[447147, 15677, 116, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[447288, 15684, 140, 2, 61, "Input"],
Cell[447431, 15688, 73, 1, 55, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[447541, 15694, 67, 1, 40, "Input"],
Cell[447611, 15697, 78, 1, 60, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[447738, 15704, 42, 0, 52, "Section"],
Cell[447783, 15706, 235, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[448043, 15714, 124, 2, 61, "Input"],
Cell[448170, 15718, 61, 1, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[448268, 15724, 81, 1, 40, "Input"],
Cell[448352, 15727, 61, 1, 38, "Output"]
}, Open  ]],
Cell[448428, 15731, 246, 4, 66, "Text"],

Cell[CellGroupData[{
Cell[448699, 15739, 329, 5, 146, "Input"],
Cell[449031, 15746, 1960, 54, 180, "Output"]
}, Open  ]],
Cell[451006, 15803, 99, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[451130, 15809, 82, 1, 40, "Input"],
Cell[451215, 15812, 1960, 54, 180, "Output"]
}, Open  ]],
Cell[453190, 15869, 122, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[453337, 15876, 143, 2, 60, "Input"],
Cell[453483, 15880, 38, 1, 35, "Output"]
}, Open  ]],
Cell[453536, 15884, 109, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[453670, 15891, 70, 1, 40, "Input"],
Cell[453743, 15894, 1960, 54, 180, "Output"]
}, Open  ]],
Cell[455718, 15951, 97, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[455840, 15957, 73, 1, 40, "Input"],
Cell[455916, 15960, 1960, 54, 180, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[457925, 16020, 79, 2, 52, "Section"],
Cell[458007, 16024, 279, 5, 48, "Text",
  CellTags->"Rule;RuleDelayed"],

Cell[CellGroupData[{
Cell[458311, 16033, 185, 3, 62, "Input"],
Cell[458499, 16038, 110, 2, 38, "Output"]
}, Open  ]],
Cell[458624, 16043, 333, 6, 66, "Text"],
Cell[458960, 16051, 118, 2, 61, "Input"],

Cell[CellGroupData[{
Cell[459103, 16057, 104, 2, 56, "Input"],
Cell[459210, 16061, 78, 1, 50, "Output"]
}, Open  ]],
Cell[459303, 16065, 350, 6, 66, "Text"],

Cell[CellGroupData[{
Cell[459678, 16075, 173, 3, 61, "Input"],
Cell[459854, 16080, 77, 1, 38, "Output"]
}, Open  ]],
Cell[459946, 16084, 518, 8, 103, "Text"],

Cell[CellGroupData[{
Cell[460489, 16096, 175, 3, 61, "Input"],
Cell[460667, 16101, 82, 1, 38, "Output"]
}, Open  ]],
Cell[460764, 16105, 268, 5, 48, "Text"],

Cell[CellGroupData[{
Cell[461057, 16114, 185, 3, 61, "Input"],
Cell[461245, 16119, 82, 1, 38, "Output"]
}, Open  ]],
Cell[461342, 16123, 348, 6, 66, "Text"],

Cell[CellGroupData[{
Cell[461715, 16133, 85, 1, 45, "Input"],
Cell[461803, 16136, 111, 2, 54, "Output"]
}, Open  ]],
Cell[461929, 16141, 623, 12, 103, "Text"],

Cell[CellGroupData[{
Cell[462577, 16157, 127, 2, 66, "Input"],
Cell[462707, 16161, 91, 1, 47, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[462847, 16168, 23, 0, 52, "Section"],
Cell[462873, 16170, 325, 6, 50, "Text",
  CellTags->"Scan"],
Cell[463201, 16178, 177, 3, 80, "Input"],
Cell[463381, 16183, 192, 4, 30, "Text"],

Cell[CellGroupData[{
Cell[463598, 16191, 37, 1, 40, "Input"],
Cell[463638, 16194, 63, 1, 27, "Print",
  CellTags->"Info3242474919-8383725"],
Cell[463704, 16197, 445, 13, 30, "Print",
  CellTags->"Info3242474919-8383725"]
}, Open  ]],
Cell[464164, 16213, 141, 3, 30, "Text"],
Cell[464308, 16218, 142, 2, 60, "Input"],

Cell[CellGroupData[{
Cell[464475, 16224, 37, 1, 40, "Input"],
Cell[464515, 16227, 63, 1, 27, "Print",
  CellTags->"Info3242474919-9355181"],
Cell[464581, 16230, 627, 19, 135, "Print",
  CellTags->"Info3242474919-9355181"]
}, Open  ]],
Cell[465223, 16252, 338, 6, 50, "Text"],
Cell[465564, 16260, 155, 3, 60, "Input"],

Cell[CellGroupData[{
Cell[465744, 16267, 37, 1, 40, "Input"],
Cell[465784, 16270, 63, 1, 27, "Print",
  CellTags->"Info3242474920-7316245"],
Cell[465850, 16273, 627, 19, 135, "Print",
  CellTags->"Info3242474920-7316245"]
}, Open  ]],
Cell[466492, 16295, 112, 3, 30, "Text"],
Cell[466607, 16300, 177, 3, 80, "Input"],

Cell[CellGroupData[{
Cell[466809, 16307, 37, 1, 40, "Input"],
Cell[466849, 16310, 63, 1, 27, "Print",
  CellTags->"Info3242474920-3777955"],
Cell[466915, 16313, 591, 17, 105, "Print",
  CellTags->"Info3242474920-3777955"]
}, Open  ]],
Cell[467521, 16333, 495, 10, 67, "Text"],
Cell[468019, 16345, 120, 2, 60, "Input"],

Cell[CellGroupData[{
Cell[468164, 16351, 37, 1, 40, "Input"],
Cell[468204, 16354, 63, 1, 27, "Print",
  CellTags->"Info3242474920-7649147"],
Cell[468270, 16357, 720, 23, 207, "Print",
  CellTags->"Info3242474920-7649147"]
}, Open  ]],

Cell[CellGroupData[{
Cell[469027, 16385, 34, 0, 55, "Subsection"],
Cell[469064, 16387, 341, 6, 50, "Text"],
Cell[469408, 16395, 165, 3, 60, "Input"],

Cell[CellGroupData[{
Cell[469598, 16402, 37, 1, 40, "Input"],
Cell[469638, 16405, 63, 1, 27, "Print",
  CellTags->"Info3242474920-1486452"],
Cell[469704, 16408, 903, 29, 325, "Print",
  CellTags->"Info3242474920-1486452"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[470668, 16444, 27, 0, 52, "Section"],
Cell[470698, 16446, 536, 9, 85, "Text",
  CellTags->"Sequence"],

Cell[CellGroupData[{
Cell[471259, 16459, 189, 3, 82, "Input"],
Cell[471451, 16464, 62, 1, 35, "Output"]
}, Open  ]],
Cell[471528, 16468, 426, 9, 65, "Text"],

Cell[CellGroupData[{
Cell[471979, 16481, 68, 1, 40, "Input"],
Cell[472050, 16484, 49, 1, 35, "Output"]
}, Open  ]],
Cell[472114, 16488, 197, 4, 47, "Text"],

Cell[CellGroupData[{
Cell[472336, 16496, 85, 1, 40, "Input"],
Cell[472424, 16499, 61, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[472534, 16506, 31, 0, 52, "Section"],
Cell[472568, 16508, 103, 1, 30, "Text",
  CellTags->"SequenceHold"],
Cell[472674, 16511, 297, 5, 67, "Text"],

Cell[CellGroupData[{
Cell[472996, 16520, 137, 2, 61, "Input"],
Cell[473136, 16524, 52, 1, 38, "Output"]
}, Open  ]],
Cell[473203, 16528, 226, 4, 67, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[473466, 16537, 25, 0, 52, "Section"],
Cell[473494, 16539, 365, 9, 67, "Text"],

Cell[CellGroupData[{
Cell[473884, 16552, 113, 2, 62, "Input"],
Cell[474000, 16556, 318, 8, 53, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[474355, 16569, 59, 1, 41, "Input"],
Cell[474417, 16572, 404, 10, 50, "Output"]
}, Open  ]],
Cell[474836, 16585, 380, 6, 85, "Text"],

Cell[CellGroupData[{
Cell[475241, 16595, 69, 1, 40, "Input"],
Cell[475313, 16598, 800, 22, 68, "Output"]
}, Open  ]],
Cell[476128, 16623, 73, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[476226, 16627, 71, 1, 40, "Input"],
Cell[476300, 16630, 461, 12, 51, "Output"]
}, Open  ]],
Cell[476776, 16645, 115, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[476916, 16652, 83, 1, 40, "Input"],
Cell[477002, 16655, 576, 16, 51, "Output"]
}, Open  ]],
Cell[477593, 16674, 460, 8, 66, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[478090, 16687, 51, 0, 52, "Section"],
Cell[478144, 16689, 236, 4, 70, "Text"],

Cell[CellGroupData[{
Cell[478405, 16697, 230, 4, 82, "Input"],
Cell[478638, 16703, 144, 2, 37, "Output"]
}, Open  ]],
Cell[478797, 16708, 234, 5, 70, "Text"],
Cell[479034, 16715, 103, 2, 40, "Input"],
Cell[479140, 16719, 183, 4, 30, "Text"],

Cell[CellGroupData[{
Cell[479348, 16727, 116, 3, 82, "Input"],
Cell[479467, 16732, 46, 1, 37, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[479550, 16738, 126, 3, 80, "Input"],
Cell[479679, 16743, 74, 1, 37, "Output"]
}, Open  ]],
Cell[479768, 16747, 141, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[479934, 16754, 177, 3, 60, "Input"],
Cell[480114, 16759, 112, 2, 37, "Output"]
}, Open  ]],
Cell[480241, 16764, 497, 8, 67, "Text"],

Cell[CellGroupData[{
Cell[480763, 16776, 102, 2, 60, "Input"],
Cell[480868, 16780, 72, 1, 37, "Output"]
}, Open  ]],
Cell[480955, 16784, 321, 5, 50, "Text"],

Cell[CellGroupData[{
Cell[481301, 16793, 153, 3, 82, "Input"],
Cell[481457, 16798, 56, 1, 37, "Output"]
}, Open  ]],
Cell[481528, 16802, 135, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[481688, 16809, 44, 1, 40, "Input"],
Cell[481735, 16812, 68, 1, 27, "Print",
  CellTags->"Info3242474922-7671367"],
Cell[481806, 16815, 456, 13, 30, "Print",
  CellTags->"Info3242474922-7671367"]
}, Open  ]],

Cell[CellGroupData[{
Cell[482299, 16833, 44, 1, 40, "Input"],
Cell[482346, 16836, 68, 1, 27, "Print",
  CellTags->"Info3242474922-1117472"],
Cell[482417, 16839, 443, 13, 30, "Print",
  CellTags->"Info3242474922-1117472"]
}, Open  ]],
Cell[482875, 16855, 609, 9, 87, "Text"],
Cell[483487, 16866, 163, 3, 82, "Input"],
Cell[483653, 16871, 208, 4, 82, "Input"],
Cell[483864, 16877, 240, 4, 50, "Text"],

Cell[CellGroupData[{
Cell[484129, 16885, 147, 3, 80, "Input"],
Cell[484279, 16890, 48, 1, 37, "Output"]
}, Open  ]],
Cell[484342, 16894, 156, 3, 50, "Text"],

Cell[CellGroupData[{
Cell[484523, 16901, 96, 2, 60, "Input"],
Cell[484622, 16905, 81, 1, 37, "Output"]
}, Open  ]],
Cell[484718, 16909, 323, 7, 30, "Text"],

Cell[CellGroupData[{
Cell[485066, 16920, 82, 1, 55, "Subsection"],
Cell[485151, 16923, 422, 7, 67, "Text"],
Cell[485576, 16932, 153, 3, 80, "Input"],

Cell[CellGroupData[{
Cell[485754, 16939, 39, 1, 40, "Input"],
Cell[485796, 16942, 46, 1, 35, "Output"]
}, Open  ]],
Cell[485857, 16946, 801, 16, 85, "Text"],
Cell[486661, 16964, 111, 2, 60, "Input"],

Cell[CellGroupData[{
Cell[486797, 16970, 39, 1, 40, "Input"],
Cell[486839, 16973, 47, 1, 50, "Output"]
}, Open  ]],
Cell[486901, 16977, 218, 4, 50, "Text"],
Cell[487122, 16983, 206, 5, 122, "Input"],

Cell[CellGroupData[{
Cell[487353, 16992, 63, 1, 40, "Input"],
Cell[487419, 16995, 51, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[487519, 17002, 45, 0, 45, "Subsection"],
Cell[487567, 17004, 146, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[487738, 17011, 129, 3, 80, "Input"],
Cell[487870, 17016, 40, 1, 37, "Output"]
}, Open  ]],
Cell[487925, 17020, 193, 4, 30, "Text"],

Cell[CellGroupData[{
Cell[488143, 17028, 85, 2, 60, "Input"],
Cell[488231, 17032, 40, 1, 37, "Output"]
}, Open  ]],
Cell[488286, 17036, 326, 6, 50, "Text"],

Cell[CellGroupData[{
Cell[488637, 17046, 141, 4, 102, "Input"],
Cell[488781, 17052, 40, 1, 37, "Output"]
}, Open  ]],
Cell[488836, 17056, 569, 9, 67, "Text"],
Cell[489408, 17067, 61, 1, 40, "Input"],
Cell[489472, 17070, 96, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[489593, 17076, 37, 1, 40, "Input"],
Cell[489633, 17079, 35, 1, 37, "Output"]
}, Open  ]],
Cell[489683, 17083, 97, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[489805, 17089, 39, 1, 40, "Input"],
Cell[489847, 17092, 63, 1, 27, "Print",
  CellTags->"Info3284968730-3180209"],
Cell[489913, 17095, 423, 13, 30, "Print",
  CellTags->"Info3284968730-3180209"]
}, Open  ]],

Cell[CellGroupData[{
Cell[490373, 17113, 39, 1, 40, "Input"],
Cell[490415, 17116, 63, 1, 27, "Print",
  CellTags->"Info3284968732-8841380"],
Cell[490481, 17119, 426, 13, 30, "Print",
  CellTags->"Info3284968732-8841380"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[490968, 17139, 42, 0, 52, "Section"],

Cell[CellGroupData[{
Cell[491035, 17143, 59, 0, 55, "Subsection"],
Cell[491097, 17145, 221, 5, 48, "Text",
  CellTags->"Simplify_FullSimplify"],

Cell[CellGroupData[{
Cell[491343, 17154, 120, 2, 60, "Input"],
Cell[491466, 17158, 55, 1, 37, "Output"]
}, Open  ]],
Cell[491536, 17162, 127, 3, 30, "Text"],
Cell[491666, 17167, 1017, 20, 300, "Input"],
Cell[492686, 17189, 131, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[492842, 17196, 68, 1, 40, "Input"],
Cell[492913, 17199, 61, 1, 37, "Output"]
}, Open  ]],
Cell[492989, 17203, 199, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[493213, 17211, 143, 3, 60, "Input"],
Cell[493359, 17216, 63, 1, 37, "Output"]
}, Open  ]],
Cell[493437, 17220, 192, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[493654, 17228, 703, 12, 165, "Input"],
Cell[494360, 17242, 56, 1, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[494465, 17249, 75, 0, 45, "Subsection"],
Cell[494543, 17251, 276, 5, 48, "Text"],

Cell[CellGroupData[{
Cell[494844, 17260, 121, 2, 60, "Input"],
Cell[494968, 17264, 63, 1, 38, "Output"]
}, Open  ]],
Cell[495046, 17268, 185, 4, 48, "Text"],
Cell[495234, 17274, 761, 14, 320, "Input"],
Cell[495998, 17290, 105, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[496128, 17297, 72, 1, 40, "Input"],
Cell[496203, 17300, 55, 1, 38, "Output"]
}, Open  ]],
Cell[496273, 17304, 889, 22, 85, "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[497211, 17332, 55, 0, 52, "Section"],
Cell[497269, 17334, 230, 8, 30, "Text",
  CellTags->"Pure Functions"]
}, Closed]],

Cell[CellGroupData[{
Cell[497536, 17347, 23, 0, 52, "Section"],
Cell[497562, 17349, 515, 9, 85, "Text",
  CellTags->"Sort"],

Cell[CellGroupData[{
Cell[498102, 17362, 113, 2, 40, "Input"],
Cell[498218, 17366, 291, 6, 37, "Output"]
}, Open  ]],
Cell[498524, 17375, 446, 7, 67, "Text"],

Cell[CellGroupData[{
Cell[498995, 17386, 117, 2, 40, "Input"],
Cell[499115, 17390, 300, 7, 37, "Output"]
}, Open  ]],
Cell[499430, 17400, 449, 10, 67, "Text"],

Cell[CellGroupData[{
Cell[499904, 17414, 124, 2, 40, "Input"],
Cell[500031, 17418, 300, 7, 37, "Output"]
}, Open  ]],
Cell[500346, 17428, 225, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[500596, 17436, 224, 5, 105, "Input"],
Cell[500823, 17443, 488, 16, 160, "Output"]
}, Open  ]],
Cell[501326, 17462, 107, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[501458, 17469, 102, 2, 60, "Input"],
Cell[501563, 17473, 488, 16, 160, "Output"]
}, Open  ]],
Cell[502066, 17492, 173, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[502264, 17499, 140, 3, 60, "Input"],
Cell[502407, 17504, 488, 16, 160, "Output"]
}, Open  ]],
Cell[502910, 17523, 590, 10, 85, "Text"],

Cell[CellGroupData[{
Cell[503525, 17537, 210, 4, 82, "Input"],
Cell[503738, 17543, 488, 16, 160, "Output"]
}, Open  ]],
Cell[504241, 17562, 121, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[504387, 17569, 122, 2, 60, "Input"],
Cell[504512, 17573, 65, 1, 37, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[504626, 17580, 24, 0, 52, "Section"],
Cell[504653, 17582, 132, 4, 30, "Text",
  CellTags->"Split"],

Cell[CellGroupData[{
Cell[504810, 17590, 43, 1, 40, "Input"],
Cell[504856, 17593, 464, 11, 50, "Print",
  CellTags->"Info3242474961-5860318"]
}, Open  ]],

Cell[CellGroupData[{
Cell[505357, 17609, 144, 2, 60, "Input"],
Cell[505504, 17613, 90, 1, 35, "Output"]
}, Open  ]],
Cell[505609, 17617, 458, 10, 50, "Text"],

Cell[CellGroupData[{
Cell[506092, 17631, 216, 4, 80, "Input"],
Cell[506311, 17637, 113, 2, 35, "Output"]
}, Open  ]],
Cell[506439, 17642, 272, 5, 50, "Text"],

Cell[CellGroupData[{
Cell[506736, 17651, 216, 6, 115, "Input"],
Cell[506955, 17659, 211, 3, 57, "Output"]
}, Open  ]],
Cell[507181, 17665, 137, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[507343, 17672, 83, 1, 40, "Input"],
Cell[507429, 17675, 105, 2, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[507583, 17683, 56, 0, 52, "Section"],
Cell[507642, 17685, 705, 13, 105, "Text"],
Cell[508350, 17700, 187, 3, 63, "Input"],
Cell[508540, 17705, 133, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[508698, 17712, 87, 1, 40, "Input"],
Cell[508788, 17715, 80, 1, 37, "Output"]
}, Open  ]],
Cell[508883, 17719, 275, 6, 48, "Text"],

Cell[CellGroupData[{
Cell[509183, 17729, 54, 1, 40, "Input"],
Cell[509240, 17732, 44, 1, 37, "Output"]
}, Open  ]],
Cell[509299, 17736, 99, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[509423, 17742, 54, 1, 40, "Input"],
Cell[509480, 17745, 168, 3, 38, "Output"]
}, Open  ]],
Cell[509663, 17751, 65, 0, 30, "Text"],
Cell[509731, 17753, 64, 1, 40, "Input"],

Cell[CellGroupData[{
Cell[509820, 17758, 235, 6, 55, "Subsection"],

Cell[CellGroupData[{
Cell[510080, 17768, 68, 1, 40, "Input"],
Cell[510151, 17771, 116, 2, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[510304, 17778, 73, 1, 40, "Input"],
Cell[510380, 17781, 113, 2, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[510530, 17788, 77, 1, 40, "Input"],
Cell[510610, 17791, 116, 2, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[510763, 17798, 89, 1, 40, "Input"],
Cell[510855, 17801, 115, 2, 35, "Output"]
}, Open  ]],
Cell[510985, 17806, 158, 4, 30, "Text"],

Cell[CellGroupData[{
Cell[511168, 17814, 117, 2, 60, "Input"],
Cell[511288, 17818, 59, 1, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[511384, 17824, 54, 1, 40, "Input"],
Cell[511441, 17827, 57, 1, 55, "Output"]
}, Open  ]],
Cell[511513, 17831, 90, 1, 40, "Input"],
Cell[511606, 17834, 513, 14, 50, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[512156, 17853, 145, 4, 45, "Subsection"],
Cell[512304, 17859, 116, 2, 60, "Input"],
Cell[512423, 17863, 168, 6, 30, "Text"],

Cell[CellGroupData[{
Cell[512616, 17873, 84, 2, 60, "Input"],
Cell[512703, 17877, 38, 1, 37, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[512778, 17883, 55, 1, 40, "Input"],
Cell[512836, 17886, 49, 1, 37, "Output"]
}, Open  ]],
Cell[512900, 17890, 52, 1, 40, "Input"]
}, Open  ]],

Cell[CellGroupData[{
Cell[512989, 17896, 158, 3, 55, "Subsection"],
Cell[513150, 17901, 65, 1, 40, "Input"],
Cell[513218, 17904, 510, 15, 80, "Input"],

Cell[CellGroupData[{
Cell[513753, 17923, 107, 2, 60, "Input"],
Cell[513863, 17927, 58, 1, 35, "Output"]
}, Open  ]],
Cell[513936, 17931, 47, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[514008, 17935, 57, 1, 40, "Input"],
Cell[514068, 17938, 52, 1, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[514157, 17944, 43, 1, 40, "Input"],
Cell[514203, 17947, 67, 1, 35, "Output"]
}, Open  ]],
Cell[514285, 17951, 657, 15, 107, "Text"],
Cell[514945, 17968, 591, 17, 80, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[515573, 17990, 368, 8, 65, "Subsection"],
Cell[515944, 18000, 65, 1, 40, "Input"],
Cell[516012, 18003, 166, 4, 43, "Input"],

Cell[CellGroupData[{
Cell[516203, 18011, 74, 1, 40, "Input"],
Cell[516280, 18014, 58, 1, 37, "Output"]
}, Open  ]],
Cell[516353, 18018, 302, 7, 48, "Text"],

Cell[CellGroupData[{
Cell[516680, 18029, 52, 1, 40, "Input"],
Cell[516735, 18032, 58, 1, 37, "Output"]
}, Open  ]],
Cell[516808, 18036, 206, 4, 48, "Text"],
Cell[517017, 18042, 172, 4, 43, "Input"],

Cell[CellGroupData[{
Cell[517214, 18050, 60, 1, 40, "Input"],
Cell[517277, 18053, 78, 1, 37, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[517404, 18060, 104, 2, 45, "Subsection"],
Cell[517511, 18064, 523, 10, 67, "Text"],
Cell[518037, 18076, 65, 1, 40, "Input"],
Cell[518105, 18079, 756, 16, 170, "Input"],
Cell[518864, 18097, 165, 4, 30, "Text"],

Cell[CellGroupData[{
Cell[519054, 18105, 103, 2, 40, "Input"],
Cell[519160, 18109, 104, 2, 35, "Output"]
}, Open  ]],
Cell[519279, 18114, 313, 9, 30, "Text"],

Cell[CellGroupData[{
Cell[519617, 18127, 61, 1, 40, "Input"],
Cell[519681, 18130, 58, 1, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[519776, 18136, 44, 1, 40, "Input"],
Cell[519823, 18139, 66, 1, 35, "Output"]
}, Open  ]],
Cell[519904, 18143, 3460, 107, 55, "Text"],
Cell[523367, 18252, 168, 3, 30, "Text"],
Cell[523538, 18257, 125, 1, 30, "Text"],
Cell[523666, 18260, 59, 0, 30, "Text"],
Cell[523728, 18262, 188, 6, 40, "Input",
  Evaluatable->False],
Cell[523919, 18270, 39, 0, 30, "Text"],
Cell[523961, 18272, 215, 6, 40, "Input",
  Evaluatable->False],
Cell[524179, 18280, 86, 2, 30, "Text"],
Cell[524268, 18284, 334, 10, 40, "Input",
  Evaluatable->False],
Cell[524605, 18296, 127, 1, 30, "Text"],
Cell[524735, 18299, 89, 2, 30, "Text"],
Cell[524827, 18303, 1338, 29, 307, "Text"],
Cell[526168, 18334, 43, 0, 30, "Text"],
Cell[526214, 18336, 94, 3, 40, "Input",
  Evaluatable->False],
Cell[526311, 18341, 139, 3, 30, "Text"],
Cell[526453, 18346, 209, 6, 40, "Input",
  Evaluatable->False],
Cell[526665, 18354, 212, 6, 90, "Text"],
Cell[526880, 18362, 334, 10, 40, "Input",
  Evaluatable->False],
Cell[527217, 18374, 127, 3, 30, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[527381, 18382, 97, 2, 45, "Subsection"],
Cell[527481, 18386, 310, 5, 50, "Text"],
Cell[527794, 18393, 588, 12, 165, "Input"],
Cell[528385, 18407, 113, 3, 30, "Text"],
Cell[528501, 18412, 52, 1, 40, "Input"],
Cell[528556, 18415, 164, 6, 30, "Text"],
Cell[528723, 18423, 46, 1, 40, "Input"],

Cell[CellGroupData[{
Cell[528794, 18428, 73, 1, 40, "Input"],
Cell[528870, 18431, 76, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[528995, 18438, 102, 2, 45, "Subsection"],
Cell[529100, 18442, 951, 22, 275, "Input"],
Cell[530054, 18466, 151, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[530230, 18473, 111, 2, 40, "Input"],
Cell[530344, 18477, 109, 2, 35, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[530514, 18486, 25, 0, 52, "Section"],
Cell[530542, 18488, 172, 6, 30, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[530751, 18499, 25, 0, 52, "Section"],
Cell[530779, 18501, 398, 9, 70, "Text",
  CellTags->"TagBox"],

Cell[CellGroupData[{
Cell[531202, 18514, 44, 1, 40, "Input"],
Cell[531249, 18517, 356, 9, 30, "Print",
  CellTags->"Info3242475074-9991669"]
}, Open  ]],
Cell[531620, 18529, 200, 4, 30, "Text"],
Cell[531823, 18535, 223, 4, 60, "Input"],
Cell[532049, 18541, 213, 4, 50, "Text"],

Cell[CellGroupData[{
Cell[532287, 18549, 63, 1, 40, "Input"],
Cell[532353, 18552, 71, 2, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[532461, 18559, 47, 1, 40, "Input"],
Cell[532511, 18562, 161, 5, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[532721, 18573, 24, 0, 52, "Section"],
Cell[532748, 18575, 144, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[532917, 18582, 119, 2, 61, "Input"],
Cell[533039, 18586, 177, 3, 50, "Output"]
}, Open  ]],
Cell[533231, 18592, 107, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[533363, 18599, 62, 1, 40, "Input"],
Cell[533428, 18602, 183, 3, 50, "Output"]
}, Open  ]],
Cell[533626, 18608, 305, 7, 48, "Text"],

Cell[CellGroupData[{
Cell[533956, 18619, 57, 1, 40, "Input"],
Cell[534016, 18622, 177, 3, 50, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[534230, 18630, 57, 1, 40, "Input"],
Cell[534290, 18633, 183, 3, 50, "Output"]
}, Open  ]],
Cell[534488, 18639, 303, 5, 66, "Text"],

Cell[CellGroupData[{
Cell[534816, 18648, 58, 1, 40, "Input"],
Cell[534877, 18651, 428, 6, 101, "Output"]
}, Open  ]],
Cell[535320, 18660, 106, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[535451, 18667, 82, 1, 40, "Input"],
Cell[535536, 18670, 1240, 36, 175, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[536825, 18712, 25, 0, 52, "Section"],
Cell[536853, 18714, 196, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[537074, 18722, 137, 2, 61, "Input"],
Cell[537214, 18726, 64, 1, 38, "Output"]
}, Open  ]],
Cell[537293, 18730, 115, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[537433, 18737, 76, 1, 40, "Input"],
Cell[537512, 18740, 85, 1, 38, "Output"]
}, Open  ]],
Cell[537612, 18744, 204, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[537841, 18752, 79, 1, 40, "Input"],
Cell[537923, 18755, 121, 2, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[538081, 18762, 82, 1, 40, "Input"],
Cell[538166, 18765, 105, 2, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[538308, 18772, 83, 1, 40, "Input"],
Cell[538394, 18775, 78, 1, 38, "Output"]
}, Open  ]],
Cell[538487, 18779, 232, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[538744, 18787, 166, 4, 82, "Input"],
Cell[538913, 18793, 137, 2, 59, "Output"]
}, Open  ]],
Cell[539065, 18798, 319, 5, 66, "Text"],

Cell[CellGroupData[{
Cell[539409, 18807, 48, 1, 40, "Input"],
Cell[539460, 18810, 132, 2, 59, "Output"]
}, Open  ]],
Cell[539607, 18815, 172, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[539804, 18822, 168, 4, 82, "Input"],
Cell[539975, 18828, 116, 2, 38, "Output"]
}, Open  ]],
Cell[540106, 18833, 129, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[540260, 18840, 56, 1, 40, "Input"],
Cell[540319, 18843, 116, 2, 38, "Output"]
}, Open  ]],
Cell[540450, 18848, 133, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[540608, 18855, 56, 1, 40, "Input"],
Cell[540667, 18858, 116, 2, 38, "Output"]
}, Open  ]],
Cell[540798, 18863, 279, 5, 66, "Text"],
Cell[541080, 18870, 340, 7, 125, "Input"],
Cell[541423, 18879, 93, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[541541, 18885, 179, 4, 105, "Input"],
Cell[541723, 18891, 54, 1, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[541826, 18898, 30, 0, 52, "Section"],
Cell[541859, 18900, 113, 3, 30, "Text",
  CellTags->"Trig option"],

Cell[CellGroupData[{
Cell[541997, 18907, 42, 1, 40, "Input"],
Cell[542042, 18910, 236, 4, 50, "Print",
  CellTags->"Info3242475074-3476455"]
}, Open  ]],
Cell[542293, 18917, 891, 15, 165, "Text"],

Cell[CellGroupData[{
Cell[543209, 18936, 118, 2, 60, "Input"],
Cell[543330, 18940, 51, 1, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[543418, 18946, 68, 1, 40, "Input"],
Cell[543489, 18949, 55, 1, 50, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[543581, 18955, 76, 1, 40, "Input"],
Cell[543660, 18958, 43, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[543752, 18965, 27, 0, 52, "Section"],
Cell[543782, 18967, 399, 7, 67, "Text",
  CellTags->"ToString"],
Cell[544184, 18976, 198, 4, 105, "Input"],
Cell[544385, 18982, 130, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[544540, 18989, 59, 1, 40, "Input"],
Cell[544602, 18992, 26, 0, 35, "Output"]
}, Open  ]],
Cell[544643, 18995, 433, 7, 67, "Text"],
Cell[545079, 19004, 292, 6, 82, "Input"],

Cell[CellGroupData[{
Cell[545396, 19014, 46, 1, 40, "Input"],
Cell[545445, 19017, 54, 1, 37, "Output"]
}, Open  ]],
Cell[545514, 19021, 72, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[545611, 19025, 37, 1, 40, "Input"],
Cell[545651, 19028, 36, 1, 37, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[545736, 19035, 21, 0, 52, "Section"],
Cell[545760, 19037, 138, 4, 30, "Text",
  CellTags->"Tr"],

Cell[CellGroupData[{
Cell[545923, 19045, 133, 2, 60, "Input"],
Cell[546059, 19049, 39, 1, 37, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[546135, 19055, 238, 4, 147, "Input"],
Cell[546376, 19061, 49, 1, 37, "Output"]
}, Open  ]],
Cell[546440, 19065, 758, 18, 85, "Text"],

Cell[CellGroupData[{
Cell[547223, 19087, 52, 1, 40, "Input"],
Cell[547278, 19090, 51, 1, 37, "Output"]
}, Open  ]],
Cell[547344, 19094, 95, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[547464, 19100, 261, 4, 82, "Input"],
Cell[547728, 19106, 46, 1, 37, "Output"]
}, Open  ]],
Cell[547789, 19110, 99, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[547913, 19116, 39, 1, 40, "Input"],
Cell[547955, 19119, 41, 1, 37, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[548033, 19125, 48, 1, 40, "Input"],
Cell[548084, 19128, 41, 1, 37, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[548162, 19134, 78, 1, 40, "Input"],
Cell[548243, 19137, 41, 1, 37, "Output"]
}, Open  ]],
Cell[548299, 19141, 43, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[548367, 19145, 48, 1, 40, "Input"],
Cell[548418, 19148, 52, 1, 37, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[548507, 19154, 70, 1, 40, "Input"],
Cell[548580, 19157, 52, 1, 37, "Output"]
}, Open  ]],
Cell[548647, 19161, 43, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[548715, 19165, 48, 1, 40, "Input"],
Cell[548766, 19168, 103, 2, 37, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[548906, 19175, 64, 1, 40, "Input"],
Cell[548973, 19178, 103, 2, 37, "Output"]
}, Open  ]],
Cell[549091, 19183, 46, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[549162, 19187, 48, 1, 40, "Input"],
Cell[549213, 19190, 180, 3, 57, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[549430, 19198, 58, 1, 40, "Input"],
Cell[549491, 19201, 180, 3, 57, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[549720, 19210, 28, 0, 52, "Section"],
Cell[549751, 19212, 231, 5, 67, "Text"],

Cell[CellGroupData[{
Cell[550007, 19221, 286, 5, 125, "Input"],
Cell[550296, 19228, 901, 23, 91, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[551234, 19256, 82, 1, 40, "Input"],
Cell[551319, 19259, 901, 23, 91, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[552257, 19287, 105, 2, 40, "Input"],
Cell[552365, 19291, 901, 23, 91, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[553303, 19319, 74, 1, 40, "Input"],
Cell[553380, 19322, 901, 23, 91, "Output"]
}, Open  ]],
Cell[554296, 19348, 109, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[554430, 19355, 68, 1, 40, "Input"],
Cell[554501, 19358, 812, 22, 91, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[555362, 19386, 30, 0, 52, "Section"],
Cell[555395, 19388, 359, 7, 66, "Text",
  CellTags->"Unevaluated"],

Cell[CellGroupData[{
Cell[555779, 19399, 64, 1, 41, "Input"],
Cell[555846, 19402, 90, 3, 38, "Output"]
}, Open  ]],
Cell[555951, 19408, 477, 9, 122, "Text"],
Cell[556431, 19419, 199, 4, 82, "Input"],
Cell[556633, 19425, 183, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[556841, 19433, 107, 2, 61, "Input"],
Cell[556951, 19437, 58, 1, 38, "Output"]
}, Open  ]],
Cell[557024, 19441, 281, 10, 48, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[557342, 19456, 25, 0, 52, "Section"],
Cell[557370, 19458, 214, 7, 30, "Text",
  CellTags->"Update"]
}, Closed]],

Cell[CellGroupData[{
Cell[557621, 19470, 27, 0, 52, "Section"],
Cell[557651, 19472, 356, 6, 67, "Text",
  CellTags->"Upvalues"],
Cell[558010, 19480, 130, 2, 61, "Input"],
Cell[558143, 19484, 208, 6, 30, "Text"],
Cell[558354, 19492, 62, 1, 40, "Input"],
Cell[558419, 19495, 72, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[558516, 19499, 73, 1, 61, "Input"],
Cell[558592, 19502, 105, 2, 50, "Output"]
}, Open  ]],
Cell[558712, 19507, 760, 13, 103, "Text"],

Cell[CellGroupData[{
Cell[559497, 19524, 76, 1, 43, "Input"],
Cell[559576, 19527, 70, 1, 40, "Output"]
}, Open  ]],
Cell[559661, 19531, 145, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[559831, 19538, 87, 1, 43, "Input"],
Cell[559921, 19541, 92, 1, 45, "Output"]
}, Open  ]],
Cell[560028, 19545, 1705, 41, 178, "Text"],

Cell[CellGroupData[{
Cell[561758, 19590, 49, 1, 40, "Input"],
Cell[561810, 19593, 113, 2, 37, "Output"]
}, Open  ]],
Cell[561938, 19598, 321, 5, 48, "Text"],
Cell[562262, 19605, 56, 1, 40, "Input"],
Cell[562321, 19608, 277, 9, 30, "Text"],
Cell[562601, 19619, 70, 1, 40, "Input"],
Cell[562674, 19622, 234, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[562933, 19630, 47, 1, 40, "Input"],
Cell[562983, 19633, 113, 2, 37, "Output"]
}, Open  ]],
Cell[563111, 19638, 286, 5, 48, "Text"],

Cell[CellGroupData[{
Cell[563422, 19647, 54, 1, 40, "Input"],
Cell[563479, 19650, 52, 1, 37, "Output"]
}, Open  ]],
Cell[563546, 19654, 164, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[563735, 19661, 50, 1, 40, "Input"],
Cell[563788, 19664, 52, 1, 38, "Output"]
}, Open  ]],
Cell[563855, 19668, 1550, 32, 158, "Text"],

Cell[CellGroupData[{
Cell[565430, 19704, 71, 1, 61, "Input"],
Cell[565504, 19707, 72, 1, 53, "Output"]
}, Open  ]],
Cell[565591, 19711, 548, 10, 105, "Text"],
Cell[566142, 19723, 56, 1, 40, "Input"],
Cell[566201, 19726, 513, 11, 67, "Text"],
Cell[566717, 19739, 70, 1, 40, "Input"],
Cell[566790, 19742, 515, 9, 67, "Text"],
Cell[567308, 19753, 63, 1, 40, "Input"],
Cell[567374, 19756, 496, 11, 67, "Text"],
Cell[567873, 19769, 188, 3, 83, "Input"],

Cell[CellGroupData[{
Cell[568086, 19776, 56, 1, 43, "Input"],
Cell[568145, 19779, 76, 1, 40, "Output"]
}, Open  ]],
Cell[568236, 19783, 244, 4, 48, "Text"],
Cell[568483, 19789, 136, 2, 61, "Input"],

Cell[CellGroupData[{
Cell[568644, 19795, 56, 1, 43, "Input"],
Cell[568703, 19798, 58, 1, 40, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[568798, 19804, 112, 3, 56, "Subsection"],
Cell[568913, 19809, 679, 13, 67, "Text"],
Cell[569595, 19824, 197, 3, 80, "Input"],

Cell[CellGroupData[{
Cell[569817, 19831, 74, 1, 40, "Input"],
Cell[569894, 19834, 35, 1, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[569966, 19840, 48, 1, 40, "Input"],
Cell[570017, 19843, 89, 1, 35, "Output"]
}, Open  ]],
Cell[570121, 19847, 97, 2, 30, "Text"],
Cell[570221, 19851, 149, 3, 80, "Input"],

Cell[CellGroupData[{
Cell[570395, 19858, 74, 1, 40, "Input"],
Cell[570472, 19861, 35, 1, 35, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[570544, 19867, 49, 1, 40, "Input"],
Cell[570596, 19870, 89, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[570734, 19877, 128, 3, 45, "Subsection"],
Cell[570865, 19882, 214, 3, 80, "Input"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[571128, 19891, 27, 0, 52, "Section"],
Cell[571158, 19893, 82, 1, 30, "Text",
  CellTags->"Verbatim"],

Cell[CellGroupData[{
Cell[571265, 19898, 46, 1, 40, "Input"],
Cell[571314, 19901, 423, 10, 50, "Print",
  CellTags->"Info3247899362-8348536"]
}, Open  ]],
Cell[571752, 19914, 211, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[571988, 19922, 55, 1, 40, "Input"],
Cell[572046, 19925, 226, 6, 52, "Output"]
}, Open  ]],
Cell[572287, 19934, 227, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[572539, 19942, 87, 1, 40, "Input"],
Cell[572629, 19945, 55, 1, 37, "Output"]
}, Open  ]],
Cell[572699, 19949, 263, 5, 48, "Text"],

Cell[CellGroupData[{
Cell[572987, 19958, 110, 2, 40, "Input"],
Cell[573100, 19962, 43, 1, 37, "Output"]
}, Open  ]],
Cell[573158, 19966, 132, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[573315, 19973, 186, 3, 60, "Input"],
Cell[573504, 19978, 61, 1, 37, "Output"]
}, Open  ]],
Cell[573580, 19982, 328, 8, 48, "Text"],

Cell[CellGroupData[{
Cell[573933, 19994, 113, 2, 40, "Input"],
Cell[574049, 19998, 37, 1, 37, "Output"]
}, Open  ]],
Cell[574101, 20002, 152, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[574278, 20009, 133, 2, 40, "Input"],
Cell[574414, 20013, 53, 1, 37, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[574516, 20020, 31, 0, 52, "Section"],
Cell[574550, 20022, 90, 1, 30, "Text",
  CellTags->"$OutputForms"],

Cell[CellGroupData[{
Cell[574665, 20027, 50, 1, 40, "Input"],
Cell[574718, 20030, 179, 3, 50, "Print",
  CellTags->"Info3240648369-5591269"]
}, Open  ]],

Cell[CellGroupData[{
Cell[574934, 20038, 103, 2, 40, "Input"],
Cell[575040, 20042, 295, 8, 80, "Output"]
}, Open  ]],
Cell[575350, 20053, 76, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[575451, 20057, 51, 1, 40, "Input"],
Cell[575505, 20060, 52, 1, 35, "Output"]
}, Open  ]],
Cell[575572, 20064, 96, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[575693, 20070, 150, 2, 60, "Input"],
Cell[575846, 20074, 314, 4, 77, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[576197, 20083, 103, 2, 40, "Input"],
Cell[576303, 20087, 295, 8, 80, "Output"]
}, Open  ]],
Cell[576613, 20098, 132, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[576770, 20105, 51, 1, 40, "Input"],
Cell[576824, 20108, 58, 1, 35, "Output"]
}, Open  ]],
Cell[576897, 20112, 75, 0, 30, "Text"],
Cell[576975, 20114, 86, 1, 40, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[577098, 20120, 51, 0, 52, "Section"],
Cell[577152, 20122, 1392, 28, 273, "Text",
  CellTags->"$Pre;$Post"],

Cell[CellGroupData[{
Cell[578569, 20154, 30, 0, 56, "Subsection"],
Cell[578602, 20156, 587, 12, 183, "Text"],
Cell[579192, 20170, 50, 1, 67, "Input"],
Cell[579245, 20173, 203, 5, 36, "Text"],
Cell[579451, 20180, 349, 7, 83, "Input"],

Cell[CellGroupData[{
Cell[579825, 20191, 50, 1, 67, "Input"],
Cell[579878, 20194, 61, 1, 40, "Output"]
}, Open  ]],
Cell[579954, 20198, 68, 0, 30, "Text"],
Cell[580025, 20200, 45, 1, 40, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[580107, 20206, 26, 0, 44, "Subsection"],
Cell[580136, 20208, 261, 5, 48, "Text"],
Cell[580400, 20215, 251, 6, 61, "Input"],
Cell[580654, 20223, 133, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[580812, 20230, 50, 1, 67, "Input"],
Cell[580865, 20233, 55, 1, 65, "Output"]
}, Open  ]],
Cell[580935, 20237, 64, 0, 30, "Text"],
Cell[581002, 20239, 41, 1, 40, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[581080, 20245, 27, 0, 44, "Subsection"],
Cell[581110, 20247, 541, 8, 85, "Text"],
Cell[581654, 20257, 199, 4, 61, "Input"],
Cell[581856, 20263, 129, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[582010, 20270, 146, 3, 61, "Input"],
Cell[582159, 20275, 269, 8, 70, "Output"],
Cell[582431, 20285, 46, 1, 37, "Output"]
}, Open  ]],
Cell[582492, 20289, 102, 3, 30, "Text"],
Cell[582597, 20294, 155, 2, 61, "Input"],
Cell[582755, 20298, 99, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[582879, 20304, 146, 3, 61, "Input"],
Cell[583028, 20309, 269, 8, 70, "Output"],
Cell[583300, 20319, 52, 1, 37, "Output"]
}, Open  ]],
Cell[583367, 20323, 121, 3, 30, "Text"],
Cell[583491, 20328, 149, 2, 61, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[583677, 20335, 31, 0, 44, "Subsection"],
Cell[583711, 20337, 404, 6, 65, "Text"],
Cell[584118, 20345, 203, 4, 60, "Input"],
Cell[584324, 20351, 244, 4, 47, "Text"],

Cell[CellGroupData[{
Cell[584593, 20359, 146, 3, 60, "Input"],
Cell[584742, 20364, 269, 8, 70, "Output"],
Cell[585014, 20374, 46, 1, 35, "Output"]
}, Open  ]],
Cell[585075, 20378, 72, 1, 40, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[585184, 20384, 62, 0, 44, "Subsection"],
Cell[585249, 20386, 63, 0, 30, "Text"],
Cell[585315, 20388, 173, 3, 60, "Input"],
Cell[585491, 20393, 275, 5, 47, "Text"],

Cell[CellGroupData[{
Cell[585791, 20402, 42, 1, 40, "Input"],
Cell[585836, 20405, 43, 1, 35, "Output"]
}, Open  ]],
Cell[585894, 20409, 241, 4, 47, "Text"],

Cell[CellGroupData[{
Cell[586160, 20417, 98, 2, 60, "Input"],
Cell[586261, 20421, 39, 1, 35, "Output"]
}, Open  ]],
Cell[586315, 20425, 207, 4, 47, "Text"],
Cell[586525, 20431, 154, 2, 60, "Input"],

Cell[CellGroupData[{
Cell[586704, 20437, 42, 1, 40, "Input"],
Cell[586749, 20440, 43, 1, 35, "Output"]
}, Open  ]],
Cell[586807, 20444, 121, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[586953, 20451, 115, 2, 60, "Input"],
Cell[587071, 20455, 43, 1, 35, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[587175, 20463, 76, 1, 54, "MiscSection"],

Cell[CellGroupData[{
Cell[587276, 20468, 32, 0, 56, "Subsection"],
Cell[587311, 20470, 300, 5, 45, "ExampleText",
  CellTags->{"ReplacePart", "Evaluate At"}],
Cell[587614, 20477, 179, 4, 40, "Input",
  CellTags->"ReplacePart"],
Cell[587796, 20483, 238, 7, 27, "ExampleText",
  CellTags->"ReplacePart"],

Cell[CellGroupData[{
Cell[588059, 20494, 140, 4, 40, "Input",
  CellTags->"ReplacePart"],
Cell[588202, 20500, 75, 2, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[588326, 20508, 38, 0, 44, "Subsection"],
Cell[588367, 20510, 733, 14, 107, "Text",
  CellTags->"Evaluate Pattern"],
Cell[589103, 20526, 536, 16, 40, "Input"],
Cell[589642, 20544, 339, 7, 50, "Text"],

Cell[CellGroupData[{
Cell[590006, 20555, 209, 5, 90, "Input"],
Cell[590218, 20562, 82, 2, 50, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[590349, 20570, 69, 0, 44, "Subsection"],
Cell[590421, 20572, 869, 16, 205, "Input"],
Cell[591293, 20590, 478, 15, 230, "Text"],
Cell[591774, 20607, 140, 3, 40, "Input"],
Cell[591917, 20612, 102, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[592044, 20619, 76, 1, 40, "Input"],
Cell[592123, 20622, 130, 2, 55, "Output"]
}, Open  ]],
Cell[592268, 20627, 111, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[592404, 20634, 87, 1, 40, "Input"],
Cell[592494, 20637, 128, 2, 55, "Output"]
}, Open  ]],
Cell[592637, 20642, 125, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[592787, 20649, 110, 2, 40, "Input"],
Cell[592900, 20653, 130, 2, 55, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[593079, 20661, 48, 0, 44, "Subsection"],
Cell[593130, 20663, 298, 6, 86, "Text"],

Cell[CellGroupData[{
Cell[593453, 20673, 281, 6, 103, "Input"],
Cell[593737, 20681, 38580, 738, 193, 4515, 313, "GraphicsData", "PostScript", \
"Graphics"]
}, Open  ]],
Cell[632332, 21422, 523, 10, 85, "Text"],
Cell[632858, 21434, 213, 4, 82, "Input"],

Cell[CellGroupData[{
Cell[633096, 21442, 149, 4, 56, "Input",
  CellTags->"S5.12.1"],
Cell[633248, 21448, 658, 10, 146, "Output"]
}, Open  ]],
Cell[633921, 21461, 342, 7, 66, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[634300, 21473, 38, 0, 44, "Subsection"],
Cell[634341, 21475, 205, 7, 30, "Text",
  CellTags->"FoldList_Example1"],

Cell[CellGroupData[{
Cell[634571, 21486, 374, 8, 146, "Input"],
Cell[634948, 21496, 72, 1, 38, "Output"]
}, Open  ]],
Cell[635035, 21500, 106, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[635166, 21507, 207, 5, 82, "Input"],
Cell[635376, 21514, 78, 1, 29, "Print"],
Cell[635457, 21517, 76, 1, 29, "Print"],
Cell[635536, 21520, 70, 1, 29, "Print"],
Cell[635609, 21523, 61, 1, 29, "Print"],
Cell[635673, 21526, 49, 1, 29, "Print"]
}, Open  ]],
Cell[635737, 21530, 124, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[635886, 21537, 78, 1, 40, "Input"],
Cell[635967, 21540, 556, 22, 111, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[636560, 21567, 94, 2, 61, "Input"],
Cell[636657, 21571, 45, 1, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[636751, 21578, 40, 0, 44, "Subsection"],
Cell[636794, 21580, 46, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[636865, 21584, 324, 6, 167, "Input"],
Cell[637192, 21592, 55, 1, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[637296, 21599, 63, 0, 44, "Subsection"],
Cell[637362, 21601, 48, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[637435, 21605, 368, 7, 167, "Input"],
Cell[637806, 21614, 61, 1, 41, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[637916, 21621, 75, 0, 44, "Subsection"],
Cell[637994, 21623, 278, 5, 66, "Text"],

Cell[CellGroupData[{
Cell[638297, 21632, 202, 4, 82, "Input"],
Cell[638502, 21638, 370, 8, 60, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[638909, 21651, 133, 2, 61, "Input"],
Cell[639045, 21655, 146, 2, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[639240, 21663, 62, 0, 44, "Subsection"],
Cell[639305, 21665, 187, 4, 50, "Text"],
Cell[639495, 21671, 243, 5, 125, "Input"],
Cell[639741, 21678, 64, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[639830, 21682, 46, 1, 40, "Input"],
Cell[639879, 21685, 254, 4, 57, "Output"]
}, Open  ]],
Cell[640148, 21692, 241, 5, 67, "Text"],

Cell[CellGroupData[{
Cell[640414, 21701, 72, 1, 40, "Input"],
Cell[640489, 21704, 65, 1, 35, "Output"]
}, Open  ]],
Cell[640569, 21708, 458, 9, 190, "Input"],
Cell[641030, 21719, 97, 3, 50, "Text"],

Cell[CellGroupData[{
Cell[641152, 21726, 42, 1, 40, "Input"],
Cell[641197, 21729, 60, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[641306, 21736, 59, 0, 44, "Subsection"],
Cell[641368, 21738, 247, 7, 48, "Text"],
Cell[641618, 21747, 407, 8, 146, "Input"],
Cell[642028, 21757, 146, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[642199, 21764, 153, 3, 64, "Input"],
Cell[642355, 21769, 52, 1, 50, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[642444, 21775, 71, 1, 40, "Input"],
Cell[642518, 21778, 35, 1, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[642590, 21784, 72, 1, 55, "Input"],
Cell[642665, 21787, 35, 1, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[642737, 21793, 74, 1, 40, "Input"],
Cell[642814, 21796, 41, 1, 40, "Output"]
}, Open  ]],
Cell[642870, 21800, 110, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[643005, 21807, 53, 1, 40, "Input"],
Cell[643061, 21810, 54, 1, 38, "Output"]
}, Open  ]],
Cell[643130, 21814, 114, 3, 30, "Text"],
Cell[643247, 21819, 367, 7, 210, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[643651, 21831, 50, 0, 44, "Subsection"],
Cell[643704, 21833, 303, 5, 105, "Input"],

Cell[CellGroupData[{
Cell[644032, 21842, 171, 3, 82, "Input"],
Cell[644206, 21847, 459, 9, 87, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[644714, 21862, 99, 2, 44, "Subsection"],
Cell[644816, 21866, 398, 8, 67, "Text"],

Cell[CellGroupData[{
Cell[645239, 21878, 300, 5, 106, "Input"],
Cell[645542, 21885, 971, 24, 60, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[646550, 21914, 48, 0, 38, "Input"],
Cell[646601, 21916, 1620, 42, 186, "Output"]
}, Open  ]],
Cell[648236, 21961, 445, 12, 220, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[648718, 21978, 69, 0, 44, "Subsection"],
Cell[648790, 21980, 268, 5, 47, "Text"],
Cell[649061, 21987, 213, 3, 82, "Input"],

Cell[CellGroupData[{
Cell[649299, 21994, 70, 1, 40, "Input"],
Cell[649372, 21997, 68, 1, 35, "Output"]
}, Open  ]],
Cell[649455, 22001, 243, 4, 47, "Text"],
Cell[649701, 22007, 175, 4, 35, "Input"],
Cell[649879, 22013, 394, 8, 47, "Text"],
Cell[650276, 22023, 76, 1, 40, "Input"],
Cell[650355, 22026, 164, 3, 30, "Text"],
Cell[650522, 22031, 234, 5, 40, "Input"],
Cell[650759, 22038, 311, 5, 47, "Text"],
Cell[651073, 22045, 1280, 36, 147, "Input"],

Cell[CellGroupData[{
Cell[652378, 22085, 51, 1, 40, "Input"],
Cell[652432, 22088, 77, 1, 35, "Output"]
}, Open  ]],
Cell[652524, 22092, 366, 8, 47, "Text",
  CellTags->"RelativePrimes_Fold"],
Cell[652893, 22102, 286, 5, 82, "Input"],

Cell[CellGroupData[{
Cell[653204, 22111, 77, 0, 52, "Subsubsection"],
Cell[653284, 22113, 470, 10, 110, "Text"],

Cell[CellGroupData[{
Cell[653779, 22127, 74, 1, 40, "Input"],
Cell[653856, 22130, 202, 3, 57, "Output"]
}, Open  ]],
Cell[654073, 22136, 117, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[654215, 22143, 52, 1, 40, "Input"],
Cell[654270, 22146, 200, 3, 57, "Output"]
}, Open  ]],
Cell[654485, 22152, 113, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[654623, 22159, 70, 1, 40, "Input"],
Cell[654696, 22162, 77, 1, 35, "Output"]
}, Open  ]],
Cell[654788, 22166, 105, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[654918, 22173, 134, 3, 40, "Input"],
Cell[655055, 22178, 77, 1, 35, "Output"]
}, Open  ]],
Cell[655147, 22182, 182, 4, 30, "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[655378, 22192, 49, 0, 44, "Subsection"],
Cell[655430, 22194, 266, 6, 68, "Text",
  CellTags->"Algebra_Transformation"],

Cell[CellGroupData[{
Cell[655721, 22204, 187, 3, 61, "Input"],
Cell[655911, 22209, 64, 1, 38, "Output"]
}, Open  ]],
Cell[655990, 22213, 366, 9, 66, "Text"],
Cell[656359, 22224, 291, 6, 61, "Input"],

Cell[CellGroupData[{
Cell[656675, 22234, 80, 1, 40, "Input"],
Cell[656758, 22237, 64, 1, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[656871, 22244, 36, 0, 44, "Subsection"],
Cell[656910, 22246, 382, 9, 66, "Text",
  CellTags->"Together"],

Cell[CellGroupData[{
Cell[657317, 22259, 151, 2, 83, "Input"],
Cell[657471, 22263, 123, 2, 53, "Output"]
}, Open  ]],
Cell[657609, 22268, 88, 1, 60, "Input"],
Cell[657700, 22271, 174, 3, 48, "Text"],
Cell[657877, 22276, 226, 4, 82, "Input"],
Cell[658106, 22282, 113, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[658244, 22289, 92, 1, 60, "Input"],
Cell[658339, 22292, 121, 2, 53, "Output"]
}, Open  ]],
Cell[658475, 22297, 512, 10, 85, "Text"],

Cell[CellGroupData[{
Cell[659012, 22311, 120, 2, 62, "Input"],
Cell[659135, 22315, 115, 2, 38, "Output"]
}, Open  ]],
Cell[659265, 22320, 99, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[659389, 22326, 83, 1, 40, "Input"],
Cell[659475, 22329, 69, 1, 38, "Output"]
}, Open  ]],
Cell[659559, 22333, 522, 8, 103, "Text"],
Cell[660084, 22343, 1180, 22, 443, "Input"],
Cell[661267, 22367, 60, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[661352, 22371, 92, 1, 60, "Input"],
Cell[661447, 22374, 121, 2, 53, "Output"]
}, Open  ]],
Cell[661583, 22379, 97, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[661705, 22385, 56, 1, 40, "Input"],
Cell[661764, 22388, 116, 2, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[661929, 22396, 51, 0, 44, "Subsection"],
Cell[661983, 22398, 90, 1, 30, "Text",
  CellTags->"Tensor_to_Matrix"],

Cell[CellGroupData[{
Cell[662098, 22403, 319, 5, 146, "Input"],
Cell[662420, 22410, 1166, 28, 130, "Output"]
}, Open  ]],
Cell[663601, 22441, 278, 5, 66, "Text"],
Cell[663882, 22448, 424, 11, 130, "Output"],
Cell[664309, 22461, 90, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[664424, 22467, 386, 10, 61, "Input"],
Cell[664813, 22479, 443, 11, 130, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[665293, 22495, 176, 4, 61, "Input"],
Cell[665472, 22501, 443, 11, 130, "Output"]
}, Open  ]],
Cell[665930, 22515, 104, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[666059, 22522, 926, 18, 316, "Input"],
Cell[666988, 22542, 4297, 91, 169, "Output"]
}, Open  ]],
Cell[671300, 22636, 165, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[671490, 22643, 961, 27, 103, "Input"],
Cell[672454, 22672, 675, 13, 169, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[673178, 22691, 54, 0, 44, "Subsection"],
Cell[673235, 22693, 1267, 20, 235, "Text",
  CellTags->"Distribute - Application"],

Cell[CellGroupData[{
Cell[674527, 22717, 123, 2, 60, "Input"],
Cell[674653, 22721, 82, 1, 35, "Output"]
}, Open  ]],
Cell[674750, 22725, 95, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[674870, 22731, 65, 1, 40, "Input"],
Cell[674938, 22734, 431, 6, 100, "Output"]
}, Open  ]],
Cell[675384, 22743, 343, 6, 65, "Text"],

Cell[CellGroupData[{
Cell[675752, 22753, 80, 1, 40, "Input"],
Cell[675835, 22756, 163, 2, 35, "Output"]
}, Open  ]],
Cell[676013, 22761, 266, 5, 47, "Text"],

Cell[CellGroupData[{
Cell[676304, 22770, 133, 3, 40, "Input"],
Cell[676440, 22775, 510, 7, 100, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[676999, 22788, 43, 0, 44, "Subsection"],
Cell[677045, 22790, 618, 14, 85, "Text",
  CellTags->"DeleteRepititions"],
Cell[677666, 22806, 236, 4, 103, "Input"],
Cell[677905, 22812, 56, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[677986, 22816, 92, 1, 40, "Input"],
Cell[678081, 22819, 49, 1, 38, "Output"]
}, Open  ]],
Cell[678145, 22823, 221, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[678391, 22831, 110, 2, 40, "Input"],
Cell[678504, 22835, 55, 1, 38, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[678620, 22843, 45, 0, 52, "MiscSection"],
Cell[678668, 22845, 1697, 41, 269, "Text",
  CellTags->"Evaluation-Process"],

Cell[CellGroupData[{
Cell[680390, 22890, 59, 0, 56, "Subsection"],
Cell[680452, 22892, 931, 15, 195, "Text"],

Cell[CellGroupData[{
Cell[681408, 22911, 142, 3, 82, "Input"],
Cell[681553, 22916, 124, 2, 27, "Message"],
Cell[681680, 22920, 51, 1, 38, "Output"]
}, Open  ]],
Cell[681746, 22924, 326, 7, 104, "Text"],
Cell[682075, 22933, 357, 10, 83, "Text"],
Cell[682435, 22945, 143, 5, 65, "Text"],
Cell[682581, 22952, 303, 7, 83, "Text"],
Cell[682887, 22961, 1164, 25, 249, "Text"],
Cell[684054, 22988, 256, 9, 65, "Text"],

Cell[CellGroupData[{
Cell[684335, 23001, 185, 3, 82, "Input"],
Cell[684523, 23006, 51, 1, 38, "Output"]
}, Open  ]],
Cell[684589, 23010, 320, 10, 84, "Text"],

Cell[CellGroupData[{
Cell[684934, 23024, 139, 2, 61, "Input"],
Cell[685076, 23028, 55, 1, 38, "Output"]
}, Open  ]],
Cell[685146, 23032, 93, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[685264, 23038, 208, 3, 82, "Input"],
Cell[685475, 23043, 75, 1, 38, "Output"]
}, Open  ]],
Cell[685565, 23047, 256, 6, 84, "Text"],

Cell[CellGroupData[{
Cell[685846, 23057, 182, 3, 82, "Input"],
Cell[686031, 23062, 62, 1, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[686130, 23068, 57, 1, 40, "Input"],
Cell[686190, 23071, 62, 1, 38, "Output"]
}, Open  ]],
Cell[686267, 23075, 333, 8, 102, "Text"],

Cell[CellGroupData[{
Cell[686625, 23087, 181, 3, 82, "Input"],
Cell[686809, 23092, 51, 1, 38, "Output"]
}, Open  ]],
Cell[686875, 23096, 907, 21, 175, "Text"],
Cell[687785, 23119, 129, 2, 61, "Input"],
Cell[687917, 23123, 362, 8, 101, "Text"],
Cell[688282, 23133, 339, 12, 65, "Text"],
Cell[688624, 23147, 401, 10, 83, "Text"],
Cell[689028, 23159, 55, 1, 40, "Input"],
Cell[689086, 23162, 256, 8, 65, "Text"],
Cell[689345, 23172, 200, 6, 65, "Text"],
Cell[689548, 23180, 346, 10, 83, "Text"],
Cell[689897, 23192, 277, 7, 83, "Text"],
Cell[690177, 23201, 360, 8, 101, "Text",
  CellTags->"Unevaluated-Advanced"],

Cell[CellGroupData[{
Cell[690562, 23213, 167, 3, 82, "Input"],
Cell[690732, 23218, 55, 1, 38, "Output"]
}, Open  ]],
Cell[690802, 23222, 184, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[691011, 23230, 187, 4, 61, "Input"],
Cell[691201, 23236, 120, 3, 38, "Output"]
}, Open  ]],
Cell[691336, 23242, 128, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[691489, 23249, 183, 3, 82, "Input"],
Cell[691675, 23254, 45, 1, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[691769, 23261, 35, 0, 44, "Subsection"],
Cell[691807, 23263, 261, 5, 66, "Text"],
Cell[692071, 23270, 262, 7, 167, "Input"],
Cell[692336, 23279, 68, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[692429, 23283, 50, 1, 40, "Input"],
Cell[692482, 23286, 62, 1, 38, "Output"]
}, Open  ]],
Cell[692559, 23290, 214, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[692798, 23298, 604, 12, 210, "Input"],
Cell[693405, 23312, 46, 1, 29, "Print"],
Cell[693454, 23315, 48, 1, 29, "Print"],
Cell[693505, 23318, 52, 1, 29, "Print"],
Cell[693560, 23321, 56, 1, 29, "Print"],
Cell[693619, 23324, 46, 1, 29, "Print"],
Cell[693668, 23327, 48, 1, 29, "Print"],
Cell[693719, 23330, 52, 1, 29, "Print"],
Cell[693774, 23333, 48, 1, 29, "Print"],
Cell[693825, 23336, 48, 1, 29, "Print"],
Cell[693876, 23339, 62, 1, 38, "Output"]
}, Open  ]],
Cell[693953, 23343, 158, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[694136, 23350, 379, 8, 188, "Input"],
Cell[694518, 23360, 38, 1, 38, "Output"]
}, Open  ]],
Cell[694571, 23364, 86, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[694682, 23370, 832, 16, 273, "Input"],
Cell[695517, 23388, 46, 1, 29, "Print"],
Cell[695566, 23391, 46, 1, 29, "Print"],
Cell[695615, 23394, 46, 1, 29, "Print"],
Cell[695664, 23397, 52, 1, 29, "Print"],
Cell[695719, 23400, 54, 1, 29, "Print"],
Cell[695776, 23403, 38, 1, 38, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[695875, 23411, 51, 0, 52, "MiscSection"],
Cell[695929, 23413, 1318, 29, 250, "Text",
  CellTags->"Definition-Storage"],

Cell[CellGroupData[{
Cell[697272, 23446, 32, 0, 56, "Subsection"],
Cell[697307, 23448, 155, 4, 30, "Text",
  CellTags->"DownValues"],

Cell[CellGroupData[{
Cell[697487, 23456, 170, 4, 103, "Input"],
Cell[697660, 23462, 85, 1, 38, "Output"]
}, Open  ]],
Cell[697760, 23466, 126, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[697911, 23473, 136, 3, 82, "Input"],
Cell[698050, 23478, 43, 1, 38, "Output"],
Cell[698096, 23481, 83, 1, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[698228, 23488, 30, 0, 44, "Subsection"],
Cell[698261, 23490, 128, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[698414, 23497, 170, 4, 105, "Input"],
Cell[698587, 23503, 90, 1, 35, "Output"]
}, Open  ]],
Cell[698692, 23507, 95, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[698812, 23513, 166, 3, 82, "Input"],
Cell[698981, 23518, 84, 1, 35, "Output"]
}, Open  ]],
Cell[699080, 23522, 151, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[699256, 23529, 144, 3, 82, "Input"],
Cell[699403, 23534, 84, 1, 35, "Output"]
}, Open  ]],
Cell[699502, 23538, 167, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[699694, 23545, 165, 3, 80, "Input"],
Cell[699862, 23550, 84, 1, 35, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[699995, 23557, 31, 0, 44, "Subsection"],
Cell[700029, 23559, 166, 4, 48, "Text",
  CellTags->"OwnValues"],
Cell[700198, 23565, 152, 3, 61, "Input"],
Cell[700353, 23570, 86, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[700464, 23576, 48, 1, 40, "Input"],
Cell[700515, 23579, 74, 1, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[700638, 23586, 29, 0, 44, "Subsection"],
Cell[700670, 23588, 153, 4, 30, "Text",
  CellTags->"NValues"],
Cell[700826, 23594, 102, 2, 61, "Input"],
Cell[700931, 23598, 106, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[701062, 23605, 46, 1, 45, "Input"],
Cell[701111, 23608, 47, 1, 41, "Output"]
}, Open  ]],
Cell[701173, 23612, 72, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[701270, 23616, 49, 1, 45, "Input"],
Cell[701322, 23619, 90, 1, 38, "Output"]
}, Open  ]],
Cell[701427, 23623, 71, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[701523, 23627, 43, 1, 40, "Input"],
Cell[701569, 23630, 104, 2, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[701722, 23638, 31, 0, 44, "Subsection"],
Cell[701756, 23640, 153, 4, 30, "Text",
  CellTags->"SubValues"],
Cell[701912, 23646, 129, 2, 61, "Input"],

Cell[CellGroupData[{
Cell[702066, 23652, 45, 1, 40, "Input"],
Cell[702114, 23655, 109, 2, 38, "Output"]
}, Open  ]],
Cell[702238, 23660, 393, 10, 63, "Commentary"],

Cell[CellGroupData[{
Cell[702656, 23674, 165, 3, 82, "Input"],
Cell[702824, 23679, 36, 1, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[702897, 23685, 53, 1, 40, "Input"],
Cell[702953, 23688, 88, 1, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[703090, 23695, 34, 0, 44, "Subsection"],
Cell[703127, 23697, 361, 8, 66, "Text",
  CellTags->"FormatValues"],
Cell[703491, 23707, 444, 10, 188, "Input"],
Cell[703938, 23719, 123, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[704086, 23726, 41, 1, 40, "Input"],
Cell[704130, 23729, 68, 2, 50, "Output"]
}, Open  ]],
Cell[704213, 23734, 103, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[704341, 23741, 55, 1, 40, "Input"],
Cell[704399, 23744, 910, 24, 208, "Output"]
}, Open  ]],
Cell[705324, 23771, 141, 3, 48, "Text"],
Cell[705468, 23776, 123, 2, 61, "Input"],
Cell[705594, 23780, 271, 6, 48, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[705902, 23791, 35, 0, 44, "Subsection"],
Cell[705940, 23793, 410, 9, 66, "Text",
  CellTags->"DefaultValues"],

Cell[CellGroupData[{
Cell[706375, 23806, 128, 3, 82, "Input"],
Cell[706506, 23811, 79, 1, 38, "Output"],
Cell[706588, 23814, 80, 1, 38, "Output"],
Cell[706671, 23817, 83, 1, 38, "Output"]
}, Open  ]],
Cell[706769, 23821, 103, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[706897, 23828, 54, 1, 40, "Input"],
Cell[706954, 23831, 154, 2, 59, "Output"]
}, Open  ]],
Cell[707123, 23836, 436, 9, 104, "Text"],
Cell[707562, 23847, 220, 4, 82, "Input"],
Cell[707785, 23853, 108, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[707918, 23860, 50, 1, 40, "Input"],
Cell[707971, 23863, 187, 3, 59, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[708207, 23872, 30, 0, 44, "Subsection"],
Cell[708240, 23874, 95, 1, 30, "Text",
  CellTags->"Messages"],
Cell[708338, 23877, 227, 4, 82, "Input"],
Cell[708568, 23883, 160, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[708753, 23890, 46, 1, 40, "Input"],
Cell[708802, 23893, 242, 4, 80, "Output"]
}, Open  ]],
Cell[709059, 23900, 134, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[709218, 23907, 39, 1, 40, "Input"],
Cell[709260, 23910, 89, 2, 29, "Print",
  CellTags->"Info3248519924-1535622"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[709410, 23919, 53, 0, 52, "MiscSection"],
Cell[709466, 23921, 243, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[709734, 23929, 196, 3, 83, "Input"],
Cell[709933, 23934, 42, 1, 38, "Output"]
}, Open  ]],
Cell[709990, 23938, 220, 4, 63, "Commentary"],

Cell[CellGroupData[{
Cell[710235, 23946, 196, 3, 82, "Input"],
Cell[710434, 23951, 41, 1, 38, "Output"]
}, Open  ]],
Cell[710490, 23955, 104, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[710619, 23962, 216, 3, 82, "Input"],
Cell[710838, 23967, 40, 1, 38, "Output"]
}, Open  ]],
Cell[710893, 23971, 445, 7, 96, "Commentary"],

Cell[CellGroupData[{
Cell[711363, 23982, 171, 3, 82, "Input"],
Cell[711537, 23987, 43, 1, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[711617, 23993, 63, 1, 40, "Input"],
Cell[711683, 23996, 43, 1, 38, "Output"]
}, Open  ]],
Cell[711741, 24000, 143, 3, 46, "Commentary"],

Cell[CellGroupData[{
Cell[711909, 24007, 188, 3, 82, "Input"],
Cell[712100, 24012, 42, 1, 38, "Output"]
}, Open  ]],
Cell[712157, 24016, 277, 5, 80, "Commentary"],

Cell[CellGroupData[{
Cell[712459, 24025, 196, 3, 82, "Input"],
Cell[712658, 24030, 42, 1, 38, "Output"]
}, Open  ]],
Cell[712715, 24034, 124, 3, 46, "Commentary"],

Cell[CellGroupData[{
Cell[712864, 24041, 65, 1, 40, "Input"],
Cell[712932, 24044, 87, 1, 38, "Output"]
}, Open  ]],
Cell[713034, 24048, 264, 5, 66, "Text"],

Cell[CellGroupData[{
Cell[713323, 24057, 49, 1, 40, "Input"],
Cell[713375, 24060, 70, 1, 38, "Output"]
}, Open  ]],
Cell[713460, 24064, 127, 3, 46, "Commentary"],

Cell[CellGroupData[{
Cell[713612, 24071, 122, 2, 61, "Input"],
Cell[713737, 24075, 44, 1, 38, "Output"]
}, Open  ]],
Cell[713796, 24079, 639, 12, 113, "Commentary"],

Cell[CellGroupData[{
Cell[714460, 24095, 197, 3, 82, "Input"],
Cell[714660, 24100, 105, 2, 38, "Output"]
}, Open  ]],
Cell[714780, 24105, 408, 8, 80, "Commentary"],

Cell[CellGroupData[{
Cell[715213, 24117, 191, 4, 103, "Input"],
Cell[715407, 24123, 65, 1, 38, "Output"]
}, Open  ]],
Cell[715487, 24127, 150, 5, 30, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[715674, 24137, 47, 0, 52, "MiscSection"],

Cell[CellGroupData[{
Cell[715746, 24141, 69, 0, 56, "Subsection"],
Cell[715818, 24143, 125, 3, 30, "Text"],
Cell[715946, 24148, 48, 1, 40, "Input"],
Cell[715997, 24151, 264, 5, 48, "Text"],
Cell[716264, 24158, 81, 3, 57, "Input"],
Cell[716348, 24163, 292, 5, 48, "Text"],
Cell[716643, 24170, 95, 3, 57, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[716775, 24178, 58, 0, 44, "Subsection"],
Cell[716836, 24180, 281, 6, 66, "Text",
  CellTags->"Lists_Tables"],

Cell[CellGroupData[{
Cell[717142, 24190, 224, 5, 103, "Input"],
Cell[717369, 24197, 486, 16, 169, "Output"]
}, Open  ]],
Cell[717870, 24216, 334, 8, 66, "Text"],

Cell[CellGroupData[{
Cell[718229, 24228, 85, 2, 61, "Input"],
Cell[718317, 24232, 503, 16, 169, "Output"]
}, Open  ]],
Cell[718835, 24251, 92, 2, 30, "Text"],

Cell[CellGroupData[{
Cell[718952, 24257, 100, 2, 61, "Input"],
Cell[719055, 24261, 487, 16, 169, "Output"]
}, Open  ]],
Cell[719557, 24280, 92, 1, 30, "Text"],

Cell[CellGroupData[{
Cell[719674, 24285, 147, 3, 61, "Input"],
Cell[719824, 24290, 538, 16, 169, "Output"]
}, Open  ]],
Cell[720377, 24309, 250, 4, 66, "Text"],

Cell[CellGroupData[{
Cell[720652, 24317, 155, 3, 61, "Input"],
Cell[720810, 24322, 384, 11, 73, "Output"]
}, Open  ]],
Cell[721209, 24336, 193, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[721427, 24344, 148, 2, 61, "Input"],
Cell[721578, 24348, 354, 11, 73, "Output"]
}, Open  ]],
Cell[721947, 24362, 207, 5, 48, "Text"],

Cell[CellGroupData[{
Cell[722179, 24371, 95, 2, 40, "Input"],
Cell[722277, 24375, 486, 16, 169, "Output"]
}, Open  ]],
Cell[722778, 24394, 119, 4, 30, "Text"],

Cell[CellGroupData[{
Cell[722922, 24402, 103, 2, 40, "Input"],
Cell[723028, 24406, 393, 13, 111, "Output"]
}, Open  ]],
Cell[723436, 24422, 227, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[723688, 24430, 127, 2, 61, "Input"],
Cell[723818, 24434, 393, 13, 111, "Output"]
}, Open  ]],
Cell[724226, 24450, 215, 7, 49, "Text"],

Cell[CellGroupData[{
Cell[724466, 24461, 99, 2, 40, "Input"],
Cell[724568, 24465, 393, 13, 111, "Output"]
}, Open  ]],
Cell[724976, 24481, 526, 14, 67, "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[725551, 24501, 39, 0, 52, "MiscSection"],
Cell[725593, 24503, 1496, 58, 66, "Text",
  CellTags->"Pattern-Matching"],

Cell[CellGroupData[{
Cell[727114, 24565, 35, 0, 56, "Subsection"],
Cell[727152, 24567, 113, 3, 61, "Input"],
Cell[727268, 24572, 152, 3, 61, "Input"],
Cell[727423, 24577, 182, 3, 61, "Input"],
Cell[727608, 24582, 115, 2, 61, "Input"],
Cell[727726, 24586, 169, 3, 61, "Input"],
Cell[727898, 24591, 207, 4, 82, "Input"],
Cell[728108, 24597, 123, 2, 61, "Input"],
Cell[728234, 24601, 164, 4, 61, "Input"],
Cell[728401, 24607, 149, 4, 61, "Input"],
Cell[728553, 24613, 153, 3, 61, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[728743, 24621, 55, 0, 44, "Subsection"],
Cell[728801, 24623, 751, 14, 151, "Text"],

Cell[CellGroupData[{
Cell[729577, 24641, 329, 7, 145, "Input"],
Cell[729909, 24650, 118, 2, 53, "Output"]
}, Open  ]],
Cell[730042, 24655, 189, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[730256, 24663, 74, 1, 56, "Input"],
Cell[730333, 24666, 223, 6, 38, "Output"]
}, Open  ]],
Cell[730571, 24675, 105, 3, 30, "Text"],

Cell[CellGroupData[{
Cell[730701, 24682, 121, 2, 40, "Input"],
Cell[730825, 24686, 159, 2, 62, "Output"]
}, Open  ]],
Cell[730999, 24691, 277, 10, 30, "Text"],
Cell[731279, 24703, 365, 14, 30, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[731681, 24722, 71, 0, 44, "Subsection"],
Cell[731755, 24724, 232, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[732012, 24732, 82, 1, 56, "Input"],
Cell[732097, 24735, 39, 1, 38, "Output"]
}, Open  ]],
Cell[732151, 24739, 229, 6, 86, "Text"],
Cell[732383, 24747, 476, 13, 126, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[732896, 24765, 71, 0, 44, "Subsection"],
Cell[732970, 24767, 124, 3, 30, "Text"],
Cell[733097, 24772, 145, 2, 61, "Input"],
Cell[733245, 24776, 250, 8, 49, "Text"],

Cell[CellGroupData[{
Cell[733520, 24788, 98, 2, 61, "Input"],
Cell[733621, 24792, 107, 2, 38, "Output"]
}, Open  ]],
Cell[733743, 24797, 178, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[733946, 24805, 255, 5, 103, "Input"],
Cell[734204, 24812, 74, 1, 38, "Output"]
}, Open  ]],
Cell[734293, 24816, 944, 20, 178, "Text",
  CellTags->"s_Symbol"],
Cell[735240, 24838, 42, 1, 40, "Input"],

Cell[CellGroupData[{
Cell[735307, 24843, 40, 1, 40, "Input"],
Cell[735350, 24846, 413, 14, 38, "Output"]
}, Open  ]],
Cell[735778, 24863, 163, 3, 48, "Text"],

Cell[CellGroupData[{
Cell[735966, 24870, 219, 4, 103, "Input"],
Cell[736188, 24876, 286, 8, 38, "Output"]
}, Open  ]],
Cell[736489, 24887, 202, 4, 48, "Text"],
Cell[736694, 24893, 523, 12, 61, "Input"],
Cell[737220, 24907, 64, 0, 30, "Text"],

Cell[CellGroupData[{
Cell[737309, 24911, 161, 4, 103, "Input"],
Cell[737473, 24917, 75, 1, 38, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[737609, 24925, 47, 0, 52, "MiscSection"],

Cell[CellGroupData[{
Cell[737681, 24929, 92, 1, 56, "Subsection",
  CellTags->"Controlling Memory Usage"],
Cell[737776, 24932, 371, 8, 66, "Text"],
Cell[738150, 24942, 141, 5, 40, "Input",
  Evaluatable->False],
Cell[738294, 24949, 224, 4, 48, "Text"],
Cell[738521, 24955, 57, 1, 40, "Input"],
Cell[738581, 24958, 222, 6, 53, "Text"],
Cell[738806, 24966, 97, 2, 40, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[738940, 24973, 56, 0, 44, "Subsection"],
Cell[738999, 24975, 116, 3, 30, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[739152, 24983, 41, 0, 44, "Subsection"],
Cell[739196, 24985, 313, 5, 66, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[739546, 24995, 71, 0, 44, "Subsection"],
Cell[739620, 24997, 125, 3, 30, "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[739794, 25006, 43, 0, 52, "MiscSection"],
Cell[739840, 25008, 1067, 20, 147, "Text",
  CellTags->"Tech Support"],
Cell[740910, 25030, 8477, 307, 951, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[749424, 25342, 44, 0, 52, "MiscSection"],
Cell[749471, 25344, 153, 4, 31, "Text",
  CellTags->"Speedy_Programming"],

Cell[CellGroupData[{
Cell[749649, 25352, 40, 0, 57, "Subsection"],
Cell[749692, 25354, 844, 18, 237, "Text"],

Cell[CellGroupData[{
Cell[750561, 25376, 401, 8, 170, "Input"],
Cell[750965, 25386, 892, 14, 265, "Output"]
}, Open  ]],
Cell[751872, 25403, 286, 5, 47, "Text"],
Cell[752161, 25410, 428, 10, 170, "Input"],
Cell[752592, 25422, 135, 3, 30, "Text"],
Cell[752730, 25427, 79, 1, 40, "Input"],
Cell[752812, 25430, 585, 12, 142, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[753434, 25447, 48, 0, 46, "Subsection"],
Cell[753485, 25449, 642, 15, 217, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[754164, 25469, 40, 0, 46, "Subsection"],
Cell[754207, 25471, 386, 6, 85, "Text"],
Cell[754596, 25479, 374, 7, 167, "Input"],

Cell[CellGroupData[{
Cell[754995, 25490, 56, 1, 40, "Input"],
Cell[755054, 25493, 68, 1, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[755159, 25499, 56, 1, 40, "Input"],
Cell[755218, 25502, 70, 1, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[755325, 25508, 56, 1, 40, "Input"],
Cell[755384, 25511, 70, 1, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[755503, 25518, 70, 0, 46, "Subsection"],
Cell[755576, 25520, 372, 7, 66, "Text",
  CellTags->"Linked-List"],

Cell[CellGroupData[{
Cell[755973, 25531, 212, 4, 82, "Input"],
Cell[756188, 25537, 67, 1, 38, "Output"]
}, Open  ]],
Cell[756270, 25541, 307, 6, 67, "Text"],

Cell[CellGroupData[{
Cell[756602, 25551, 210, 4, 82, "Input"],
Cell[756815, 25557, 69, 1, 38, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[756921, 25563, 54, 1, 40, "Input"],
Cell[756978, 25566, 38, 1, 38, "Output"]
}, Open  ]],
Cell[757031, 25570, 392, 8, 86, "Text"],

Cell[CellGroupData[{
Cell[757448, 25582, 275, 6, 125, "Input"],
Cell[757726, 25590, 316, 7, 59, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[758079, 25602, 66, 1, 40, "Input"],
Cell[758148, 25605, 247, 4, 59, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[758444, 25615, 57, 0, 46, "Subsection"],
Cell[758504, 25617, 226, 4, 48, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[758767, 25626, 64, 0, 46, "Subsection"],
Cell[758834, 25628, 661, 12, 178, "Text"],

Cell[CellGroupData[{
Cell[759520, 25644, 214, 4, 83, "Input"],
Cell[759737, 25650, 143, 2, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[759929, 25658, 52, 0, 46, "Subsection"],
Cell[759984, 25660, 225, 4, 48, "Text"],
Cell[760212, 25666, 123, 2, 60, "Input"],
Cell[760338, 25670, 247, 4, 48, "Text"],
Cell[760588, 25676, 142, 2, 60, "Input"]
}, Closed]],

Cell[CellGroupData[{
Cell[760767, 25683, 83, 1, 46, "Subsection"],
Cell[760853, 25686, 568, 9, 121, "Text"],
Cell[761424, 25697, 468, 10, 161, "Input"],
Cell[761895, 25709, 250, 4, 66, "Text"],

Cell[CellGroupData[{
Cell[762170, 25717, 204, 4, 103, "Input"],
Cell[762377, 25723, 150, 2, 59, "Output"]
}, Open  ]],
Cell[762542, 25728, 307, 5, 66, "Text"],

Cell[CellGroupData[{
Cell[762874, 25737, 261, 5, 105, "Input"],
Cell[763138, 25744, 212, 3, 80, "Output"]
}, Open  ]],
Cell[763365, 25750, 201, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[763591, 25758, 190, 4, 82, "Input"],
Cell[763784, 25764, 500, 7, 208, "Output"]
}, Open  ]],
Cell[764299, 25774, 580, 15, 122, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[764916, 25794, 74, 0, 46, "Subsection"],
Cell[764993, 25796, 453, 7, 103, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[765483, 25808, 39, 0, 46, "Subsection"],
Cell[765525, 25810, 1083, 24, 196, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[766645, 25839, 45, 0, 46, "Subsection"],
Cell[766693, 25841, 445, 9, 66, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[767175, 25855, 114, 3, 68, "Subsection"],
Cell[767292, 25860, 243, 7, 48, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[767572, 25872, 101, 2, 46, "Subsection"],
Cell[767676, 25876, 854, 17, 158, "Text"],

Cell[CellGroupData[{
Cell[768555, 25897, 262, 6, 83, "Input"],
Cell[768820, 25905, 69, 1, 38, "Output"]
}, Open  ]],
Cell[768904, 25909, 236, 4, 48, "Text"],

Cell[CellGroupData[{
Cell[769165, 25917, 372, 7, 167, "Input"],
Cell[769540, 25926, 70, 1, 38, "Output"]
}, Open  ]],
Cell[769625, 25930, 332, 7, 104, "Text"],

Cell[CellGroupData[{
Cell[769982, 25941, 185, 3, 82, "Input"],
Cell[770170, 25946, 71, 1, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[770290, 25953, 52, 0, 46, "Subsection"],
Cell[770345, 25955, 418, 9, 90, "Text"],
Cell[770766, 25966, 179, 4, 61, "Input"],
Cell[770948, 25972, 67, 0, 31, "Text"],

Cell[CellGroupData[{
Cell[771040, 25976, 74, 1, 40, "Input"],
Cell[771117, 25979, 74, 1, 38, "Output"]
}, Open  ]],
Cell[771206, 25983, 252, 5, 50, "Text"],
Cell[771461, 25990, 84, 1, 40, "Input"],

Cell[CellGroupData[{
Cell[771570, 25995, 63, 1, 40, "Input"],
Cell[771636, 25998, 57, 1, 38, "Output"]
}, Open  ]],
Cell[771708, 26002, 851, 17, 128, "Text"],

Cell[CellGroupData[{
Cell[772584, 26023, 254, 4, 61, "Input"],
Cell[772841, 26029, 91, 1, 30, "Print"],
Cell[772935, 26032, 91, 1, 30, "Print"],
Cell[773029, 26035, 83, 1, 30, "Print"],
Cell[773115, 26038, 83, 1, 30, "Print"],
Cell[773201, 26041, 83, 1, 30, "Print"],
Cell[773287, 26044, 75, 1, 30, "Print"],
Cell[773365, 26047, 75, 1, 30, "Print"],
Cell[773443, 26050, 75, 1, 30, "Print"],
Cell[773521, 26053, 67, 1, 30, "Print"],
Cell[773591, 26056, 67, 1, 30, "Print"],
Cell[773661, 26059, 67, 1, 30, "Print"],
Cell[773731, 26062, 59, 1, 30, "Print"],
Cell[773793, 26065, 59, 1, 30, "Print"],
Cell[773855, 26068, 58, 1, 38, "Output"]
}, Open  ]],
Cell[773928, 26072, 287, 5, 50, "Text"],
Cell[774218, 26079, 512, 10, 229, "Input"],

Cell[CellGroupData[{
Cell[774755, 26093, 75, 1, 40, "Input"],
Cell[774833, 26096, 74, 1, 38, "Output"]
}, Open  ]],
Cell[774922, 26100, 89, 2, 31, "Text"],
Cell[775014, 26104, 84, 1, 40, "Input"],

Cell[CellGroupData[{
Cell[775123, 26109, 63, 1, 40, "Input"],
Cell[775189, 26112, 55, 1, 38, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[775293, 26119, 45, 0, 46, "Subsection"],
Cell[775341, 26121, 1038, 25, 105, "Text"],
Cell[776382, 26148, 662, 19, 67, "Text",
  CellTags->"Fast Programming"],
Cell[777047, 26169, 369, 8, 123, "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[777465, 26183, 44, 0, 52, "MiscSection"],
Cell[777512, 26185, 443, 9, 69, "Text"],

Cell[CellGroupData[{
Cell[777980, 26198, 97, 2, 57, "Subsection"],
Cell[778080, 26202, 512, 13, 198, "Text",
  CellTags->"Slow_Functions"],

Cell[CellGroupData[{
Cell[778617, 26219, 45, 0, 52, "Subsubsection"],
Cell[778665, 26221, 612, 12, 185, "Input"],

Cell[CellGroupData[{
Cell[779302, 26237, 79, 1, 40, "Input"],
Cell[779384, 26240, 452, 12, 105, "Output"]
}, Open  ]],
Cell[779851, 26255, 499, 10, 165, "Input"],

Cell[CellGroupData[{
Cell[780375, 26269, 73, 1, 40, "Input"],
Cell[780451, 26272, 450, 12, 105, "Output"]
}, Open  ]],
Cell[780916, 26287, 483, 9, 165, "Input"],

Cell[CellGroupData[{
Cell[781424, 26300, 74, 1, 40, "Input"],
Cell[781501, 26303, 464, 12, 105, "Output"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[782014, 26321, 73, 0, 45, "Subsubsection"],
Cell[782090, 26323, 483, 7, 103, "Text"],
Cell[782576, 26332, 464, 10, 66, "Text"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[783089, 26348, 41, 0, 46, "Subsection"],
Cell[783133, 26350, 259, 7, 48, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[783429, 26362, 34, 0, 46, "Subsection"],
Cell[783466, 26364, 113, 3, 30, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[783616, 26372, 40, 0, 46, "Subsection"],
Cell[783659, 26374, 145, 3, 48, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[783841, 26382, 38, 0, 46, "Subsection"],
Cell[783882, 26384, 118, 3, 30, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[784037, 26392, 60, 0, 46, "Subsection"],
Cell[784100, 26394, 67, 0, 30, "Text"],
Cell[784170, 26396, 85, 2, 30, "Text"],
Cell[784258, 26400, 121, 3, 30, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[784416, 26408, 90, 2, 46, "Subsection"],
Cell[784509, 26412, 435, 7, 85, "Text"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{
Cell[784993, 26425, 82, 1, 52, "MiscSection"],
Cell[785078, 26428, 336, 7, 50, "Text"],

Cell[CellGroupData[{
Cell[785439, 26439, 2290, 45, 542, "Subsubsection"],
Cell[787732, 26486, 206, 5, 50, "Text"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{
Cell[787987, 26497, 44, 0, 52, "MiscSection"],
Cell[788034, 26499, 156, 3, 30, "Text"],
Cell[788193, 26504, 154, 3, 30, "Text"],
Cell[788350, 26509, 176, 3, 30, "Text"],
Cell[788529, 26514, 186, 3, 30, "Text"],
Cell[788718, 26519, 229, 5, 30, "Text"],
Cell[788950, 26526, 177, 3, 30, "Text"],
Cell[789130, 26531, 229, 5, 30, "Text"],
Cell[789362, 26538, 186, 3, 30, "Text"],
Cell[789551, 26543, 198, 3, 30, "Text"],
Cell[789752, 26548, 166, 3, 30, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[789955, 26556, 59, 0, 52, "MiscSection"],
Cell[790017, 26558, 408, 7, 105, "Text"],
Cell[790428, 26567, 150, 4, 30, "Text"],
Cell[790581, 26573, 170, 3, 31, "Text"],
Cell[790754, 26578, 140, 3, 31, "Text"],
Cell[790897, 26583, 89, 1, 30, "Text"]
}, Closed]],

Cell[CellGroupData[{
Cell[791023, 26589, 51, 0, 52, "MiscSection"],
Cell[791077, 26591, 331, 7, 80, "Commentary"],
Cell[791411, 26600, 79, 3, 63, "Commentary"],
Cell[791493, 26605, 177, 5, 63, "Commentary"],
Cell[791673, 26612, 224, 6, 63, "Commentary"],
Cell[791900, 26620, 67, 3, 63, "Commentary"],
Cell[791970, 26625, 269, 7, 98, "Commentary"]
}, Closed]]
}
]
*)



(*******************************************************************
End of Mathematica Notebook file.
*******************************************************************)

