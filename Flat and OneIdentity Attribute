###### Flat Attribute ##### (from Wolfram Documentation)

(* Flat causes the functions to flatten out *)
SetAttributes[f, Flat];
f[f[a, b], f[c, f[d, e]]]
(* f[a, b, c, d, e] *)

(* Flat allows the pattern matcher to use Associativity*)
Attributes[Plus]
(* {Flat, Listable, NumericFunction, OneIdentity, Orderless, Protected} *)
a + b + c /. x_ + y_ :> {x, y}
(* {a, b + c} *)


(*In pattern matching Flat allows sequence of elements to be replaced *)

ClearAll["Global`*"]
SetAttributes[f, Flat];
f[a, b, c, d, e] /. f[b, c, d] -> x
(* f[a, x, e] *)

f[a, b, c, d, e] /. f[b, c, d] -> f[x, y]
(* f[a, x, y, e] *)

f[a, b, c, d, e] /. f[b] -> x
(* f[a, x, c, d, e] *)

(* For Flat and Orderless attributes any subset of arguments can match *)
ClearAll["Global`*"]
SetAttributes[f, {Flat, Orderless}];
f[a, b, c, d, e] /. f[d, b] -> x
(* f[a, c, e, x] *)

(* Nested expressions with flat functions are automatically flattened *)
ClearAll["Global`*"]
f[f[a, b], f[c, f[d, e]]]
(* f[f[a, b], f[c, f[d, e]]] *)
Flatten[%]
(* f[a, b, c, d, e] *)

SetAttributes[g, Flat]
g[g[a, b], g[c, g[d, e]]]
(* g[a, b, c, d, e] *)

(* For flat functions a definition for the two-argument case is normally sufficient *)

ClearAll["Global`*"];
SetAttributes[g, Flat];
g[x_, y_] := x + y
g[a, b, c, d]
(* g[a] + g[b] + g[c] + g[d] *)

(* If OneIdentity is also provided as an attribute then f[a_] will be matched to a_ *)
ClearAll["Global`*"];
SetAttributes[g, {Flat,OneIdentity}];
g[x_,y_] := {x,y};
g[a,b,c,d]
(* a + b + c + d *)


(*an expression with a flat head is considered matched in its entirety when any sequence is matched*)
ClearAll["Global`*"];
a + b + Sin[a + b] /. a + b -> 5
(* 5 + Sin[a + b] *)
(* compare with non-Flat functions *)
{a + b, Sin[a + b]} /. a + b -> 5
(* {5, Sin[5]} *)
(*ReplaceRepeated may be helpful in ensuring all occurences are replaced*)
a + b + Sin[a+b]//. a + b -> 5
(* 5 + Sin[5] *)

(*When Blank matches a sequence inside a Flat function f, it will maintain the head f: *)
SetAttributes[f,Flat];
f[a,b,c]/. f[a,x_] :> {x}
(* {f[b,c]} *)
f[a,b,c]/. f[x_]:> {x}
(* {f[a,b,c]} *)

(* Sequential patterns like BlankSequence and BlankNullSequence are not affected by Flat *)
f[a,b,c]/. f[a,z__] :> {z}
(* {b,c} *)
f[a,b,c]/. f[a,z___] :> {z}
(* {b,c} *)


(* For a Flat function f that is not OneIdentity, when f[x_] is compared with f[expr], the pattern
matcher will attempt to bind x_ with f[expr] first, and only if that fails to expr: *)
ClearAll["Global`*"];
SetAttributes[f,Flat];
f[3] /. f[z_] /; IntegerQ[Echo@z] :> z
>> f[3]
>> 3
(* 3 *)

ClearAll["Global`*"];
SetAttributes[f, {Flat,OneIdentity}];
f[3]/. f[z_]/; IntegerQ[Echo@z] :> z
>> 3
(* 3 *)


(* For flat and orderless functions, pattern-matching may try a lot of cases  *)
ClearAll["Global`*"]
SetAttributes[f, {Flat, OneIdentity, Orderless}];
ReplaceList[f[a, b, c, d], f[x_, y_] :> {x, y}]
(* {{a, f[b, c, d]}, {b, f[a, c, d]}, {c, f[a, b, d]}, {d, f[a, b, c]}, {f[a, b], f[c, d]}, {f[a, c], f[b, d]},
{f[a, d], f[b, c]}, {f[b, c], f[a, d]}, {f[b, d], f[a, c]}, {f[c, d], f[a, b]}, {f[a, b, c], d}, {f[a, b, d], c},
{f[a, c, d], b}, {f[b, c, d], a}} *)


(* Longest can be used to prevent matches for smaller subexpressions *)
ClearAll["Global`*"];
SetAttributes[f, {Flat, OneIdentity}];
Replace[f[a,b,c,d], f[x_,y__,z_]:> {y}]
(* {b} *)
Replace[f[a, b, c, d], f[x_, Longest[y__], z_] :> {y}]
(* {b,c} *)

(* for a Flat function f[_] matches f with more than one argument *)
SetAttributes[f, Flat]
MatchQ[f[1, 2], f[_]]
(* True *)

(* Repeated can be used as a pattern that only matches a single argument, even inside a Flat function  *)
MatchQ[f[1,2], f[Repeated[_,{1}]]]
(* False *)

(* Replace may behave unexpectedly because x_ matches together with the head of a flat function *)
Replace[a+b+c, Plus[a,x_]:> x]
(* b+c *)

(* The following restriction works because x_Plus matches Plus[b,c]: *)
Replace[a+b+c, Plus[a,x_Plus] :> x]
(* b+c *)

(* However, this one will fail because x_ cannot have both head Plus and Symbol: *)
Replace[a+b+c, Plus[a,x_Symbol] :> x]
(* a+b+c *)

(* using BlankSequence in such cases produces a more consistent result *)
Replace[a+b+c, Plus[a,x__Symbol]:> Plus[x]]
(* b+c *)

SetAttributes[f, {Flat}];
f[a, b, c] /. f[a, x_f] :> x
(* f[b, c] *)
Replace[f[a, b, c], f[a, x_f] :> x]
(* f[b, c] *)

f[a, b, c] /. f[a, x__Symbol] :> x
(* Sequence[b, c] *)
Replace[f[a, b, c], f[a, x__Symbol] :> x]
(* Sequence[b, c] *)


##### ONEIDENTITY ##### (from Wolfram Documentation)
(*The following pattern matches because Times has an attribute of OneIdentity *)
MatchQ[x, Times[n_.,x_] ]
(* True *)

(* any function with an attribute of OneIdentity will match *)
ClearAll["Global`*"];
SetAttributes[f, OneIdentity]
MatchQ[a, f[x_: 0, y_]]
(* True *)

(* OneIdentity allows defaults to apply to expressions that do not involve Times at all: *)
{x, 2 x, - x}/. (n_. x) :> y^n
(* {y, y^2, 1/y} *)

(* For Flat functions, any sequence of arguments will match Blank: *)
SetAttributes[f, Flat];
{f[a], f[b, c]}/. f[x_] :> x
(* { f[a], f[b,c] } *)

(* When f is both Flat and OneIdentity, f[x_] will attempt to match x_ to a rather than f[a]: *)
ClearAll["Global`*"];
SetAttributes[f, {Flat, OneIdentity}];
{f[a], f[b, c]} /. f[x_] :> x
(* {a, f[b, c]} *)

(* In order for f[a] to match a, you must use a pattern that includes Optional: *)
ClearAll["Global`*"];
SetAttributes[f, OneIdentity];
MatchQ[x, f[_]]
(* False *)

MatchQ[x,f[_:0]]
(* True *)

(* Similarly, the following pattern fails because f has no defined defaults: *)
MatchQ[x,f[_.]]
(* False *)

(* Defining a default will resolve this issue: *)
Default[f] = 1;
MatchQ[x, f[_.]]
(* True *)
